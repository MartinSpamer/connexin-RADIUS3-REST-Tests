<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="0bc3747a-36c2-48ba-a09e-603c36b733bf" activeEnvironment="Default" name="connexin-radius3" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="TestSuite" value="Radius3 API TestSuite"/>
  <con:entry key="Endpoint" value="http://radius-dev-v3.uk.cxn-network.net/api"/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Username" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" id="a2223477-1413-4148-a503-4a5ee7227398" wadlVersion="http://wadl.dev.java.net/2009/02" name="Radius3 API" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>This is the Connexin Radius API
</con:description><con:settings><con:setting id="CreateWadlDocumentationAction@report-directory">C:\Users\m.spamer\soapui-projects\Connexin-RADIUS3\docs</con:setting></con:settings><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint></con:endpoints><con:resource name="/accounting_entries" path="/accounting_entries" id="59cfa357-6bd6-4662-a527-5638ba18d200"><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:value>${#TestCase#pageNo}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#pageNo}</con:default><con:description>Page number of results to be retrieved.</con:description></con:parameter><con:parameter><con:name>limit</con:name><con:value>${#TestCase#limit}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#limit}</con:default><con:description>The maximum number of records to be return per page</con:description></con:parameter></con:parameters><con:method name="GET" id="f9a7f582-0786-4e8a-bcea-63c7fba5a0b8" method="GET"><con:description>
Returns a list of Accounting Entries</con:description><con:settings/><con:parameters><con:parameter required="false"><con:name>user</con:name><con:value>${#TestCase#userId}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#userId}</con:default><con:description>The unique ID for the User who's Accounting Entries are retrieved</con:description></con:parameter><con:parameter><con:name>username</con:name><con:value>${#TestCase#username}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#username}</con:default><con:description>The RADIUS Username for Accounting Entries (depreciated)</con:description></con:parameter><con:parameter><con:name>page</con:name><con:value>${#TestCase#pageNo}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#pageNo}</con:default><con:option>${#TestCase#PageNo}</con:option><con:option>1</con:option><con:description>The page number of results to be retrieved (default: 1)</con:description></con:parameter><con:parameter><con:name>limit</con:name><con:value>${#TestCase#limit}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#limit}</con:default><con:option>${#TestCase#PageLimit}</con:option><con:option>25</con:option><con:description>limit - The maximum number of records to retrieved per page (default: 25)</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:acc="http://radius-dev-v3.uk.cxn-network.net/api/accounting_entries">acc:Response</con:element></con:representation><con:request name="Request 1" id="4d349f18-29d1-435f-ac23-37fe4da76bee" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/accounting_entries</con:originalUri><con:credentials><con:username/><con:password/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="limit" value="${#TestCase#pageLimit}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>user</con:entry><con:entry>username</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/accounting_entries/{id}" path="/accounting_entries/" id="9412d460-fa48-49c8-a528-7e8ae9827511"><con:settings/><con:parameters/><con:method name="GET" id="ae5fd929-0dfe-436f-9930-3bf69f979bdd" method="GET"><con:description>
Returns an Accounting Entry by Id</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>id</con:name><con:value>${#TestCase#userId}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#userId}</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:acc="http://radius-dev-v3.uk.cxn-network.net/api/accounting_entries/">acc:Response</con:element></con:representation><con:request name="Request 1" id="2b6df3df-51a5-4d60-9c1f-c427800aac9a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/accounting_entries/</con:originalUri><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#userId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/admins" path="/admins" id="4a7cfc7f-9ddf-44db-9f6f-8ca3ee2c5288"><con:settings/><con:parameters/><con:method name="GET" id="6196fb58-c4b5-490a-85fa-3f9b11cb38d2" method="GET"><con:description>
Returns a list of Admins</con:description><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:value>${#TestCase#pageNo}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#pageNo}</con:default><con:description>The page number of results to be retrieved</con:description></con:parameter><con:parameter><con:name>limit</con:name><con:value>${#TestCase#limit}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#limit}</con:default><con:description>limit - The maximum number of records to retrieved per page</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:adm="http://radius-dev-v3.uk.cxn-network.net/api/admins">adm:Response</con:element></con:representation><con:request name="Request 1" id="b1dc183e-6e64-48bc-86e8-bee4979b104b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/admins</con:originalUri><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#pageLimit}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
</con:parameters><con:parameterOrder><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:request></con:method><con:method name="POST" id="57564b8f-475d-41bf-a4ae-07da1c261c60" method="POST"><con:description>
Create an Admin</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:adm="http://radius-dev-v3.uk.cxn-network.net/api/admins">adm:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:adm="http://radius-dev-v3.uk.cxn-network.net/api/admins">adm:Response</con:element></con:representation><con:request name="Request 1" id="b5b5d556-57d8-4b79-ad4e-2ed5b410378f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createAdminRequest}
</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="/admins/{id}" path="/admins/{id}" id="aa2fa85f-679e-41be-b585-394baa100883"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#adminId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#adminId}</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="GET" id="42aa7f87-ca25-4c54-8ed1-ff2322d1b797" method="GET"><con:description>
Returns an Admin by Id</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:adm="http://radius-dev-v3.uk.cxn-network.net/api/admins/">adm:Response</con:element></con:representation><con:request name="Request 1" id="2d95123e-a165-4f12-942f-f4ccc2c997cb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/admins/</con:originalUri><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="PUT" id="e1c1a641-6a1a-4f95-b254-51bafc9d1b14" method="PUT"><con:description>
Update an Admin</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:adm="http://radius-dev-v3.uk.cxn-network.net/api/admins/">adm:Fault</con:element></con:representation><con:request name="Request 1" id="1b7588ff-d556-4762-ac43-df81b967e476" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateAdminRequest}</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="DELETE" id="24d68141-b6a8-4b53-afb6-3ca30af264ed" method="DELETE"><con:description>
Delete an Admin</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:request name="Request 1" id="834065a6-26ca-4b52-ad7d-647361df4711" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/audits" path="/audits" id="73d0887e-1e3a-4b88-99e2-79c8cdf8c329"><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description>The page number of results to be retrieved</con:description></con:parameter><con:parameter><con:name>limit</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/><con:description>limit - The maximum number of records to retrieved per page</con:description></con:parameter></con:parameters><con:method name="GET" id="a5270c49-3e5b-46ba-9831-c8ff2526fdc9" method="GET"><con:description>
Returns a list of Audits</con:description><con:settings/><con:parameters><con:parameter><con:name>model</con:name><con:style>QUERY</con:style><con:description>The Model Name to return Audit Log Entries for</con:description></con:parameter><con:parameter><con:name>entity_id</con:name><con:style>QUERY</con:style><con:description>The Record Id to return Audit Log Entires for</con:description></con:parameter><con:parameter><con:name>user</con:name><con:style>QUERY</con:style><con:description>The User Id to return Audit Log Entries for</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="bf0b483e-12f3-4075-9b01-c82dfaf712ea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#pageLimit}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
</con:parameters><con:parameterOrder><con:entry>model</con:entry><con:entry>entity_id</con:entry><con:entry>user</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/audits/{id}" path="/audits/{id}" id="bc861a97-d37c-4142-a13c-ad4adfd782f9"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#id}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#id}</con:default></con:parameter></con:parameters><con:method name="GET" id="cb4cc947-3ab6-41d9-ac43-407d5ff22d00" method="GET"><con:description>
Returns an Audit by Id</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="f0910fbd-2d91-4011-8e44-7c2647431270" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/event_types" path="/event_types" id="efdc3685-851b-4307-9030-687a64cfe6c5"><con:settings/><con:parameters><con:parameter><con:name>page</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/><con:description>The page number of results to be retrieved</con:description></con:parameter><con:parameter><con:name>limit</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default/><con:description>limit - The maximum number of records to retrieved per page</con:description></con:parameter></con:parameters><con:method name="GET" id="7f82b4fc-65cd-4f10-9224-51b4128e29a2" method="GET"><con:description>
Returns a list of Event Types</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="363e5537-78a6-49f1-b886-f55e706b7a08" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#pageLimit}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
</con:parameters><con:parameterOrder><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/event_types/{id}" path="/event_types/{id}" id="27722f8a-541c-4a81-95ab-68879cdfc5b3"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#eventTypeId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#eventTypeId}</con:default></con:parameter></con:parameters><con:method name="GET" id="7a0266a7-bf58-46d6-a559-71c4e37efb5a" method="GET"><con:description>
Returns an Event Type by Id</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="3f04b53b-748e-45d2-9875-f847c866ff11" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/events" path="/events" id="b43c3d6a-e18d-4b47-9988-d8cc4a7d553d"><con:settings/><con:parameters/><con:method name="GET" id="6ee5e2ed-9cdb-4601-9c16-632c37a407c2" method="GET"><con:description>
Returns a list of Events</con:description><con:settings/><con:parameters><con:parameter><con:name>user</con:name><con:style>QUERY</con:style><con:description>The User Id to return Events for</con:description></con:parameter><con:parameter><con:name>page</con:name><con:value>${#TestCase#page}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#page}</con:default><con:description>The page number of results to be retrieved</con:description></con:parameter><con:parameter><con:name>limit</con:name><con:value>${#TestCase#limit}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#limit}</con:default><con:description>limit - The maximum number of records to retrieved per page</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="204471ff-91ef-40bb-92a2-2fecd34fffab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#pageLimit}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
  <con:entry key="user" value="${#TestCase#userId}"/>
</con:parameters><con:parameterOrder><con:entry>user</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/events/{id}" path="/events/{id}" id="3c72baec-8565-4f19-8c06-53b8fe68ac46"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#eventId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#eventId}</con:default></con:parameter></con:parameters><con:method name="GET" id="f746c3ca-2636-480f-a8c4-280347d23419" method="GET"><con:description>
Returns an Event by Id</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="f179b959-03a4-46f9-8bf5-f6c754a61ac9" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/nas" path="/nas" id="ad76b156-53ce-4f14-b3ab-b70ca1f1ff26"><con:settings/><con:parameters/><con:method name="GET" id="2face827-31b4-4935-8dc1-13a3ce82e088" method="GET"><con:description>
Returns a list of NAS</con:description><con:settings/><con:parameters><con:parameter><con:name>limit</con:name><con:value>${#TestCase#limit}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#limit}</con:default><con:description>limit - The maximum number of records to retrieved per page</con:description></con:parameter><con:parameter><con:name>page</con:name><con:value>${#TestCase#pageNo}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#pageNo}</con:default><con:description>The page number of results to be retrieved</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="e6a8b737-910a-4c40-9d71-9b5ec696b4da" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="limit" value="${#TestCase#pageLimit}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:request></con:method><con:method name="POST" id="495d8eea-42ff-431b-8daf-364cdc3430a1" method="POST"><con:description>
Create a NAS</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:nas="http://radius-dev-v3.uk.cxn-network.net/api/nas">nas:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:nas="http://radius-dev-v3.uk.cxn-network.net/api/nas">nas:Fault</con:element></con:representation><con:request name="Request 1" id="44a54c39-6273-4ca0-83f1-bcce52720d98" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createNasRequest}</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="/nas/{id}" path="/nas/{id}" id="db4bbb10-1ee1-471f-8d6c-e5185060e48f"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#nasId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#nasId}</con:default></con:parameter></con:parameters><con:method name="GET" id="9b829258-cc36-491a-b728-a891c4f46c80" method="GET"><con:description>
Returns a NAS by Id</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:nas="http://radius-dev-v3.uk.cxn-network.net/api/nas/">nas:Response</con:element></con:representation><con:request name="Request 1" id="e9d836fb-a7ec-4e11-9ec5-ef5e1b5fece1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/nas/</con:originalUri><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="PUT" id="b0f4a096-e4cc-4639-9073-dbcc14088cc7" method="PUT"><con:description>
Update a Nas</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="2a0a5ef3-0f9e-4a6a-93e9-3f1d0965b1f0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateNasRequest}
</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="DELETE" id="3e686258-244a-4fea-97fb-75db5fd4bd38" method="DELETE"><con:description>
Delete a Nas</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:request name="Request 1" id="758eb974-69e8-434b-b976-ecb60c26d6e5" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/radius_attributes" path="/radius_attributes" id="ae2026af-62f5-4620-a450-ee8d037ff326"><con:settings/><con:parameters/><con:method name="GET" id="071caf53-cc05-4780-9ca3-5c6e62e87c36" method="GET"><con:description>
Returns a list of RADIUS Attributes</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>user</con:name><con:value>${#TestCase#userId}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#userId}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>page</con:name><con:value>${#TestCase#pageNo}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#pageNo}</con:default><con:description>The page number of results to be retrieved</con:description></con:parameter><con:parameter><con:name>limit</con:name><con:value>${#TestCase#limit}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#limit}</con:default><con:description>limit - The maximum number of records to retrieved per page</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:rad="http://radius-dev-v3.uk.cxn-network.net/api/radius_attributes">rad:Response</con:element></con:representation><con:request name="Request 1" id="e370e565-f1ac-4659-9a69-1e17545f587d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/radius_attributes</con:originalUri><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="page" value="${#TestCase#pageNo}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>user</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:request></con:method><con:method name="POST" id="819558bf-edac-46fc-b95f-ac3f605f173c" method="POST"><con:description>
Create a RADIUS Attribute</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:rad="http://radius-dev-v3.uk.cxn-network.net/api/radius_attributes">rad:Fault</con:element></con:representation><con:request name="Request 1" id="6bc825c2-d1bf-4587-8cf5-903d3c7a6d6f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createRadiusAttributeRequest}
</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="/radius_attributes/{id}" path="/radius_attributes/{id}" id="eee96e91-1686-4ae0-a56b-98f3c6572907"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#attributeId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#attributeId}</con:default></con:parameter></con:parameters><con:method name="GET" id="6c786244-4a0f-4c1c-bb49-c2b4ee4dd5ef" method="GET"><con:description>
Returns a RADIUS Attribute by Id</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:rad="http://radius-dev-v3.uk.cxn-network.net/api/radius_attributes/">rad:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="298dd407-ddd0-40ea-9b48-8280a4e939ce" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/radius_attributes/</con:originalUri><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="PUT" id="81ee2df5-2a49-4b1d-a8c0-63145fba83b5" method="PUT"><con:description>
Update a RadiusAttribute</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="ebda78b6-a6fb-435d-84d9-e15c1614ff83" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateRadiusAttributeRequest}</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="DELETE" id="2523fa45-3430-4b8d-8d21-bc7f52ac7c4d" method="DELETE"><con:description>
Delete a RadiusAttribute</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:request name="Request 1" id="cd189576-251f-4c07-9417-fcb3a93488c6" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/resellers" path="/resellers" id="db3efa53-e7f0-49bf-ad56-79e3e74d709f"><con:settings/><con:parameters/><con:method name="GET" id="93c2fb46-dc15-4d92-99e0-8c102984a507" method="GET"><con:description>
Returns a list of Resellers</con:description><con:settings/><con:parameters><con:parameter><con:name>name</con:name><con:value>${#TestCase#name}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#name}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>page</con:name><con:value>${#TestCase#page}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#page}</con:default><con:description>The page number of results to be retrieved</con:description></con:parameter><con:parameter><con:name>limit</con:name><con:value>${#TestCase#limt}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#limt}</con:default><con:description>limit - The maximum number of records to retrieved per page</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:res="http://radius-dev-v3.uk.cxn-network.net/api/resellers">res:Response</con:element></con:representation><con:request name="Request 1" id="fbb19c93-1593-4a96-8e84-9da9beb535c2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#pageLimit}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
</con:parameters><con:parameterOrder><con:entry>name</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:request></con:method><con:method name="POST" id="697e9580-488b-443c-988d-f7f618936b48" method="POST"><con:description>
Create a Reseller</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:res="http://radius-dev-v3.uk.cxn-network.net/api/resellers">res:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="0f06c933-b1d2-480b-80ed-85de7ab535da" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createResellerRequest}

</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="/resellers/{id}" path="/resellers/{id}" id="dadaa269-c11f-4a43-a155-d7a149dfcee7"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#resellerId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#resellerId}</con:default></con:parameter></con:parameters><con:method name="GET" id="430bd7f7-d746-4100-8e7f-0c78dbabba74" method="GET"><con:description>
Returns a Reseller by Id</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="e6d17c5f-b336-4a47-ad6d-2c4076e70ad9" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="PUT" id="8c53a8fa-41f5-4ba7-8fed-7a92faba8a94" method="PUT"><con:description>
Update a Reseller</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="3a8e5b7e-6358-491d-83da-ffb881b7a916" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateResellerRequest}</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="DELETE" id="22762b5e-dae6-4d73-ab7d-bcacdc2683e6" method="DELETE"><con:description>
Delete a Reseller</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:request name="Request 1" id="16488e2e-d57c-43d6-8ff3-98d618c342bd" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/static_ip_ranges" path="/static_ip_ranges" id="e1580972-9f7f-4632-9812-ff85e5d09480"><con:settings/><con:parameters/><con:method name="GET" id="6cdfd318-16f8-497f-8619-94c389236660" method="GET"><con:description>
Returns a list of Static IP Ranges</con:description><con:settings/><con:parameters><con:parameter><con:name>reseller</con:name><con:value>${#TestCase#resellerId}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#resellerId}</con:default><con:description>The Reseller Id to return Static IP Ranges for</con:description></con:parameter><con:parameter><con:name>page</con:name><con:value>${#TestCase#pageNo}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#pageNo}</con:default><con:description>The page number of results to be retrieved</con:description></con:parameter><con:parameter><con:name>limit</con:name><con:value>${#TestCase#limit}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#limit}</con:default><con:description>limit - The maximum number of records to retrieved per page</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:stat="http://radius-dev-v3.uk.cxn-network.net/api/static_ip_ranges">stat:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="b12a7dc1-50f5-4583-a36b-087e0a280a51" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/static_ip_ranges</con:originalUri><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="reseller" value="${#TestCase#resellerId}"/>
  <con:entry key="limit" value="${#TestCase#pageLimit}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
</con:parameters><con:parameterOrder><con:entry>reseller</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:request></con:method><con:method name="POST" id="0083bf86-70d0-4e64-8651-14d59b6a854d" method="POST"><con:description>
Create a Static IP Range</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:stat="http://radius-dev-v3.uk.cxn-network.net/api/static_ip_ranges">stat:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="232dcb85-f3f8-42c3-a04c-4bbc32a318d9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createStaticIpRangeRequest}</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="/static_ip_ranges/{id}" path="/static_ip_ranges/{id}" id="1e13a5c8-5d98-4dd3-99bc-55be79d2b624"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#id}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#id}</con:default></con:parameter></con:parameters><con:method name="GET" id="627adacb-9f77-4e94-8a89-e80df9c79402" method="GET"><con:description>
Returns a Static IP Range by Id</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:stat="http://radius-dev-v3.uk.cxn-network.net/api/static_ip_ranges/">stat:Response</con:element></con:representation><con:request name="Request 1" id="9508eb4d-f1fa-468c-a92a-05f0d58a1e3c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#rangeId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="PUT" id="6bf58dcd-80fc-4e65-a424-6ad7a24ac8ad" method="PUT"><con:description>
Update a Static IP Range</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="a34f2389-9d21-4a74-8022-0b957e39aa97" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateStaticIpRangeRequest}</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="DELETE" id="4da77ab6-81f8-4a76-a946-2e32ed59d2a6" method="DELETE"><con:description>
Delete a Static IP Range</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:stat="http://radius-dev-v3.uk.cxn-network.net/api/static_ip_ranges/">stat:Fault</con:element></con:representation><con:request name="Request 1" id="26443137-da52-416f-b44f-46b53fe22f2b" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#userId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/statuses" path="/statuses" id="122b6f7e-edaf-4bcf-893d-019186048e42"><con:settings/><con:parameters/><con:method name="GET" id="9cc9d256-54b9-43c7-8123-f0fde995da65" method="GET"><con:description>
Returns a list of Statuses</con:description><con:settings/><con:parameters><con:parameter><con:name>reseller</con:name><con:value>${#TestCase#reseller}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#reseller}</con:default><con:description>The Reseller Id to return Statuses for</con:description></con:parameter><con:parameter><con:name>page</con:name><con:value>${#TestCase#page}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#page}</con:default><con:description>The page number of results to be retrieved</con:description></con:parameter><con:parameter><con:name>limit</con:name><con:value>${#TestCase#limit}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#limit}</con:default><con:description>limit - The maximum number of records to retrieved per page</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:stat="http://radius-dev-v3.uk.cxn-network.net/api/statuses">stat:Response</con:element></con:representation><con:request name="Request 1" id="28bfc404-6871-4216-955f-1d8adcd8662d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="reseller" value="${#TestCase#resellerId}"/>
  <con:entry key="limit" value="${#TestCase#pageLimit}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
</con:parameters><con:parameterOrder><con:entry>reseller</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:request></con:method><con:method name="POST" id="ffac99a0-3476-4b14-ac3c-a4610831a908" method="POST"><con:description>
Create a Status</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="c6059817-0e9f-42a2-9107-a87ed8e3d2d7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="/statuses/{id}" path="/statuses/{id}" id="fd8f6b05-a727-4e0c-a6ae-fc208f56531e"><con:settings/><con:parameters><con:parameter required="true"><con:name>id</con:name><con:value>${#TestCase#statusId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#statusId}</con:default></con:parameter></con:parameters><con:method name="GET" id="abbbd1d1-b1e9-4d5b-b41c-fb3d6d0158d5" method="GET"><con:description>
Returns a Status by Id</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:stat="http://radius-dev-v3.uk.cxn-network.net/api/statuses/">stat:Response</con:element></con:representation><con:request name="Request 1" id="a246be8e-9bfa-49fe-b88f-e7a4e429f76a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/statuses/</con:originalUri><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="PUT" id="3d4ed67a-73ca-4ea2-82b8-4c5eabb12b1d" method="PUT"><con:description>
Update a Status</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="6d94db8a-90f6-4dd3-a7f1-796b05dd7264" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateStatusRequest}</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="DELETE" id="548aa23d-50ea-4823-8d0e-61bf440d9708" method="DELETE"><con:description>
Delete a Status</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:stat="http://radius-dev-v3.uk.cxn-network.net/api/statuses/">stat:Fault</con:element></con:representation><con:request name="Request 1" id="aef64a1a-a97d-4f97-aba6-616f9a621e77" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#userId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/transient_packages" path="/transient_packages" id="5d5ffc4f-7296-4bbe-8597-8754bae32e04"><con:settings/><con:parameters/><con:method name="GET" id="70c6a777-6103-4d7d-a46d-bf13854a857a" method="GET"><con:description>
Returns a list of Transient Packages</con:description><con:settings/><con:parameters><con:parameter><con:name>user</con:name><con:value>${#TestCase#resellerId}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#resellerId}</con:default><con:description>The User Id to return Transient Packages for</con:description></con:parameter><con:parameter><con:name>page</con:name><con:value>${#TestCase#pageNo}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#pageNo}</con:default><con:description>The page number of results to be retrieved</con:description></con:parameter><con:parameter><con:name>limit</con:name><con:value>${#TestCase#pageLimit}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#pageLimit}</con:default><con:description>limit - The maximum number of records to retrieved per page</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tran="http://radius-dev-v3.uk.cxn-network.net/api/transient_packages">tran:Response</con:element></con:representation><con:request name="Request 1" id="7199ac70-7675-4984-abb7-4262bb836201" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>user</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:request></con:method><con:method name="POST" id="531f39d0-42fe-4a15-8b19-5d2676347b9c" method="POST"><con:description>
Create a Transient Package</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tran="http://radius-dev-v3.uk.cxn-network.net/api/transient_packages">tran:Response</con:element></con:representation><con:request name="Request 1" id="49e3212c-4b4d-4508-9e8a-a56d642c0037" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createPackageRequest}
</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/transient_packages/{id}" path="/transient_packages/" id="c8d19b30-7167-4e36-9731-68b131022611"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#packageId}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#packageId}</con:default></con:parameter></con:parameters><con:method name="GET" id="ac4fef8a-ffd3-4f67-8558-527b879062fd" method="GET"><con:description>
Returns a Transient Package by Id</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:tran="http://radius-dev-v3.uk.cxn-network.net/api/transient_packages/">tran:Response</con:element></con:representation><con:request name="Request 1" id="26c2d2c9-9b9d-41c5-8174-687b3a0c6e10" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#packageId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="PUT" id="d685c20e-be64-4941-ae43-0f5c1b39a567" method="PUT"><con:description>
Update a Transient Package</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="53772f55-4ac8-4adb-b517-3b1a7349231d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updatePackageRequest}</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="DELETE" id="6a9fcbe2-312c-4a86-98a5-ad4d21016ba7" method="DELETE"><con:description>
Delete a Transient Package</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:request name="Request 1" id="aa284bd8-770c-48d5-9d0b-cf717e896526" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#userId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/users" path="/users" id="c5644f63-ae30-4c5f-81ff-0218a10364e7"><con:settings/><con:parameters/><con:method name="GET" id="2a8298d5-39ae-411a-9e59-eba58a3ed6a6" method="GET"><con:description>
Returns a list of Users</con:description><con:settings/><con:parameters><con:parameter><con:name>reseller</con:name><con:value>${#TestCase#reseller}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#reseller}</con:default><con:description>The Reseller Id to return Users for</con:description></con:parameter><con:parameter><con:name>username</con:name><con:value>${#TestCase#username}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#username}</con:default><con:description>A List of RADIUS Usernames to return Users for</con:description></con:parameter><con:parameter><con:name>page</con:name><con:value>${#TestCase#page}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#page}</con:default><con:description>The page number of results to be retrieved</con:description></con:parameter><con:parameter><con:name>limit</con:name><con:value>${#TestCase#limit}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#limit}</con:default><con:description>limit - The maximum number of records to retrieved per page</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:user="http://radius-dev-v3.uk.cxn-network.net/api/users">user:Response</con:element></con:representation><con:request name="Request 1" id="fff12691-fdf1-48c0-9035-2ef8f2a375d9" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#pageLimit}"/>
  <con:entry key="reseller" value="${#TestCase#resellerId}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
  <con:entry key="username" value="${#TestCase#username}"/>
</con:parameters><con:parameterOrder><con:entry>reseller</con:entry><con:entry>username</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:request></con:method><con:method name="POST" id="73895814-9817-400c-bd71-460586e61662" method="POST"><con:description>
Create a User</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:user="http://radius-dev-v3.uk.cxn-network.net/api/users">user:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="aceb84e2-0111-4372-893b-26e6e5c272b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createUserRequest}</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/users/generate_username" path="/users/generate_username" id="d67b7562-3c47-42dc-9ece-f771aaf262d7"><con:settings/><con:parameters/><con:method name="GET" id="00edd4f5-7a80-465d-95cd-4601cb090b78" method="GET"><con:description>
Generate an unused RADIUS Username that can be used to create a new User</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="e427e7db-4623-471d-8ed9-ebcdfc44c4c2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/users/{id}" path="/users/{id}" id="4f71f818-1ca5-4f99-816d-3d311d45763a"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#userId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#userId}</con:default></con:parameter></con:parameters><con:method name="GET" id="34f07ce0-af4a-4acd-947f-1d710061fb6f" method="GET"><con:description>
Returns a User by Id</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="274c4c77-2122-4fd3-9f84-797ac8e1ec9a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#userId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="PUT" id="4d5195d8-8fdf-43e4-a722-f78274fc70a4" method="PUT"><con:description>
Update a User</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="94d32a52-0919-4b9f-a682-1a4321d11f8f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateUserRequest}
</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="DELETE" id="5275a327-07d9-40d5-b2e3-09a60392776c" method="DELETE"><con:description>
Delete a User</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:user="http://radius-dev-v3.uk.cxn-network.net/api/users/">user:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="e9d1c3bb-103a-4594-a8f7-13beab882ff2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#userId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/users/{id}/change_password" path="/users/{id}/change_password" id="60e0591c-b0b6-4401-be9b-6b57259f42a4"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#id}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#id}</con:default></con:parameter></con:parameters><con:method name="POST" id="c44a3205-03c9-4ea7-affb-08eac80db039" method="POST"><con:description>
Generate and Apply a new Password to a User</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="7a648d09-5c23-4d66-9487-5b707d7253c0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateUserPasswordRequest}</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#userId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/users/{id}/disconnect" path="/users/{id}/disconnect" id="e6a7ce4b-722f-4486-b63e-24ef6ef11d6e"><con:settings/><con:parameters/><con:method name="POST" id="0e15b544-b0e8-4daa-b39b-9627c729fb9c" method="POST"><con:description>
Disconnect all the User's current Active Sessions</con:description><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#userId}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#userId}</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="9d31bbfe-a14d-416c-9fbd-7f85aa236bfa" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#disconnectUserRequest}</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/users/{id}/static_ip" path="/users/{id}/static_ip" id="742d499e-0086-48cf-9188-cbc44ee602d7"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#UserId}</con:value><con:style>TEMPLATE</con:style><con:default>${#TestCase#UserId}</con:default></con:parameter></con:parameters><con:method name="POST" id="89826f9c-3b37-4410-894a-cdb8a27d4348" method="POST"><con:description>
Assign a Static IP to a User</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="5967027a-fbc1-4c74-bc26-7cb8ed463a38" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createStaticIpRequest}</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#UserId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="DELETE" id="2ea2b902-1bee-4876-96b9-c7f5da942ecc" method="DELETE"><con:description>
Remove a Static IP from a User</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="620c6b65-42a8-49a4-99c1-009c0c7d57cc" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#UserId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/webhook_endpoints" path="/webhook_endpoints" id="205e13e9-1ee3-4f56-a486-1e8484b8c968"><con:settings/><con:parameters/><con:method name="GET" id="c85dd8e2-fe57-4ea1-88c0-7796b7df0874" method="GET"><con:description>
Returns a list of Webhook Endpoints</con:description><con:settings/><con:parameters><con:parameter><con:name>reseller</con:name><con:value>${#TestCase#reseller}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#reseller}</con:default><con:description>The Reseller Id to return Users for</con:description></con:parameter><con:parameter><con:name>page</con:name><con:value>${#TestCase#page}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#page}</con:default><con:description>The page number of results to be retrieved</con:description></con:parameter><con:parameter><con:name>limit</con:name><con:value>${#TestCase#limit}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#limit}</con:default><con:description>limit - The maximum number of records to retrieved per page</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:web="http://radius-dev-v3.uk.cxn-network.net/api/webhook_endpoints">web:Response</con:element></con:representation><con:request name="Request 1" id="a9b932e5-7592-4952-a3ed-d456895c8b1d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#pageLimit}"/>
  <con:entry key="reseller" value="${#TestCase#resellerId}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
</con:parameters><con:parameterOrder><con:entry>reseller</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:request></con:method><con:method name="POST" id="1256aba7-7ea6-4001-82ef-f683020246fa" method="POST"><con:description>
Create a Webhook Endpoint</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="5129bef7-66ed-4d38-b3f4-17d00ec7c4e3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createWebhookEndpintRequest}</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/webhook_endpoints/{id}" path="/webhook_endpoints/" id="eea6e2a1-a206-49ba-8dd6-04831fead146"><con:settings/><con:parameters/><con:method name="GET" id="80ba1bb1-58ae-4455-9baa-3d0ad75d007e" method="GET"><con:description>
Returns a Webhook Endpoint by Id</con:description><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#webhookId}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#webhookId}</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="a780a4d4-7cbe-4820-97a7-ac7fea600ea4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method><con:method name="PUT" id="3bc6d36f-10ab-4e23-8bbf-b5a1a97bee57" method="PUT"><con:description>
Update a Webhook Endpoint</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="e364b297-8cbd-4a62-afc1-2e504e9ecca5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updagteWebhookEndpintRequest}</con:request><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="/webhooks" path="/webhooks" id="5e9612d3-356b-4ada-9223-73adb987ee59"><con:settings/><con:parameters/><con:method name="GET" id="1b92ba07-0979-4c1b-9870-4ae5bef55771" method="GET"><con:description>
Returns a list of Webhooks</con:description><con:settings/><con:parameters><con:parameter><con:name>webhook_endpoint</con:name><con:value>${#TestCase#endpointId}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#endpointId}</con:default><con:description>The Webhook Endpoint Id to return Users for</con:description></con:parameter><con:parameter><con:name>page</con:name><con:value>${#TestCase#page}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#page}</con:default><con:description>The page number of results to be retrieved</con:description></con:parameter><con:parameter><con:name>limit</con:name><con:value>${#TestCase#limit}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:integer</con:type><con:default>${#TestCase#limit}</con:default><con:description>limit - The maximum number of records to retrieved per page</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:web="http://radius-dev-v3.uk.cxn-network.net/api/webhooks">web:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:web="http://radius-dev-v3.uk.cxn-network.net/api/webhooks">web:Response</con:element></con:representation><con:request name="Request 1" id="e281ab67-43e4-4544-b405-ca81ebb5ddaa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/webhooks</con:originalUri><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#pageLimit}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
</con:parameters><con:parameterOrder><con:entry>webhook_endpoint</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/webhooks/{id}" path="/webhooks/" id="8ad9a9fa-1076-44ca-9796-bb2974249e10"><con:settings/><con:parameters/><con:method name="GET" id="24901a56-19fb-4d89-a789-287403ca1e85" method="GET"><con:description>
Returns a Webhook by Id</con:description><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>${#TestCase#webhookId}</con:value><con:style>QUERY</con:style><con:default>${#TestCase#webhookId}</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="6950159c-ed75-46cf-a1bc-4ae2179186c6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="c227365e-a2f8-43dc-981d-511a8f6bdf37" name="Radius3 API TestSuite"><con:description>TestSuite generated for REST Service [Radius3 API]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="82606826-b415-4bd5-bf66-f0bbd7bafc4a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve list of accounting entries" searchProperties="true"><con:description>TestCase generated for REST Resource [/accounting_entries] located at [/accounting_entries]</con:description><con:settings/><con:testStep type="restrequest" name="When /accounting_entries are Retrieved" id="3f0c50d9-140b-4781-9d4b-d7b50cdc4b22"><con:settings/><con:config service="Radius3 API" resourcePath="/accounting_entries" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /accounting_entries are Retrieved" id="4d349f18-29d1-435f-ac23-37fe4da76bee" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="AutoInferSchemas">false</con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/accounting_entries</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cc09444f-f82d-49da-9108-d9909f5dfdf2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="5c96fa91-bd7a-4595-b729-638ceda8a0ff" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#limit}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
  <con:entry key="user" value="${#TestCase#userId}"/>
  <con:entry key="username" value="${#TestCase#username}"/>
</con:parameters><con:parameterOrder><con:entry>user</con:entry><con:entry>username</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="ec0acf61-c350-4411-a041-3b073cc2933a"><con:settings/><con:config><script>import groovy.json.JsonSlurper
import com.eviware.soapui.support.JsonUtil

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)
def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
assert JsonUtil.isValidJson(responseContent), 'Response is not a valid json'
testCase.setPropertyValue('accountingEntriesResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 25
assert jsonResponse.AccountingEntries != null

for(def accountingEntry : jsonResponse.AccountingEntries) {
	try {
		assert accountingEntry.radacctid != null
		assert accountingEntry.acctsessionid != null
		assert accountingEntry.acctuniqueid != null
		assert accountingEntry.username != null
		assert accountingEntry.nasipaddress != null
		assert accountingEntry.nasporttype != null
		assert accountingEntry.acctstarttime != null
		assert accountingEntry.acctupdatetime != null
//		assert accountingEntry.acctstoptime != null
		assert accountingEntry.acctinputoctets != null
		assert accountingEntry.acctoutputoctets != null
		assert accountingEntry.calledstationid != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>accountingEntriesResponse</con:name><con:value>{
    "AccountingEntries": [
        {
            "radacctid": "36",
            "acctsessionid": "81200d4e",
            "acctuniqueid": "36d88b8586ba1fe220204bb5ddb5cf58",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "1.1.1.1",
            "nasportid": "",
            "nasporttype": "other",
            "acctstarttime": "2019-04-16T16:15:00Z",
            "acctupdatetime": "2019-04-16T16:15:00Z",
            "acctstoptime": null,
            "acctinterval": null,
            "acctsessiontime": null,
            "acctauthentic": null,
            "connectinfo_start": null,
            "connectinfo_stop": null,
            "acctinputoctets": "92233722589",
            "acctoutputoctets": "8589934369",
            "calledstationid": "callingid",
            "callingstationid": "",
            "acctterminatecause": "",
            "servicetype": null,
            "framedprotocol": null,
            "framedipaddress": ""
        },
        {
            "radacctid": "37",
            "acctsessionid": "00000FA6",
            "acctuniqueid": "f2267386067043d1e4a9180755b5d955",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "other",
            "acctstarttime": "2019-04-09T00:00:00Z",
            "acctupdatetime": "2019-04-09T10:01:00Z",
            "acctstoptime": "2019-04-09T10:01:00Z",
            "acctinterval": "62",
            "acctsessiontime": "570",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "15734",
            "acctoutputoctets": "58",
            "calledstationid": "calledid",
            "callingstationid": "callingid",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.29"
        },
        {
            "radacctid": "265",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DCE",
            "acctuniqueid": "d58dd570f90bd59a494828521d485540",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:37:00Z",
            "acctupdatetime": "2019-04-04T11:51:45Z",
            "acctstoptime": "2019-04-04T11:52:01Z",
            "acctinterval": "63",
            "acctsessiontime": "901",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "41135674",
            "acctoutputoctets": "95046769",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.40"
        },
        {
            "radacctid": "264",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DCD",
            "acctuniqueid": "19941ba071157ce1a8173a3f5c968412",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:18:27Z",
            "acctupdatetime": "2019-04-04T11:22:36Z",
            "acctstoptime": "2019-04-04T11:23:01Z",
            "acctinterval": "63",
            "acctsessiontime": "274",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "52856",
            "acctoutputoctets": "154420",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.39"
        },
        {
            "radacctid": "263",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DCB",
            "acctuniqueid": "459f46fb0fc9934df4fef677cfbd8cce",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:14:10Z",
            "acctupdatetime": "2019-04-04T11:14:10Z",
            "acctstoptime": "2019-04-04T11:15:04Z",
            "acctinterval": null,
            "acctsessiontime": "54",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "41677243",
            "acctoutputoctets": "181561527",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        },
        {
            "radacctid": "262",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DC9",
            "acctuniqueid": "16f8063eaa1615e255abc73f4e7b382b",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:06:09Z",
            "acctupdatetime": "2019-04-04T11:10:21Z",
            "acctstoptime": "2019-04-04T11:11:01Z",
            "acctinterval": "61",
            "acctsessiontime": "292",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "439233",
            "acctoutputoctets": "17760564",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.37"
        },
        {
            "radacctid": "261",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DC7",
            "acctuniqueid": "f93788fb87f180dcb750e9aa50e35b7c",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:04:19Z",
            "acctupdatetime": "2019-04-04T11:04:19Z",
            "acctstoptime": "2019-04-04T11:04:56Z",
            "acctinterval": null,
            "acctsessiontime": "37",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "49909",
            "acctoutputoctets": "474839",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        },
        {
            "radacctid": "260",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DC6",
            "acctuniqueid": "ef0289f99401d726d542724566ba266e",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:01:08Z",
            "acctupdatetime": "2019-04-04T11:04:13Z",
            "acctstoptime": "2019-04-04T11:04:17Z",
            "acctinterval": "60",
            "acctsessiontime": "189",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "166359419",
            "acctoutputoctets": "43897578",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.34"
        },
        {
            "radacctid": "259",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DC5",
            "acctuniqueid": "a45c462fd3a452d13d5d428f1e075dbf",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T10:58:51Z",
            "acctupdatetime": "2019-04-04T10:59:55Z",
            "acctstoptime": "2019-04-04T11:00:02Z",
            "acctinterval": "64",
            "acctsessiontime": "71",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "279904",
            "acctoutputoctets": "898097",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.33"
        },
        {
            "radacctid": "258",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DC4",
            "acctuniqueid": "0497cd0a3b2a8d09bc37691abe2d56bf",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T10:52:44Z",
            "acctupdatetime": "2019-04-04T10:56:56Z",
            "acctstoptime": "2019-04-04T10:58:01Z",
            "acctinterval": "60",
            "acctsessiontime": "317",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "4450005",
            "acctoutputoctets": "112947433",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.32"
        },
        {
            "radacctid": "257",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DB7",
            "acctuniqueid": "95693d32540a089bab753a75fadf7cc7",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T10:09:03Z",
            "acctupdatetime": "2019-04-04T10:10:06Z",
            "acctstoptime": "2019-04-04T10:10:55Z",
            "acctinterval": "63",
            "acctsessiontime": "112",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "159205060",
            "acctoutputoctets": "250894990",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.31"
        },
        {
            "radacctid": "266",
            "acctsessionid": "fga768asg",
            "acctuniqueid": "fva8tsad8ftasdy7as8asrf6abs67ft",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "2.2.2.2",
            "nasportid": null,
            "nasporttype": "other",
            "acctstarttime": "2019-03-30T00:01:00Z",
            "acctupdatetime": "2019-03-30T00:01:00Z",
            "acctstoptime": "2019-03-30T00:01:00Z",
            "acctinterval": null,
            "acctsessiontime": null,
            "acctauthentic": null,
            "connectinfo_start": null,
            "connectinfo_stop": null,
            "acctinputoctets": "9223372258",
            "acctoutputoctets": "85899343698",
            "calledstationid": "test",
            "callingstationid": "",
            "acctterminatecause": "",
            "servicetype": null,
            "framedprotocol": null,
            "framedipaddress": ""
        },
        {
            "radacctid": "256",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D5A",
            "acctuniqueid": "def8b16e6c2ce7b7dbbe20cc73434a6a",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T11:43:22Z",
            "acctupdatetime": "2019-03-21T11:51:37Z",
            "acctstoptime": "2019-03-21T11:51:57Z",
            "acctinterval": "61",
            "acctsessiontime": "515",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "210013",
            "acctoutputoctets": "1029548",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.29"
        },
        {
            "radacctid": "255",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D58",
            "acctuniqueid": "5aa5b89f337f5011e49facd72acd31be",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T11:08:39Z",
            "acctupdatetime": "2019-03-21T11:42:16Z",
            "acctstoptime": "2019-03-21T11:42:18Z",
            "acctinterval": "65",
            "acctsessiontime": "2019",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "41477607",
            "acctoutputoctets": "57333756",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.28"
        },
        {
            "radacctid": "254",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D55",
            "acctuniqueid": "720b80001363b9bda465b23c0679b765",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:57:52Z",
            "acctupdatetime": "2019-03-21T11:06:23Z",
            "acctstoptime": "2019-03-21T11:06:31Z",
            "acctinterval": "61",
            "acctsessiontime": "519",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "169432577",
            "acctoutputoctets": "183738110",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.27"
        },
        {
            "radacctid": "253",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D54",
            "acctuniqueid": "ba76e12288263fa74fcbbb4e43e76f32",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:56:27Z",
            "acctupdatetime": "2019-03-21T10:57:30Z",
            "acctstoptime": "2019-03-21T10:57:50Z",
            "acctinterval": "63",
            "acctsessiontime": "83",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "4418559",
            "acctoutputoctets": "246578641",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.26"
        },
        {
            "radacctid": "252",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D53",
            "acctuniqueid": "f37cc0ce30b4a8f6c0e6c9d257afcc63",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:52:11Z",
            "acctupdatetime": "2019-03-21T10:55:17Z",
            "acctstoptime": "2019-03-21T10:56:14Z",
            "acctinterval": "63",
            "acctsessiontime": "243",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "312804027",
            "acctoutputoctets": "226913625",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.25"
        },
        {
            "radacctid": "251",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D52",
            "acctuniqueid": "f000df33122578b7d4a8704413342ed9",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:48:20Z",
            "acctupdatetime": "2019-03-21T10:51:33Z",
            "acctstoptime": "2019-03-21T10:52:09Z",
            "acctinterval": "65",
            "acctsessiontime": "229",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "171385344",
            "acctoutputoctets": "444294600",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.24"
        },
        {
            "radacctid": "250",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D43",
            "acctuniqueid": "d1137616f07211474a277a096f4cbf72",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:17:19Z",
            "acctupdatetime": "2019-03-21T10:17:19Z",
            "acctstoptime": "2019-03-21T10:17:25Z",
            "acctinterval": null,
            "acctsessiontime": "6",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "134007",
            "acctoutputoctets": "752304",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        },
        {
            "radacctid": "249",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D42",
            "acctuniqueid": "c02fe9799f23f1ead15353577c7487b9",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:10:21Z",
            "acctupdatetime": "2019-03-21T10:16:34Z",
            "acctstoptime": "2019-03-21T10:17:16Z",
            "acctinterval": "62",
            "acctsessiontime": "415",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "4263373",
            "acctoutputoctets": "165123040",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.22"
        },
        {
            "radacctid": "248",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019C64",
            "acctuniqueid": "95e6ba175cf971d95706a2af6b162a8e",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-19T09:38:34Z",
            "acctupdatetime": "2019-03-19T09:38:34Z",
            "acctstoptime": "2019-03-19T09:39:02Z",
            "acctinterval": null,
            "acctsessiontime": "28",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "129900",
            "acctoutputoctets": "679347",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        },
        {
            "radacctid": "247",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019C63",
            "acctuniqueid": "5016a0b93a300cd096e3f3c35ec98f33",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-19T09:33:19Z",
            "acctupdatetime": "2019-03-19T09:38:30Z",
            "acctstoptime": "2019-03-19T09:38:31Z",
            "acctinterval": "63",
            "acctsessiontime": "312",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "443070",
            "acctoutputoctets": "1153031",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.17"
        },
        {
            "radacctid": "246",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019C5D",
            "acctuniqueid": "96c1b10a8acd89d2abb6179868f3e4e4",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-19T09:24:37Z",
            "acctupdatetime": "2019-03-19T09:24:37Z",
            "acctstoptime": "2019-03-19T09:25:01Z",
            "acctinterval": null,
            "acctsessiontime": "24",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "1426798",
            "acctoutputoctets": "53919917",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        },
        {
            "radacctid": "245",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019C55",
            "acctuniqueid": "c36e7b86bf4054d0f1b9965d7234b067",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-18T17:12:07Z",
            "acctupdatetime": "2019-03-18T17:31:37Z",
            "acctstoptime": "2019-03-18T17:32:13Z",
            "acctinterval": "64",
            "acctsessiontime": "1206",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "17103639",
            "acctoutputoctets": "940483608",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.15"
        },
        {
            "radacctid": "244",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019C09",
            "acctuniqueid": "9fd0d09ec2d48b37849bab0ed6aea0ec",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-18T16:56:57Z",
            "acctupdatetime": "2019-03-18T16:56:57Z",
            "acctstoptime": "2019-03-18T16:57:02Z",
            "acctinterval": null,
            "acctsessiontime": "5",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "0",
            "acctoutputoctets": "76",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        }
    ],
    "meta": {
        "page": 1,
        "limit": 25
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="e7880c7b-e57c-4b4d-b573-0377fcac0a73" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve list of admins" searchProperties="true"><con:description>TestCase generated for REST Resource [/admins] located at [/admins]</con:description><con:settings/><con:testStep type="restrequest" name="When /admins are Retrieved" id="567b0467-3367-42ef-83a8-0092414b9507"><con:settings/><con:config service="Radius3 API" resourcePath="/admins" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /admins are Retrieved" id="b1dc183e-6e64-48bc-86e8-bee4979b104b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/admins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e475f4d2-c102-46ee-8dda-8d84ff8ad886" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="a1b34805-5d16-4ee5-8ab4-4d58c739c802" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#limit}"/>
  <con:entry key="page" value="${#TestCase#page}"/>
</con:parameters><con:parameterOrder><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="8bdf0519-758d-442e-90be-bad892cea9b8"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('adminsResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.Admins != null

for(def entry : jsonResponse.Admins) {
	try {
		assert entry.id != null
		assert entry.username != null
		assert entry.super != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>adminsResponse</con:name><con:value>{
    "Admins": [
        {
            "id": 2,
            "username": "will",
            "super": true,
            "Resellers": []
        },
        {
            "id": 3,
            "username": "jim",
            "super": true,
            "Resellers": []
        },
        {
            "id": 5,
            "username": "martin",
            "super": true,
            "Resellers": []
        },
        {
            "id": 6,
            "username": "Test Admin d8d7f154-fc8b-4914-9372-06cb9149a8fc",
            "super": true,
            "Resellers": []
        },
        {
            "id": 7,
            "username": "Test Admin d8d7f154-fc8b-4914-9372-06cb9149a8fc",
            "super": true,
            "Resellers": []
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="af2044aa-a7a7-4a6d-8f03-cd7a5d07cf50" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve list of audits" searchProperties="true"><con:description>TestCase generated for REST Resource [/audits] located at [/audits]</con:description><con:settings/><con:testStep type="restrequest" name="When /audits are Retrieved" id="2829963a-6856-439f-909d-57096f2c07e4"><con:settings/><con:config service="Radius3 API" resourcePath="/audits" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /audits are Retrieved" id="bf0b483e-12f3-4075-9b01-c82dfaf712ea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/audits</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7792e226-2b87-4b8d-914f-aa8b6999b994" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="77f095b9-f290-4aef-9389-9a864549fee5" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#limit}"/>
  <con:entry key="page" value="${#TestCase#page}"/>
</con:parameters><con:parameterOrder><con:entry>model</con:entry><con:entry>entity_id</con:entry><con:entry>user</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="0fcd8d69-6b2d-4705-b476-8ed57257db36"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('auditsResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.Audits != null

for(def entry : jsonResponse.Audits) {
	try {
		assert entry.id != null
		assert entry.event != null
		assert entry.model != null
		assert entry.entity_id != null
		assert entry.request_id != null
		assert entry.json_object != null
		assert entry.description != null
		assert entry.source_id != null
		assert entry.created != null
		assert entry.AuditDeltas != null
		for(def delta in entry.AuditDeltas) {
			try {
				assert delta.id != null
				assert delta.audit_id != null
				assert delta.property_name != null
//				assert delta.old_value != null
//				assert delta.new_value != null
			} catch(AssertionError  assertion) {
				log.error assertion
			}
		}
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>auditsResponse</con:name><con:value>{
    "Audits": [
        {
            "id": "5cc2bee1-d33c-42fd-8813-1b52b03a6a9c",
            "event": "CREATE",
            "model": "Admin",
            "entity_id": 78,
            "request_id": "5cc2bee1-53e4-421b-985e-1b52b03a6a9c",
            "json_object": "{\"Admin\":{\"id\":\"78\",\"username\":\"Test Admin 62e0f3f7-8344-49a4-9158-b421fad72ef3\",\"password\":\"$2a$10$jpwjCGZTKn9bzstYNb0ttehHIn9jg1RMH5BeAX.f2VKh23KmJVLzC\",\"super\":true,\"deleted\":false,\"deleted_date\":null,\"Reseller\":\"\"}}",
            "description": "martin",
            "source_id": 5,
            "created": "2019-04-26T08:18:41Z",
            "AuditDeltas": [
                {
                    "id": "5cc2bee1-1304-4cfa-bd3b-1b52b03a6a9c",
                    "audit_id": "5cc2bee1-d33c-42fd-8813-1b52b03a6a9c",
                    "property_name": "deleted",
                    "old_value": "",
                    "new_value": ""
                },
                {
                    "id": "5cc2bee1-2a98-4af4-8697-1b52b03a6a9c",
                    "audit_id": "5cc2bee1-d33c-42fd-8813-1b52b03a6a9c",
                    "property_name": "username",
                    "old_value": "",
                    "new_value": "Test Admin 62e0f3f7-8344-49a4-9158-b421fad72ef3"
                },
                {
                    "id": "5cc2bee1-5bac-4f2c-a6e4-1b52b03a6a9c",
                    "audit_id": "5cc2bee1-d33c-42fd-8813-1b52b03a6a9c",
                    "property_name": "deleted_date",
                    "old_value": "",
                    "new_value": null
                },
                {
                    "id": "5cc2bee1-7728-4b94-9eb3-1b52b03a6a9c",
                    "audit_id": "5cc2bee1-d33c-42fd-8813-1b52b03a6a9c",
                    "property_name": "password",
                    "old_value": "",
                    "new_value": "$2a$10$jpwjCGZTKn9bzstYNb0ttehHIn9jg1RMH5BeAX.f2VKh23KmJVLzC"
                },
                {
                    "id": "5cc2bee1-a008-4e32-91a8-1b52b03a6a9c",
                    "audit_id": "5cc2bee1-d33c-42fd-8813-1b52b03a6a9c",
                    "property_name": "Reseller",
                    "old_value": "",
                    "new_value": ""
                },
                {
                    "id": "5cc2bee1-c674-428f-9aa6-1b52b03a6a9c",
                    "audit_id": "5cc2bee1-d33c-42fd-8813-1b52b03a6a9c",
                    "property_name": "super",
                    "old_value": "",
                    "new_value": 1
                },
                {
                    "id": "5cc2bee1-d05c-45b9-a28a-1b52b03a6a9c",
                    "audit_id": "5cc2bee1-d33c-42fd-8813-1b52b03a6a9c",
                    "property_name": "id",
                    "old_value": "",
                    "new_value": 78
                }
            ]
        },
        {
            "id": "5cc2bee0-5974-4848-a468-1b52b03a6a9c",
            "event": "CREATE",
            "model": "Admin",
            "entity_id": 77,
            "request_id": "5cc2bee0-e638-4026-874c-1b52b03a6a9c",
            "json_object": "{\"Admin\":{\"id\":\"77\",\"username\":\"Test Admin 7ffab2c9-f1dd-49b7-92ea-6c2732caeff7\",\"password\":\"$2a$10$zgvNiYiIDJxiSMmVdfgTL.B0cGNLURp0Nm0vJqNx\\\/esits10tvM\\\/a\",\"super\":true,\"deleted\":false,\"deleted_date\":null,\"Reseller\":\"\"}}",
            "description": "martin",
            "source_id": 5,
            "created": "2019-04-26T08:18:40Z",
            "AuditDeltas": [
                {
                    "id": "5cc2bee0-1a48-432a-a5c6-1b52b03a6a9c",
                    "audit_id": "5cc2bee0-5974-4848-a468-1b52b03a6a9c",
                    "property_name": "super",
                    "old_value": "",
                    "new_value": 1
                },
                {
                    "id": "5cc2bee0-36f0-4600-a67b-1b52b03a6a9c",
                    "audit_id": "5cc2bee0-5974-4848-a468-1b52b03a6a9c",
                    "property_name": "id",
                    "old_value": "",
                    "new_value": 77
                },
                {
                    "id": "5cc2bee0-5ddc-472a-b788-1b52b03a6a9c",
                    "audit_id": "5cc2bee0-5974-4848-a468-1b52b03a6a9c",
                    "property_name": "deleted",
                    "old_value": "",
                    "new_value": ""
                },
                {
                    "id": "5cc2bee0-8bb4-49eb-bab5-1b52b03a6a9c",
                    "audit_id": "5cc2bee0-5974-4848-a468-1b52b03a6a9c",
                    "property_name": "username",
                    "old_value": "",
                    "new_value": "Test Admin 7ffab2c9-f1dd-49b7-92ea-6c2732caeff7"
                },
                {
                    "id": "5cc2bee0-a684-48b9-a847-1b52b03a6a9c",
                    "audit_id": "5cc2bee0-5974-4848-a468-1b52b03a6a9c",
                    "property_name": "deleted_date",
                    "old_value": "",
                    "new_value": null
                },
                {
                    "id": "5cc2bee0-d4c0-4db2-9ade-1b52b03a6a9c",
                    "audit_id": "5cc2bee0-5974-4848-a468-1b52b03a6a9c",
                    "property_name": "password",
                    "old_value": "",
                    "new_value": "$2a$10$zgvNiYiIDJxiSMmVdfgTL.B0cGNLURp0Nm0vJqNx\/esits10tvM\/a"
                },
                {
                    "id": "5cc2bee0-ea7c-47f8-8b35-1b52b03a6a9c",
                    "audit_id": "5cc2bee0-5974-4848-a468-1b52b03a6a9c",
                    "property_name": "Reseller",
                    "old_value": "",
                    "new_value": ""
                }
            ]
        },
        {
            "id": "5cc2bedf-3cc0-44c7-9b1f-6a6db03a6a9c",
            "event": "CREATE",
            "model": "Reseller",
            "entity_id": 424,
            "request_id": "5cc2bedf-c8bc-4488-9e4c-6a6db03a6a9c",
            "json_object": "{\"Reseller\":{\"id\":\"424\",\"name\":\"Test Reseller-09:18:25.450\",\"deleted\":false,\"deleted_date\":null,\"Admin\":\"\"}}",
            "description": "martin",
            "source_id": 5,
            "created": "2019-04-26T08:18:39Z",
            "AuditDeltas": [
                {
                    "id": "5cc2bedf-0f28-47d9-bc11-6a6db03a6a9c",
                    "audit_id": "5cc2bedf-3cc0-44c7-9b1f-6a6db03a6a9c",
                    "property_name": "deleted_date",
                    "old_value": "",
                    "new_value": null
                },
                {
                    "id": "5cc2bedf-2914-4758-a466-6a6db03a6a9c",
                    "audit_id": "5cc2bedf-3cc0-44c7-9b1f-6a6db03a6a9c",
                    "property_name": "id",
                    "old_value": "",
                    "new_value": 424
                },
                {
                    "id": "5cc2bedf-54b0-4156-8765-6a6db03a6a9c",
                    "audit_id": "5cc2bedf-3cc0-44c7-9b1f-6a6db03a6a9c",
                    "property_name": "Admin",
                    "old_value": "",
                    "new_value": ""
                },
                {
                    "id": "5cc2bedf-7ea0-484c-8d27-6a6db03a6a9c",
                    "audit_id": "5cc2bedf-3cc0-44c7-9b1f-6a6db03a6a9c",
                    "property_name": "name",
                    "old_value": "",
                    "new_value": "Test Reseller-09:18:25.450"
                },
                {
                    "id": "5cc2bedf-c61c-4643-afc1-6a6db03a6a9c",
                    "audit_id": "5cc2bedf-3cc0-44c7-9b1f-6a6db03a6a9c",
                    "property_name": "deleted",
                    "old_value": "",
                    "new_value": ""
                }
            ]
        },
        {
            "id": "5cc2bedf-45ec-4793-8ce5-6a6db03a6a9c",
            "event": "CREATE",
            "model": "Nas",
            "entity_id": 38,
            "request_id": "5cc2bedf-b62c-466c-8a9d-6a6db03a6a9c",
            "json_object": "{\"Nas\":{\"id\":\"38\",\"nasname\":\"1.1.1.1\",\"shortname\":\"NAS-f16e08cb\",\"type\":\"other\",\"ports\":null,\"secret\":\"be74d353\",\"server\":null,\"community\":null,\"description\":\"RADIUS Client 09:18:25.219\"}}",
            "description": "martin",
            "source_id": 5,
            "created": "2019-04-26T08:18:39Z",
            "AuditDeltas": [
                {
                    "id": "5cc2bedf-3bf0-4244-bef9-6a6db03a6a9c",
                    "audit_id": "5cc2bedf-45ec-4793-8ce5-6a6db03a6a9c",
                    "property_name": "description",
                    "old_value": "",
                    "new_value": "RADIUS Client 09:18:25.219"
                },
                {
                    "id": "5cc2bedf-5c2c-468a-acac-6a6db03a6a9c",
                    "audit_id": "5cc2bedf-45ec-4793-8ce5-6a6db03a6a9c",
                    "property_name": "nasname",
                    "old_value": "",
                    "new_value": "1.1.1.1"
                },
                {
                    "id": "5cc2bedf-5d34-4e34-9d7c-6a6db03a6a9c",
                    "audit_id": "5cc2bedf-45ec-4793-8ce5-6a6db03a6a9c",
                    "property_name": "shortname",
                    "old_value": "",
                    "new_value": "NAS-f16e08cb"
                },
                {
                    "id": "5cc2bedf-80d4-49f4-bcca-6a6db03a6a9c",
                    "audit_id": "5cc2bedf-45ec-4793-8ce5-6a6db03a6a9c",
                    "property_name": "community",
                    "old_value": "",
                    "new_value": null
                },
                {
                    "id": "5cc2bedf-93c0-46f7-9869-6a6db03a6a9c",
                    "audit_id": "5cc2bedf-45ec-4793-8ce5-6a6db03a6a9c",
                    "property_name": "type",
                    "old_value": "",
                    "new_value": "other"
                },
                {
                    "id": "5cc2bedf-a6c0-4c0b-bc38-6a6db03a6a9c",
                    "audit_id": "5cc2bedf-45ec-4793-8ce5-6a6db03a6a9c",
                    "property_name": "ports",
                    "old_value": "",
                    "new_value": null
                },
                {
                    "id": "5cc2bedf-b19c-408f-b5fc-6a6db03a6a9c",
                    "audit_id": "5cc2bedf-45ec-4793-8ce5-6a6db03a6a9c",
                    "property_name": "id",
                    "old_value": "",
                    "new_value": 38
                },
                {
                    "id": "5cc2bedf-b254-4059-a3e0-6a6db03a6a9c",
                    "audit_id": "5cc2bedf-45ec-4793-8ce5-6a6db03a6a9c",
                    "property_name": "secret",
                    "old_value": "",
                    "new_value": "be74d353"
                },
                {
                    "id": "5cc2bedf-b294-4248-83d4-6a6db03a6a9c",
                    "audit_id": "5cc2bedf-45ec-4793-8ce5-6a6db03a6a9c",
                    "property_name": "server",
                    "old_value": "",
                    "new_value": null
                }
            ]
        },
        {
            "id": "5cc1c7e1-3990-4e82-bcf6-6a6db03a6a9c",
            "event": "CREATE",
            "model": "Admin",
            "entity_id": 75,
            "request_id": "5cc1c7e1-c208-46d8-b618-6a6db03a6a9c",
            "json_object": "{\"Admin\":{\"id\":\"75\",\"username\":\"Test Admin 7ffab2c9-f1dd-49b7-92ea-6c2732caeff7\",\"password\":\"$2a$10$WiEPs9zX6ojLW9RItXcZ5.k2fVhINzMxepoUnhwGqRG6MzyuVe8xa\",\"super\":true,\"deleted\":false,\"deleted_date\":null,\"Reseller\":\"\"}}",
            "description": "martin",
            "source_id": 5,
            "created": "2019-04-25T14:44:49Z",
            "AuditDeltas": [
                {
                    "id": "5cc1c7e1-048c-4a75-9d81-6a6db03a6a9c",
                    "audit_id": "5cc1c7e1-3990-4e82-bcf6-6a6db03a6a9c",
                    "property_name": "super",
                    "old_value": "",
                    "new_value": 1
                },
                {
                    "id": "5cc1c7e1-19c8-4979-a024-6a6db03a6a9c",
                    "audit_id": "5cc1c7e1-3990-4e82-bcf6-6a6db03a6a9c",
                    "property_name": "id",
                    "old_value": "",
                    "new_value": 75
                },
                {
                    "id": "5cc1c7e1-3558-4db3-9188-6a6db03a6a9c",
                    "audit_id": "5cc1c7e1-3990-4e82-bcf6-6a6db03a6a9c",
                    "property_name": "Reseller",
                    "old_value": "",
                    "new_value": ""
                },
                {
                    "id": "5cc1c7e1-4884-48a6-8aea-6a6db03a6a9c",
                    "audit_id": "5cc1c7e1-3990-4e82-bcf6-6a6db03a6a9c",
                    "property_name": "deleted",
                    "old_value": "",
                    "new_value": ""
                },
                {
                    "id": "5cc1c7e1-71ac-4d9a-b123-6a6db03a6a9c",
                    "audit_id": "5cc1c7e1-3990-4e82-bcf6-6a6db03a6a9c",
                    "property_name": "username",
                    "old_value": "",
                    "new_value": "Test Admin 7ffab2c9-f1dd-49b7-92ea-6c2732caeff7"
                },
                {
                    "id": "5cc1c7e1-bf04-4ac4-9540-6a6db03a6a9c",
                    "audit_id": "5cc1c7e1-3990-4e82-bcf6-6a6db03a6a9c",
                    "property_name": "password",
                    "old_value": "",
                    "new_value": "$2a$10$WiEPs9zX6ojLW9RItXcZ5.k2fVhINzMxepoUnhwGqRG6MzyuVe8xa"
                },
                {
                    "id": "5cc1c7e1-e2ec-4933-be3b-6a6db03a6a9c",
                    "audit_id": "5cc1c7e1-3990-4e82-bcf6-6a6db03a6a9c",
                    "property_name": "deleted_date",
                    "old_value": "",
                    "new_value": null
                }
            ]
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="9f113b84-7255-4be3-844e-c4532d374fa4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve list of event types" searchProperties="true"><con:description>TestCase generated for REST Resource [/event_types] located at [/event_types]</con:description><con:settings/><con:testStep type="restrequest" name="When /event_types are Retrieved" id="4fc04109-a056-440c-a875-ceff7ee67c94"><con:settings/><con:config service="Radius3 API" resourcePath="/event_types" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /event_types are Retrieved" id="363e5537-78a6-49f1-b886-f55e706b7a08" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/event_types</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4e137f71-852d-42dd-b975-72830bfda4b1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="2638ebd9-a488-4ea1-ab84-cbde57fddf51" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#limit}"/>
  <con:entry key="page" value="${#TestCase#page}"/>
</con:parameters><con:parameterOrder><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="aefe5fdf-0943-4c1f-a6de-09274ff3d57f"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('eventTypesResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.EventTypes != null

for(def entry : jsonResponse.EventTypes) {
	try {
		assert entry.id != null
		assert entry.name != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>eventTypesResponse</con:name><con:value>{
    "EventTypes": [
        {
            "id": 1,
            "name": "user.download_limit_75"
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="612e75b4-7a14-4a54-bf4d-847ecdf95297" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve list of events" searchProperties="true"><con:description>TestCase generated for REST Resource [/events] located at [/events]</con:description><con:settings/><con:testStep type="restrequest" name="When /events is Retrieved" id="dad1cbc0-8067-40e9-8066-bd3306ffd102"><con:settings/><con:config service="Radius3 API" resourcePath="/events" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /events is Retrieved" id="204471ff-91ef-40bb-92a2-2fecd34fffab" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/events</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0bae827a-8b3a-4644-a587-1a45ff4ed2dc" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="f4d30689-b45e-4976-b8f1-811e54ca1c2f" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#limit}"/>
  <con:entry key="page" value="${#TestCase#page}"/>
</con:parameters><con:parameterOrder><con:entry>user</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="4524fcc1-4fa2-4699-8e11-d657c8b016ca"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('eventsResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.Events != null

for(def event : jsonResponse.Events) {
	try {
		assert event.id != null
		assert event.datetime != null
		assert event.event_type_id  != null
		assert event.user_id  != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>eventsResponse</con:name><con:value>{
    "Events": [
        {
            "id": 5,
            "datetime": "1970-01-01T00:00:00Z",
            "event_type_id": 1,
            "user_id": 670
        },
        {
            "id": 6,
            "datetime": "1970-01-01T00:00:00Z",
            "event_type_id": 1,
            "user_id": 670
        },
        {
            "id": 7,
            "datetime": "1970-01-01T00:00:00Z",
            "event_type_id": 1,
            "user_id": 670
        },
        {
            "id": 8,
            "datetime": "1970-01-01T00:00:00Z",
            "event_type_id": 1,
            "user_id": 670
        },
        {
            "id": 9,
            "datetime": "1970-01-01T00:00:00Z",
            "event_type_id": 1,
            "user_id": 670
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="3e4f5bb0-8811-4e61-9603-a402bd4a9f7e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve list of nas" searchProperties="true"><con:description>TestCase generated for REST Resource [/nas] located at [/nas]</con:description><con:settings/><con:testStep type="restrequest" name="When /nas is Retrieved" id="6d946ace-0fbd-4211-acf0-af84c2aa554f"><con:settings/><con:config service="Radius3 API" resourcePath="/nas" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /nas is Retrieved" id="e6a8b737-910a-4c40-9d71-9b5ec696b4da" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/nas</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3ceeb453-0fcf-4f25-a5cf-417944ac65b1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="7557c493-72d2-400e-b5b9-3bb52ef912b3" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#limit}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
</con:parameters><con:parameterOrder><con:entry>limit</con:entry><con:entry>page</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="9644e651-1bc4-4edc-b439-6a8f77f583b1"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('nasResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.Nas != null

for(def entry : jsonResponse.Nas) {
	try {
		assert entry.id != null
		assert entry.nasname != null
		assert entry.shortname != null
		assert entry.type != null
		assert entry.secret != null
		assert entry.description != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}


</script></con:config></con:testStep><con:properties><con:property><con:name>nasResponse</con:name><con:value>{
    "Nas": [
        {
            "id": 3,
            "nasname": "185.6.154.1",
            "shortname": "pppoe1",
            "type": "other",
            "ports": null,
            "secret": "testing123",
            "server": null,
            "community": null,
            "description": "RADIUS Client"
        },
        {
            "id": 4,
            "nasname": "1.1.1.1",
            "shortname": "nas1",
            "type": "other",
            "ports": null,
            "secret": "testing123",
            "server": null,
            "community": null,
            "description": "RADIUS Client"
        },
        {
            "id": 5,
            "nasname": "1.1.1.1",
            "shortname": "nas1",
            "type": "other",
            "ports": null,
            "secret": "testing123",
            "server": null,
            "community": null,
            "description": "RADIUS Client"
        },
        {
            "id": 6,
            "nasname": "1.1.1.1",
            "shortname": "nas1",
            "type": "other",
            "ports": null,
            "secret": "testing123",
            "server": null,
            "community": null,
            "description": "RADIUS Client"
        },
        {
            "id": 7,
            "nasname": "1.1.1.1",
            "shortname": "NAS-b2e43b2e",
            "type": "other",
            "ports": null,
            "secret": "8f8c1ed0",
            "server": null,
            "community": null,
            "description": "RADIUS Client 11:05:49.390"
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="da30217b-7f07-4ebd-94cf-eb8ecdf80362" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve list of radius attributes" searchProperties="true"><con:description>TestCase generated for REST Resource [/radius_attributes] located at [/radius_attributes{id}]</con:description><con:settings/><con:testStep type="restrequest" name="When /radius_attributes are retrieved" id="bac86d76-5784-46fa-9b6d-2f89f3b099e6"><con:settings/><con:config service="Radius3 API" resourcePath="/radius_attributes" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /radius_attributes are retrieved" id="e370e565-f1ac-4659-9a69-1e17545f587d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/radius_attributes</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8b300667-9400-4c32-95c7-36b411060078" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="d8f9c15c-555e-4481-948d-60d846f5ee69" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="page" value="${#TestCase#pageNo}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>user</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="445cc39d-7a31-4615-9081-871435ea91cd"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('radiusAttributesResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.RadiusAttributes != null

// Expected Response format
//{	"RadiusAttributes":    [
//     	{
//		"id": 54,
//		"user_id": 670,
//		"type": "radreply",
//		"attribute": "Cisco-AVPair",
//		"op": "+=",
//		"value": "ip:qos-policy-in=add-class(sub, (class-default), police(20000000))"
//      } ...
//   ],
//   "meta":    {
//      "page": 1,
//      "limit": 5
//   }
//}

for(def entry : jsonResponse.RadiusAttributes) {
	try {
		assert entry.id != null
		assert entry.user_id != null
		assert entry.type != null
		assert entry.attribute != null
		assert entry.op != null
		assert entry.value != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>userId</con:name><con:value/></con:property><con:property><con:name>page</con:name><con:value/></con:property><con:property><con:name>limit</con:name><con:value/></con:property><con:property><con:name>radiusAttributesResponse</con:name><con:value>{
    "RadiusAttributes": [
        {
            "id": 54,
            "user_id": 670,
            "type": "radreply",
            "attribute": "Cisco-AVPair",
            "op": "+=",
            "value": "ip:qos-policy-in=add-class(sub, (class-default), police(20000000))"
        },
        {
            "id": 55,
            "user_id": 670,
            "type": "radreply",
            "attribute": "Cisco-AVPair",
            "op": "+=",
            "value": "ip:qos-policy-out=add-class(sub, (class-default), police(20000000))"
        },
        {
            "id": 56,
            "user_id": 670,
            "type": "radreply",
            "attribute": "Cisco-AVPair",
            "op": "+=",
            "value": "ip:l4redirect=redirect list 100 to ip 185.6.152.137 port 80"
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="546003e5-3656-46a2-9f85-6f0a1c4da1a6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve list of resellers" searchProperties="true"><con:description>TestCase generated for REST Resource [/resellers] located at [/resellers]</con:description><con:settings/><con:testStep type="restrequest" name="When /resellers is Retrieved" id="16f23fde-9279-44e6-9a30-e143cea4fc2f"><con:settings/><con:config service="Radius3 API" resourcePath="/resellers" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /resellers is Retrieved" id="fbb19c93-1593-4a96-8e84-9da9beb535c2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/resellers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3f0927cc-c4ab-4f51-b2b9-ec7441702dd0" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="91cb05f4-55a0-4df6-bfe4-3ca316f87bbf" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>name</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="52f91c01-9fca-4754-8f99-d3b852a830a4"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('resellersResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.Resellers != null

for(def entry : jsonResponse.Resellers) {
	try {
		assert entry.id != null
		assert entry.name != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>resellersResponse</con:name><con:value>{
    "Resellers": [
        {
            "id": 37,
            "name": "Test Reseller"
        },
        {
            "id": 359,
            "name": "connexin"
        },
        {
            "id": 360,
            "name": "wisper"
        },
        {
            "id": 361,
            "name": "itc"
        },
        {
            "id": 390,
            "name": "Bob"
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="98f7a1ba-768d-4d08-9b2f-6ccc8fe4e3fa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve list of static ip ranges" searchProperties="true"><con:description>TestCase generated for REST Resource [/static_ip_ranges] located at [/static_ip_ranges]</con:description><con:settings/><con:testStep type="restrequest" name="When /static_ip_ranges is Retrieved" id="8911a24e-4241-47e3-8ca7-50a775affac8"><con:settings/><con:config service="Radius3 API" resourcePath="/static_ip_ranges" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /static_ip_ranges is Retrieved" id="b12a7dc1-50f5-4583-a36b-087e0a280a51" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/static_ip_ranges</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5b65762a-e5de-47dc-a2d9-31c781926988" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="789756c5-ccca-4d1c-9d02-c7561464bb0d" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="reseller" value="${#TestCase#resellerId}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
</con:parameters><con:parameterOrder><con:entry>reseller</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="fb11ee7e-d775-4416-a360-6bc2904c4313"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('staticIpResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.StaticIpRanges != null

// Expected Response
//   "StaticIpRanges":    [
//            {
//         "id": 186,
//         "reseller_id": 359,
//         "prefix": "185.6.153.0",
//         "prefix_length": 24,
//         "inactive_retention_period": -1
//      }, ...

for(def entry : jsonResponse.StaticIpRanges) {
	try {
		assert entry.id != null
		assert entry.reseller_id != null
		assert entry.prefix != null
		assert entry.prefix_length != null
		assert entry.inactive_retention_period != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>staticIpResponse</con:name><con:value>{
    "StaticIpRanges": [
        {
            "id": 186,
            "reseller_id": 359,
            "prefix": "185.6.153.0",
            "prefix_length": 24,
            "inactive_retention_period": -1
        },
        {
            "id": 187,
            "reseller_id": 359,
            "prefix": "185.6.154.128",
            "prefix_length": 25,
            "inactive_retention_period": -1
        },
        {
            "id": 188,
            "reseller_id": 359,
            "prefix": "185.6.155.128",
            "prefix_length": 25,
            "inactive_retention_period": -1
        },
        {
            "id": 189,
            "reseller_id": 360,
            "prefix": "185.6.153.0",
            "prefix_length": 24,
            "inactive_retention_period": -1
        },
        {
            "id": 190,
            "reseller_id": 360,
            "prefix": "185.6.154.128",
            "prefix_length": 25,
            "inactive_retention_period": -1
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="c1d33929-d3e5-4d1b-bb5f-9a0d47cb5850" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve list of statuses" searchProperties="true"><con:description>TestCase generated for REST Resource [/statuses] located at [/statuses]</con:description><con:settings/><con:testStep type="restrequest" name="When /statuses is Retrieved" id="66c9dc05-e6d2-46dc-8e95-ef8c7e4ddb1b"><con:settings/><con:config service="Radius3 API" resourcePath="/statuses" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /statuses is Retrieved" id="28bfc404-6871-4216-955f-1d8adcd8662d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/statuses</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2436b563-a5c3-4982-a3dc-eed328ad3209" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="2f3a3878-ce16-4663-84a3-c8d499e93c93" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>reseller</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="8ef43253-00a4-4384-beb1-05c5889caf76"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('statusesResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.Statuses != null

// Expected response
//   "Statuses":    [
//            {
//         "id": 279,
//         "name": "active",
//         "reseller_id": 359,
//         "redirect_url": "",
//         "pool_name": "active_pool",
//         "static_override_pool": true,
//         "type": "active" or null
//      }, ...

for(def entry : jsonResponse.Statuses) {
	try {
		assert entry.id != null
		assert entry.name != null
		assert entry.reseller_id != null
		assert entry.redirect_url != null
		assert entry.pool_name != null
		assert entry.static_override_pool != null
//		assert entry.type != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>statusesResponse</con:name><con:value>{
    "Statuses": [
        {
            "id": 279,
            "name": "active",
            "reseller_id": 359,
            "redirect_url": "",
            "pool_name": "active_pool",
            "static_override_pool": true,
            "type": "active"
        },
        {
            "id": 280,
            "name": "inactive",
            "reseller_id": 359,
            "redirect_url": "http:\/\/185.6.152.137\/splash_pages\/debtors.php",
            "pool_name": "inactive_pool",
            "static_override_pool": true,
            "type": null
        },
        {
            "id": 281,
            "name": "billing",
            "reseller_id": 359,
            "redirect_url": "http:\/\/185.6.152.137\/splash_pages\/inactive.php",
            "pool_name": "inactive_pool",
            "static_override_pool": true,
            "type": null
        },
        {
            "id": 282,
            "name": "overusage",
            "reseller_id": 359,
            "redirect_url": "http:\/\/185.6.152.137\/splash_pages\/overcap.php",
            "pool_name": "inactive_pool",
            "static_override_pool": true,
            "type": "overcap"
        },
        {
            "id": 283,
            "name": "active",
            "reseller_id": 360,
            "redirect_url": "",
            "pool_name": "active_pool",
            "static_override_pool": true,
            "type": "active"
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="ca15ab36-31de-46f8-b8d1-bd5d3e063220" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve list of transient packages" searchProperties="true"><con:description>TestCase generated for REST Resource [/transient_packages] located at [/transient_packages]</con:description><con:settings/><con:testStep type="restrequest" name="When /transient_packages is Retrieved" id="05885101-73db-4f0b-8bcc-bdb8059515b3"><con:settings/><con:config service="Radius3 API" resourcePath="/transient_packages" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /transient_packages is Retrieved" id="7199ac70-7675-4984-abb7-4262bb836201" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/transient_packages</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c182cc1f-2277-4beb-8828-185ccd7796f0" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="5462063e-5732-4fad-97ba-f167aa06f509" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#pageLimit}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
  <con:entry key="user" value="${#TestCase#userId}"/>
</con:parameters><con:parameterOrder><con:entry>user</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="79223a02-57a0-4a09-99dd-1b4a66772f70"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('transientPackagesResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
//assert jsonResponse.TransientPackages != null
//
//for(def entry : jsonResponse.TransientPackages) {
//	try {
//		assert entry.id != null
//		assert entry.username != null
//		assert entry.super != null
//	} catch(AssertionError  assertion) {
//		log.error assertion
//	}
//}
</script></con:config></con:testStep><con:properties><con:property><con:name>transientPackagesResponse</con:name><con:value>{
    "TransientPackages": [],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="7e91bd6a-8922-4658-aaa0-2e1528d9cfaa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve list of users" searchProperties="true"><con:description>TestCase generated for REST Resource [/users] located at [/users]</con:description><con:settings/><con:testStep type="restrequest" name="When /users is Retrieved" id="423d834a-0371-440f-8c05-a7b3b8a72367"><con:settings/><con:config service="Radius3 API" resourcePath="/users" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /users is Retrieved" id="fff12691-fdf1-48c0-9035-2ef8f2a375d9" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c0305d87-50c6-42ec-89f1-723b4d43ac3b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="31f48f36-5de6-403b-ad4c-4176e0c55812" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#limit}"/>
  <con:entry key="reseller" value="${#TestCase#reseller}"/>
  <con:entry key="page" value="${#TestCase#page}"/>
  <con:entry key="username" value="${#TestCase#username}"/>
</con:parameters><con:parameterOrder><con:entry>reseller</con:entry><con:entry>username</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="feac98fa-a9f8-4a50-a5cb-c14a76ad9a57"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('usersResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.Users != null

for(def user : jsonResponse.Users) {
	try {
		assert user.id != null
		assert user.username != null
		assert user.password != null
		assert user.hashed_password != null
		assert user.base_speed_up != null
		assert user.base_speed_down != null
		assert user.session_limit != null
//		assert user.static_ip != null
		assert user.base_upload_limit != null
		assert user.base_download_limit != null
		assert user.lock != null
		assert user.pending != null
		assert user.reseller_id != null
		assert user.status_id != null
		assert user.usage != null
		assert user.usage.login != null
		assert user.usage.logintime != null
		assert user.usage.up != null
		assert user.usage.down != null
		assert user.usage.total != null		
//		assert user.sessions != null
		assert user.speed_up != null
		assert user.speed_down != null
		assert user.upload_limit != null
		assert user.download_limit != null
		assert user.Status != null
		assert user.Status.id != null
		assert user.Status.name != null
		assert user.Status.reseller_id != null
		assert user.Status.redirect_url != null
		assert user.Status.pool_name != null
		assert user.Status.static_override_pool != null
		assert user.Status.type != null
//		assert user.TransientPackages != null
		if (user.RadiusAttributes != null) {
			for( attribute in user.RadiusAttributes) {
				assert attribute.id != null
				assert attribute.user_id != null
				assert attribute.type != null
				assert attribute.attribute != null
				assert attribute.op != null
				assert attribute.value != null
			}
		}
		
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>usersResponse</con:name><con:value>{
    "Users": [
        {
            "id": 670,
            "username": "51PAZ095ZJCR6DRHDWTK",
            "password": "51PAZ095ZJCR6DRHDWTK",
            "hashed_password": false,
            "base_speed_up": 0,
            "base_speed_down": 10,
            "session_limit": 1,
            "static_ip": null,
            "base_upload_limit": -1,
            "base_download_limit": 1,
            "lock": false,
            "pending": false,
            "reseller_id": 359,
            "status_id": 279,
            "usage": {
                "login": 0,
                "logintime": 0,
                "up": 0,
                "down": 0,
                "total": 0
            },
            "session": [],
            "speed_up": 0,
            "speed_down": 10,
            "upload_limit": -1,
            "download_limit": 1,
            "Status": {
                "id": 279,
                "name": "active",
                "reseller_id": 359,
                "redirect_url": "",
                "pool_name": "active_pool",
                "static_override_pool": true,
                "type": "active"
            },
            "TransientPackages": [],
            "RadiusAttributes": [
                {
                    "id": 54,
                    "user_id": 670,
                    "type": "radreply",
                    "attribute": "Cisco-AVPair",
                    "op": "+=",
                    "value": "ip:qos-policy-in=add-class(sub, (class-default), police(20000000))"
                },
                {
                    "id": 55,
                    "user_id": 670,
                    "type": "radreply",
                    "attribute": "Cisco-AVPair",
                    "op": "+=",
                    "value": "ip:qos-policy-out=add-class(sub, (class-default), police(20000000))"
                },
                {
                    "id": 56,
                    "user_id": 670,
                    "type": "radreply",
                    "attribute": "Cisco-AVPair",
                    "op": "+=",
                    "value": "ip:l4redirect=redirect list 100 to ip 185.6.152.137 port 80"
                }
            ]
        },
        {
            "id": 671,
            "username": "M34KM1COIK5JP7J7LC95",
            "password": "kFLTnH9\/kOHF2",
            "hashed_password": true,
            "base_speed_up": 10,
            "base_speed_down": 10,
            "session_limit": 1,
            "static_ip": null,
            "base_upload_limit": -1,
            "base_download_limit": 100,
            "lock": false,
            "pending": false,
            "reseller_id": 359,
            "status_id": 279,
            "usage": {
                "login": 0,
                "logintime": 0,
                "up": 0,
                "down": 0,
                "total": 0
            },
            "session": [],
            "speed_up": 10,
            "speed_down": 10,
            "upload_limit": -1,
            "download_limit": 100,
            "Status": {
                "id": 279,
                "name": "active",
                "reseller_id": 359,
                "redirect_url": "",
                "pool_name": "active_pool",
                "static_override_pool": true,
                "type": "active"
            },
            "TransientPackages": [],
            "RadiusAttributes": []
        },
        {
            "id": 672,
            "username": "K0SZ4PLGEQ0YWRHFAGRH",
            "password": "ZsjdGrGZ5zZfw",
            "hashed_password": true,
            "base_speed_up": 100,
            "base_speed_down": 100,
            "session_limit": 1,
            "static_ip": null,
            "base_upload_limit": -1,
            "base_download_limit": -1,
            "lock": false,
            "pending": false,
            "reseller_id": 359,
            "status_id": 279,
            "usage": {
                "login": 0,
                "logintime": 0,
                "up": 0,
                "down": 0,
                "total": 0
            },
            "session": [],
            "speed_up": 100,
            "speed_down": 100,
            "upload_limit": -1,
            "download_limit": -1,
            "Status": {
                "id": 279,
                "name": "active",
                "reseller_id": 359,
                "redirect_url": "",
                "pool_name": "active_pool",
                "static_override_pool": true,
                "type": "active"
            },
            "TransientPackages": [],
            "RadiusAttributes": []
        },
        {
            "id": 673,
            "username": "QB0PKSOF64EWXUZVRJH4",
            "password": "ZqiJ0i7MtV.yg",
            "hashed_password": true,
            "base_speed_up": 100,
            "base_speed_down": 100,
            "session_limit": 1,
            "static_ip": null,
            "base_upload_limit": -1,
            "base_download_limit": -1,
            "lock": false,
            "pending": false,
            "reseller_id": 359,
            "status_id": 279,
            "usage": {
                "login": 0,
                "logintime": 0,
                "up": 0,
                "down": 0,
                "total": 0
            },
            "session": [],
            "speed_up": 100,
            "speed_down": 100,
            "upload_limit": -1,
            "download_limit": -1,
            "Status": {
                "id": 279,
                "name": "active",
                "reseller_id": 359,
                "redirect_url": "",
                "pool_name": "active_pool",
                "static_override_pool": true,
                "type": "active"
            },
            "TransientPackages": [],
            "RadiusAttributes": []
        },
        {
            "id": 674,
            "username": "99O0Z81QXSL3D5QJGCPT",
            "password": "iXEoljzY0ynVg",
            "hashed_password": true,
            "base_speed_up": 60,
            "base_speed_down": 60,
            "session_limit": 1,
            "static_ip": null,
            "base_upload_limit": -1,
            "base_download_limit": -1,
            "lock": false,
            "pending": false,
            "reseller_id": 359,
            "status_id": 279,
            "usage": {
                "login": 0,
                "logintime": 0,
                "up": 0,
                "down": 0,
                "total": 0
            },
            "session": [],
            "speed_up": 60,
            "speed_down": 60,
            "upload_limit": -1,
            "download_limit": -1,
            "Status": {
                "id": 279,
                "name": "active",
                "reseller_id": 359,
                "redirect_url": "",
                "pool_name": "active_pool",
                "static_override_pool": true,
                "type": "active"
            },
            "TransientPackages": [],
            "RadiusAttributes": []
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="5e2373bb-c022-4304-b12e-5e0126194cf8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve list of webhook endpoints" searchProperties="true"><con:description>TestCase generated for REST Resource [/webhook_endpoints] located at [/webhook_endpoints]</con:description><con:settings/><con:testStep type="restrequest" name="When /webhook_endpoints is Retrieved" id="6f6e941f-093b-4113-ad1b-99795633f023"><con:settings/><con:config service="Radius3 API" resourcePath="/webhook_endpoints" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /webhook_endpoints is Retrieved" id="a9b932e5-7592-4952-a3ed-d456895c8b1d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/webhook_endpoints</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ec32d53b-2dfd-45b3-9043-8d2b8d92b8c1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="d62c71b2-e5af-42a9-a20a-a565593612ee" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="reseller" value="${#TestCase#resellerId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>reseller</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="c4a09fc2-2d30-4e40-b601-8a59c8bd39d5"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('webhookEndpointResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.WebhookEndpoints != null

// Expected response
//{
//   "WebhookEndpoints": [   {
//      "id": 1,
//      "endpoint": "http://127.0.0.1/webhook.php",
//      "reseller_id": 37,
//      "disabled": false,
//      "EventTypes": []
//   }],
//   "meta":    {
//      "page": 1,
//      "limit": 5
//   }
//}

for(def entry : jsonResponse.WebhookEndpoints) {
	try {
		assert entry.id != null
		assert entry.endpoint != null
		assert entry.reseller_id != null
		assert entry.disabled != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>webhookEndpointResponse</con:name><con:value>{
    "WebhookEndpoints": [
        {
            "id": 1,
            "endpoint": "http:\/\/127.0.0.1\/webhook.php",
            "reseller_id": 37,
            "disabled": false,
            "EventTypes": []
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="cc99b14f-657a-4416-9857-726e63ecd253" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve list of webhooks" searchProperties="true"><con:description>TestCase generated for REST Resource [/webhooks] located at [/webhooks]</con:description><con:settings/><con:testStep type="restrequest" name="When /webhooks is Retrieved" id="15f84444-0f27-488c-a1dc-93bdc4b93bfc"><con:settings/><con:config service="Radius3 API" resourcePath="/webhooks" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /webhooks is Retrieved" id="e281ab67-43e4-4544-b405-ca81ebb5ddaa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/webhooks</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="47e04630-d10c-47c7-8932-448bce218694" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="3bb9ba12-6d6d-41f4-b752-e34df34fa674" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>webhook_endpoint</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="9225fc4e-fe45-42b2-abe7-bbbb459f4075"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('webhooksResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.Webhooks != null

// Expected Response format
//{   "Webhooks": [   {
//      "id": 1,
//      "webhook_endpoint_id": 1,
//      "status_code": null,
//      "request": "{\"Events\":[{\"id\":\"4\",\"datetime\":\"2018-11-03 21:33:06\",\"event_type_id\":\"1\",\"user_id\":\"104\"}]}",
//      "response": null,
//      "request_headers": "{\"Content-Type\":\"application\\/json\",\"Content-Length\":92,\"User-Agent\":\"connexin-radius-api\\/3\"}",
//      "response_headers": null,
//      "success_1": 0,
//      "success_2": 0,
//      "success_3": 0,
//      "success_4": 0,
//      "success_5": 0
//   }],
//   "meta":    {
//      "page": 1,
//      "limit": 5
//   }
//}

for(def entry : jsonResponse.Webhooks) {
	try {
		assert entry.id != null
		assert entry.webhook_endpoint_id != null
//		assert entry.status_code != null
		assert entry.request != null
//		assert entry.response != null
		assert entry.request_headers != null
//		assert entry.response_headers != null
		assert entry.success_1 != null
		assert entry.success_2 != null
		assert entry.success_3 != null
		assert entry.success_4 != null
		assert entry.success_5 != null

	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>webhooksResponse</con:name><con:value>{
    "Webhooks": [
        {
            "id": 1,
            "webhook_endpoint_id": 1,
            "status_code": null,
            "request": "{\"Events\":[{\"id\":\"4\",\"datetime\":\"2018-11-03 21:33:06\",\"event_type_id\":\"1\",\"user_id\":\"104\"}]}",
            "response": null,
            "request_headers": "{\"Content-Type\":\"application\\\/json\",\"Content-Length\":92,\"User-Agent\":\"connexin-radius-api\\\/3\"}",
            "response_headers": null,
            "success_1": 0,
            "success_2": 0,
            "success_3": 0,
            "success_4": 0,
            "success_5": 0
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="8255caff-57a9-4c28-813a-2a0d24acc1ff" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve accounting entries for userID" searchProperties="true"><con:description>TestCase generated for REST Resource [/accounting_entries/{id}] located at [/accounting_entries/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid userId is available" id="cdf00ae8-ec51-4e51-8b7e-b86b490c512c"><con:settings/><con:config><script>
org.junit.Assume.assumeNotNull(testRunner.testCase.getPropertyValue('userId'))
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /accounting_entries/{id} is Retrieved" id="df5592fb-540a-4be7-b7fd-2b8dad85bcae"><con:settings/><con:config service="Radius3 API" resourcePath="/accounting_entries/" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /accounting_entries/{id} is Retrieved" id="2b6df3df-51a5-4d60-9c1f-c427800aac9a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/accounting_entries/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed7231fc-a4d3-4f0a-b073-4ca7d3a5c14d" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="89fd18ac-6735-46ff-869a-5d24407cdbd7" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#userId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="d506e5ad-e977-4eae-b830-7a2f844d7983"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('accountingEntriesResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 25
assert jsonResponse.AccountingEntries != null

for(def accountingEntry : jsonResponse.AccountingEntries) {
	try {
		assert accountingEntry.radacctid != null
		assert accountingEntry.acctsessionid != null
		assert accountingEntry.acctuniqueid != null
		assert accountingEntry.username != null
		assert accountingEntry.nasipaddress != null
		assert accountingEntry.nasporttype != null
		assert accountingEntry.acctstarttime != null
		assert accountingEntry.acctupdatetime != null
		assert accountingEntry.acctstoptime != null
		assert accountingEntry.acctinputoctets != null
		assert accountingEntry.acctoutputoctets != null
		assert accountingEntry.calledstationid != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>accountingEntriesResponse</con:name><con:value>{
    "AccountingEntries": [
        {
            "radacctid": "36",
            "acctsessionid": "81200d4e",
            "acctuniqueid": "36d88b8586ba1fe220204bb5ddb5cf58",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "1.1.1.1",
            "nasportid": "",
            "nasporttype": "other",
            "acctstarttime": "2019-04-16T16:15:00Z",
            "acctupdatetime": "2019-04-16T16:15:00Z",
            "acctstoptime": null,
            "acctinterval": null,
            "acctsessiontime": null,
            "acctauthentic": null,
            "connectinfo_start": null,
            "connectinfo_stop": null,
            "acctinputoctets": "92233722589",
            "acctoutputoctets": "8589934369",
            "calledstationid": "callingid",
            "callingstationid": "",
            "acctterminatecause": "",
            "servicetype": null,
            "framedprotocol": null,
            "framedipaddress": ""
        },
        {
            "radacctid": "37",
            "acctsessionid": "00000FA6",
            "acctuniqueid": "f2267386067043d1e4a9180755b5d955",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "other",
            "acctstarttime": "2019-04-09T00:00:00Z",
            "acctupdatetime": "2019-04-09T10:01:00Z",
            "acctstoptime": "2019-04-09T10:01:00Z",
            "acctinterval": "62",
            "acctsessiontime": "570",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "15734",
            "acctoutputoctets": "58",
            "calledstationid": "calledid",
            "callingstationid": "callingid",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.29"
        },
        {
            "radacctid": "265",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DCE",
            "acctuniqueid": "d58dd570f90bd59a494828521d485540",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:37:00Z",
            "acctupdatetime": "2019-04-04T11:51:45Z",
            "acctstoptime": "2019-04-04T11:52:01Z",
            "acctinterval": "63",
            "acctsessiontime": "901",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "41135674",
            "acctoutputoctets": "95046769",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.40"
        },
        {
            "radacctid": "264",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DCD",
            "acctuniqueid": "19941ba071157ce1a8173a3f5c968412",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:18:27Z",
            "acctupdatetime": "2019-04-04T11:22:36Z",
            "acctstoptime": "2019-04-04T11:23:01Z",
            "acctinterval": "63",
            "acctsessiontime": "274",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "52856",
            "acctoutputoctets": "154420",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.39"
        },
        {
            "radacctid": "263",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DCB",
            "acctuniqueid": "459f46fb0fc9934df4fef677cfbd8cce",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:14:10Z",
            "acctupdatetime": "2019-04-04T11:14:10Z",
            "acctstoptime": "2019-04-04T11:15:04Z",
            "acctinterval": null,
            "acctsessiontime": "54",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "41677243",
            "acctoutputoctets": "181561527",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        },
        {
            "radacctid": "262",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DC9",
            "acctuniqueid": "16f8063eaa1615e255abc73f4e7b382b",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:06:09Z",
            "acctupdatetime": "2019-04-04T11:10:21Z",
            "acctstoptime": "2019-04-04T11:11:01Z",
            "acctinterval": "61",
            "acctsessiontime": "292",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "439233",
            "acctoutputoctets": "17760564",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.37"
        },
        {
            "radacctid": "261",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DC7",
            "acctuniqueid": "f93788fb87f180dcb750e9aa50e35b7c",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:04:19Z",
            "acctupdatetime": "2019-04-04T11:04:19Z",
            "acctstoptime": "2019-04-04T11:04:56Z",
            "acctinterval": null,
            "acctsessiontime": "37",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "49909",
            "acctoutputoctets": "474839",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        },
        {
            "radacctid": "260",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DC6",
            "acctuniqueid": "ef0289f99401d726d542724566ba266e",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:01:08Z",
            "acctupdatetime": "2019-04-04T11:04:13Z",
            "acctstoptime": "2019-04-04T11:04:17Z",
            "acctinterval": "60",
            "acctsessiontime": "189",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "166359419",
            "acctoutputoctets": "43897578",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.34"
        },
        {
            "radacctid": "259",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DC5",
            "acctuniqueid": "a45c462fd3a452d13d5d428f1e075dbf",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T10:58:51Z",
            "acctupdatetime": "2019-04-04T10:59:55Z",
            "acctstoptime": "2019-04-04T11:00:02Z",
            "acctinterval": "64",
            "acctsessiontime": "71",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "279904",
            "acctoutputoctets": "898097",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.33"
        },
        {
            "radacctid": "258",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DC4",
            "acctuniqueid": "0497cd0a3b2a8d09bc37691abe2d56bf",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T10:52:44Z",
            "acctupdatetime": "2019-04-04T10:56:56Z",
            "acctstoptime": "2019-04-04T10:58:01Z",
            "acctinterval": "60",
            "acctsessiontime": "317",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "4450005",
            "acctoutputoctets": "112947433",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.32"
        },
        {
            "radacctid": "257",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DB7",
            "acctuniqueid": "95693d32540a089bab753a75fadf7cc7",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T10:09:03Z",
            "acctupdatetime": "2019-04-04T10:10:06Z",
            "acctstoptime": "2019-04-04T10:10:55Z",
            "acctinterval": "63",
            "acctsessiontime": "112",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "159205060",
            "acctoutputoctets": "250894990",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.31"
        },
        {
            "radacctid": "266",
            "acctsessionid": "fga768asg",
            "acctuniqueid": "fva8tsad8ftasdy7as8asrf6abs67ft",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "2.2.2.2",
            "nasportid": null,
            "nasporttype": "other",
            "acctstarttime": "2019-03-30T00:01:00Z",
            "acctupdatetime": "2019-03-30T00:01:00Z",
            "acctstoptime": "2019-03-30T00:01:00Z",
            "acctinterval": null,
            "acctsessiontime": null,
            "acctauthentic": null,
            "connectinfo_start": null,
            "connectinfo_stop": null,
            "acctinputoctets": "9223372258",
            "acctoutputoctets": "85899343698",
            "calledstationid": "test",
            "callingstationid": "",
            "acctterminatecause": "",
            "servicetype": null,
            "framedprotocol": null,
            "framedipaddress": ""
        },
        {
            "radacctid": "256",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D5A",
            "acctuniqueid": "def8b16e6c2ce7b7dbbe20cc73434a6a",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T11:43:22Z",
            "acctupdatetime": "2019-03-21T11:51:37Z",
            "acctstoptime": "2019-03-21T11:51:57Z",
            "acctinterval": "61",
            "acctsessiontime": "515",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "210013",
            "acctoutputoctets": "1029548",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.29"
        },
        {
            "radacctid": "255",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D58",
            "acctuniqueid": "5aa5b89f337f5011e49facd72acd31be",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T11:08:39Z",
            "acctupdatetime": "2019-03-21T11:42:16Z",
            "acctstoptime": "2019-03-21T11:42:18Z",
            "acctinterval": "65",
            "acctsessiontime": "2019",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "41477607",
            "acctoutputoctets": "57333756",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.28"
        },
        {
            "radacctid": "254",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D55",
            "acctuniqueid": "720b80001363b9bda465b23c0679b765",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:57:52Z",
            "acctupdatetime": "2019-03-21T11:06:23Z",
            "acctstoptime": "2019-03-21T11:06:31Z",
            "acctinterval": "61",
            "acctsessiontime": "519",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "169432577",
            "acctoutputoctets": "183738110",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.27"
        },
        {
            "radacctid": "253",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D54",
            "acctuniqueid": "ba76e12288263fa74fcbbb4e43e76f32",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:56:27Z",
            "acctupdatetime": "2019-03-21T10:57:30Z",
            "acctstoptime": "2019-03-21T10:57:50Z",
            "acctinterval": "63",
            "acctsessiontime": "83",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "4418559",
            "acctoutputoctets": "246578641",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.26"
        },
        {
            "radacctid": "252",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D53",
            "acctuniqueid": "f37cc0ce30b4a8f6c0e6c9d257afcc63",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:52:11Z",
            "acctupdatetime": "2019-03-21T10:55:17Z",
            "acctstoptime": "2019-03-21T10:56:14Z",
            "acctinterval": "63",
            "acctsessiontime": "243",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "312804027",
            "acctoutputoctets": "226913625",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.25"
        },
        {
            "radacctid": "251",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D52",
            "acctuniqueid": "f000df33122578b7d4a8704413342ed9",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:48:20Z",
            "acctupdatetime": "2019-03-21T10:51:33Z",
            "acctstoptime": "2019-03-21T10:52:09Z",
            "acctinterval": "65",
            "acctsessiontime": "229",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "171385344",
            "acctoutputoctets": "444294600",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.24"
        },
        {
            "radacctid": "250",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D43",
            "acctuniqueid": "d1137616f07211474a277a096f4cbf72",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:17:19Z",
            "acctupdatetime": "2019-03-21T10:17:19Z",
            "acctstoptime": "2019-03-21T10:17:25Z",
            "acctinterval": null,
            "acctsessiontime": "6",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "134007",
            "acctoutputoctets": "752304",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        },
        {
            "radacctid": "249",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D42",
            "acctuniqueid": "c02fe9799f23f1ead15353577c7487b9",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:10:21Z",
            "acctupdatetime": "2019-03-21T10:16:34Z",
            "acctstoptime": "2019-03-21T10:17:16Z",
            "acctinterval": "62",
            "acctsessiontime": "415",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "4263373",
            "acctoutputoctets": "165123040",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.22"
        },
        {
            "radacctid": "248",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019C64",
            "acctuniqueid": "95e6ba175cf971d95706a2af6b162a8e",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-19T09:38:34Z",
            "acctupdatetime": "2019-03-19T09:38:34Z",
            "acctstoptime": "2019-03-19T09:39:02Z",
            "acctinterval": null,
            "acctsessiontime": "28",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "129900",
            "acctoutputoctets": "679347",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        },
        {
            "radacctid": "247",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019C63",
            "acctuniqueid": "5016a0b93a300cd096e3f3c35ec98f33",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-19T09:33:19Z",
            "acctupdatetime": "2019-03-19T09:38:30Z",
            "acctstoptime": "2019-03-19T09:38:31Z",
            "acctinterval": "63",
            "acctsessiontime": "312",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "443070",
            "acctoutputoctets": "1153031",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.17"
        },
        {
            "radacctid": "246",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019C5D",
            "acctuniqueid": "96c1b10a8acd89d2abb6179868f3e4e4",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-19T09:24:37Z",
            "acctupdatetime": "2019-03-19T09:24:37Z",
            "acctstoptime": "2019-03-19T09:25:01Z",
            "acctinterval": null,
            "acctsessiontime": "24",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "1426798",
            "acctoutputoctets": "53919917",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        },
        {
            "radacctid": "245",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019C55",
            "acctuniqueid": "c36e7b86bf4054d0f1b9965d7234b067",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-18T17:12:07Z",
            "acctupdatetime": "2019-03-18T17:31:37Z",
            "acctstoptime": "2019-03-18T17:32:13Z",
            "acctinterval": "64",
            "acctsessiontime": "1206",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "17103639",
            "acctoutputoctets": "940483608",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.15"
        },
        {
            "radacctid": "244",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019C09",
            "acctuniqueid": "9fd0d09ec2d48b37849bab0ed6aea0ec",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-18T16:56:57Z",
            "acctupdatetime": "2019-03-18T16:56:57Z",
            "acctstoptime": "2019-03-18T16:57:02Z",
            "acctinterval": null,
            "acctsessiontime": "5",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "0",
            "acctoutputoctets": "76",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        }
    ],
    "meta": {
        "page": 1,
        "limit": 25
    }
}</con:value></con:property><con:property><con:name>userId</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="43cf6f72-e0c0-4c70-945b-27bf6eba351f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve list of accounting entries for userID" searchProperties="true"><con:description>TestCase generated for REST Resource [/accounting_entries] located at [/accounting_entries]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid userId is available" id="daead5e4-45ee-49c8-85e3-38dbca171040"><con:settings/><con:config><script>assert testRunner.testCase.getPropertyValue('userId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /accounting_entries are Retrieved" id="cbc4ec6d-5a6f-417f-8c4e-7546fc27a848"><con:settings/><con:config service="Radius3 API" resourcePath="/accounting_entries" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /accounting_entries are Retrieved" id="4d349f18-29d1-435f-ac23-37fe4da76bee" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="AutoInferSchemas">false</con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/accounting_entries</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cc09444f-f82d-49da-9108-d9909f5dfdf2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="5c96fa91-bd7a-4595-b729-638ceda8a0ff" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#limit}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
</con:parameters><con:parameterOrder><con:entry>user</con:entry><con:entry>username</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="49c59527-bffb-4138-a128-61128f0e6fca"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('accountingEntriesForIdResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 25
assert jsonResponse.AccountingEntries != null

for(def accountingEntry : jsonResponse.AccountingEntries) {
	try {
		assert accountingEntry.radacctid != null
		assert accountingEntry.acctsessionid != null
		assert accountingEntry.acctuniqueid != null
		assert accountingEntry.username != null
		assert accountingEntry.nasipaddress != null
		assert accountingEntry.nasporttype != null
		assert accountingEntry.acctstarttime != null
		assert accountingEntry.acctupdatetime != null
		assert accountingEntry.acctstoptime != null
		assert accountingEntry.acctinputoctets != null
		assert accountingEntry.acctoutputoctets != null
		assert accountingEntry.calledstationid != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>userId</con:name><con:value>1</con:value></con:property><con:property><con:name>accountingEntriesForIdResponse</con:name><con:value>{
    "AccountingEntries": [
        {
            "radacctid": "36",
            "acctsessionid": "81200d4e",
            "acctuniqueid": "36d88b8586ba1fe220204bb5ddb5cf58",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "1.1.1.1",
            "nasportid": "",
            "nasporttype": "other",
            "acctstarttime": "2019-04-16T16:15:00Z",
            "acctupdatetime": "2019-04-16T16:15:00Z",
            "acctstoptime": null,
            "acctinterval": null,
            "acctsessiontime": null,
            "acctauthentic": null,
            "connectinfo_start": null,
            "connectinfo_stop": null,
            "acctinputoctets": "92233722589",
            "acctoutputoctets": "8589934369",
            "calledstationid": "callingid",
            "callingstationid": "",
            "acctterminatecause": "",
            "servicetype": null,
            "framedprotocol": null,
            "framedipaddress": ""
        },
        {
            "radacctid": "37",
            "acctsessionid": "00000FA6",
            "acctuniqueid": "f2267386067043d1e4a9180755b5d955",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "other",
            "acctstarttime": "2019-04-09T00:00:00Z",
            "acctupdatetime": "2019-04-09T10:01:00Z",
            "acctstoptime": "2019-04-09T10:01:00Z",
            "acctinterval": "62",
            "acctsessiontime": "570",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "15734",
            "acctoutputoctets": "58",
            "calledstationid": "calledid",
            "callingstationid": "callingid",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.29"
        },
        {
            "radacctid": "265",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DCE",
            "acctuniqueid": "d58dd570f90bd59a494828521d485540",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:37:00Z",
            "acctupdatetime": "2019-04-04T11:51:45Z",
            "acctstoptime": "2019-04-04T11:52:01Z",
            "acctinterval": "63",
            "acctsessiontime": "901",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "41135674",
            "acctoutputoctets": "95046769",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.40"
        },
        {
            "radacctid": "264",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DCD",
            "acctuniqueid": "19941ba071157ce1a8173a3f5c968412",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:18:27Z",
            "acctupdatetime": "2019-04-04T11:22:36Z",
            "acctstoptime": "2019-04-04T11:23:01Z",
            "acctinterval": "63",
            "acctsessiontime": "274",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "52856",
            "acctoutputoctets": "154420",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.39"
        },
        {
            "radacctid": "263",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DCB",
            "acctuniqueid": "459f46fb0fc9934df4fef677cfbd8cce",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:14:10Z",
            "acctupdatetime": "2019-04-04T11:14:10Z",
            "acctstoptime": "2019-04-04T11:15:04Z",
            "acctinterval": null,
            "acctsessiontime": "54",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "41677243",
            "acctoutputoctets": "181561527",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        },
        {
            "radacctid": "262",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DC9",
            "acctuniqueid": "16f8063eaa1615e255abc73f4e7b382b",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:06:09Z",
            "acctupdatetime": "2019-04-04T11:10:21Z",
            "acctstoptime": "2019-04-04T11:11:01Z",
            "acctinterval": "61",
            "acctsessiontime": "292",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "439233",
            "acctoutputoctets": "17760564",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.37"
        },
        {
            "radacctid": "261",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DC7",
            "acctuniqueid": "f93788fb87f180dcb750e9aa50e35b7c",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:04:19Z",
            "acctupdatetime": "2019-04-04T11:04:19Z",
            "acctstoptime": "2019-04-04T11:04:56Z",
            "acctinterval": null,
            "acctsessiontime": "37",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "49909",
            "acctoutputoctets": "474839",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        },
        {
            "radacctid": "260",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DC6",
            "acctuniqueid": "ef0289f99401d726d542724566ba266e",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T11:01:08Z",
            "acctupdatetime": "2019-04-04T11:04:13Z",
            "acctstoptime": "2019-04-04T11:04:17Z",
            "acctinterval": "60",
            "acctsessiontime": "189",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "166359419",
            "acctoutputoctets": "43897578",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.34"
        },
        {
            "radacctid": "259",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DC5",
            "acctuniqueid": "a45c462fd3a452d13d5d428f1e075dbf",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T10:58:51Z",
            "acctupdatetime": "2019-04-04T10:59:55Z",
            "acctstoptime": "2019-04-04T11:00:02Z",
            "acctinterval": "64",
            "acctsessiontime": "71",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "279904",
            "acctoutputoctets": "898097",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.33"
        },
        {
            "radacctid": "258",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DC4",
            "acctuniqueid": "0497cd0a3b2a8d09bc37691abe2d56bf",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T10:52:44Z",
            "acctupdatetime": "2019-04-04T10:56:56Z",
            "acctstoptime": "2019-04-04T10:58:01Z",
            "acctinterval": "60",
            "acctsessiontime": "317",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "4450005",
            "acctoutputoctets": "112947433",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.32"
        },
        {
            "radacctid": "257",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019DB7",
            "acctuniqueid": "95693d32540a089bab753a75fadf7cc7",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-04-04T10:09:03Z",
            "acctupdatetime": "2019-04-04T10:10:06Z",
            "acctstoptime": "2019-04-04T10:10:55Z",
            "acctinterval": "63",
            "acctsessiontime": "112",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "159205060",
            "acctoutputoctets": "250894990",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.31"
        },
        {
            "radacctid": "266",
            "acctsessionid": "fga768asg",
            "acctuniqueid": "fva8tsad8ftasdy7as8asrf6abs67ft",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "2.2.2.2",
            "nasportid": null,
            "nasporttype": "other",
            "acctstarttime": "2019-03-30T00:01:00Z",
            "acctupdatetime": "2019-03-30T00:01:00Z",
            "acctstoptime": "2019-03-30T00:01:00Z",
            "acctinterval": null,
            "acctsessiontime": null,
            "acctauthentic": null,
            "connectinfo_start": null,
            "connectinfo_stop": null,
            "acctinputoctets": "9223372258",
            "acctoutputoctets": "85899343698",
            "calledstationid": "test",
            "callingstationid": "",
            "acctterminatecause": "",
            "servicetype": null,
            "framedprotocol": null,
            "framedipaddress": ""
        },
        {
            "radacctid": "256",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D5A",
            "acctuniqueid": "def8b16e6c2ce7b7dbbe20cc73434a6a",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T11:43:22Z",
            "acctupdatetime": "2019-03-21T11:51:37Z",
            "acctstoptime": "2019-03-21T11:51:57Z",
            "acctinterval": "61",
            "acctsessiontime": "515",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "210013",
            "acctoutputoctets": "1029548",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.29"
        },
        {
            "radacctid": "255",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D58",
            "acctuniqueid": "5aa5b89f337f5011e49facd72acd31be",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T11:08:39Z",
            "acctupdatetime": "2019-03-21T11:42:16Z",
            "acctstoptime": "2019-03-21T11:42:18Z",
            "acctinterval": "65",
            "acctsessiontime": "2019",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "41477607",
            "acctoutputoctets": "57333756",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.28"
        },
        {
            "radacctid": "254",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D55",
            "acctuniqueid": "720b80001363b9bda465b23c0679b765",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:57:52Z",
            "acctupdatetime": "2019-03-21T11:06:23Z",
            "acctstoptime": "2019-03-21T11:06:31Z",
            "acctinterval": "61",
            "acctsessiontime": "519",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "169432577",
            "acctoutputoctets": "183738110",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.27"
        },
        {
            "radacctid": "253",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D54",
            "acctuniqueid": "ba76e12288263fa74fcbbb4e43e76f32",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:56:27Z",
            "acctupdatetime": "2019-03-21T10:57:30Z",
            "acctstoptime": "2019-03-21T10:57:50Z",
            "acctinterval": "63",
            "acctsessiontime": "83",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "4418559",
            "acctoutputoctets": "246578641",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.26"
        },
        {
            "radacctid": "252",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D53",
            "acctuniqueid": "f37cc0ce30b4a8f6c0e6c9d257afcc63",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:52:11Z",
            "acctupdatetime": "2019-03-21T10:55:17Z",
            "acctstoptime": "2019-03-21T10:56:14Z",
            "acctinterval": "63",
            "acctsessiontime": "243",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "312804027",
            "acctoutputoctets": "226913625",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.25"
        },
        {
            "radacctid": "251",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D52",
            "acctuniqueid": "f000df33122578b7d4a8704413342ed9",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:48:20Z",
            "acctupdatetime": "2019-03-21T10:51:33Z",
            "acctstoptime": "2019-03-21T10:52:09Z",
            "acctinterval": "65",
            "acctsessiontime": "229",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "171385344",
            "acctoutputoctets": "444294600",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.24"
        },
        {
            "radacctid": "250",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D43",
            "acctuniqueid": "d1137616f07211474a277a096f4cbf72",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:17:19Z",
            "acctupdatetime": "2019-03-21T10:17:19Z",
            "acctstoptime": "2019-03-21T10:17:25Z",
            "acctinterval": null,
            "acctsessiontime": "6",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "134007",
            "acctoutputoctets": "752304",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        },
        {
            "radacctid": "249",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019D42",
            "acctuniqueid": "c02fe9799f23f1ead15353577c7487b9",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-21T10:10:21Z",
            "acctupdatetime": "2019-03-21T10:16:34Z",
            "acctstoptime": "2019-03-21T10:17:16Z",
            "acctinterval": "62",
            "acctsessiontime": "415",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "4263373",
            "acctoutputoctets": "165123040",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.22"
        },
        {
            "radacctid": "248",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019C64",
            "acctuniqueid": "95e6ba175cf971d95706a2af6b162a8e",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-19T09:38:34Z",
            "acctupdatetime": "2019-03-19T09:38:34Z",
            "acctstoptime": "2019-03-19T09:39:02Z",
            "acctinterval": null,
            "acctsessiontime": "28",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "129900",
            "acctoutputoctets": "679347",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        },
        {
            "radacctid": "247",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019C63",
            "acctuniqueid": "5016a0b93a300cd096e3f3c35ec98f33",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-19T09:33:19Z",
            "acctupdatetime": "2019-03-19T09:38:30Z",
            "acctstoptime": "2019-03-19T09:38:31Z",
            "acctinterval": "63",
            "acctsessiontime": "312",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "443070",
            "acctoutputoctets": "1153031",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.17"
        },
        {
            "radacctid": "246",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019C5D",
            "acctuniqueid": "96c1b10a8acd89d2abb6179868f3e4e4",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-19T09:24:37Z",
            "acctupdatetime": "2019-03-19T09:24:37Z",
            "acctstoptime": "2019-03-19T09:25:01Z",
            "acctinterval": null,
            "acctsessiontime": "24",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "1426798",
            "acctoutputoctets": "53919917",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        },
        {
            "radacctid": "245",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019C55",
            "acctuniqueid": "c36e7b86bf4054d0f1b9965d7234b067",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-18T17:12:07Z",
            "acctupdatetime": "2019-03-18T17:31:37Z",
            "acctstoptime": "2019-03-18T17:32:13Z",
            "acctinterval": "64",
            "acctsessiontime": "1206",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "17103639",
            "acctoutputoctets": "940483608",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "User-Request",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": "10.0.0.15"
        },
        {
            "radacctid": "244",
            "acctsessionid": "0\/0\/0\/50.500_0300000000019C09",
            "acctuniqueid": "9fd0d09ec2d48b37849bab0ed6aea0ec",
            "username": "5F65BFC54263252B7998",
            "groupname": "",
            "realm": "",
            "nasipaddress": "185.6.154.1",
            "nasportid": "0\/0\/0\/50.500",
            "nasporttype": "PPPoEoQinQ",
            "acctstarttime": "2019-03-18T16:56:57Z",
            "acctupdatetime": "2019-03-18T16:56:57Z",
            "acctstoptime": "2019-03-18T16:57:02Z",
            "acctinterval": null,
            "acctsessiontime": "5",
            "acctauthentic": "RADIUS",
            "connectinfo_start": "",
            "connectinfo_stop": "",
            "acctinputoctets": "0",
            "acctoutputoctets": "76",
            "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
            "callingstationid": "B4-B6-86-BA-3B-B0",
            "acctterminatecause": "Admin-Reset",
            "servicetype": "Framed-User",
            "framedprotocol": "PPP",
            "framedipaddress": ""
        }
    ],
    "meta": {
        "page": 1,
        "limit": 25
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="ae6587e5-5268-40f0-9499-fd721defdeb0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve list of accounting entries by username (deprecated)" searchProperties="true"><con:description>TestCase generated for REST Resource [/accounting_entries] located at [/accounting_entries]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid username is available" id="bd49d0d3-c716-45ae-b7d3-996508a92a0f"><con:settings/><con:config><script>
assert testRunner.testCase.getPropertyValue('username')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /accounting_entries are Retrieved" id="a02a9760-565f-45f4-8660-4f80e1b25e03"><con:settings/><con:config service="Radius3 API" resourcePath="/accounting_entries" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /accounting_entries are Retrieved" id="4d349f18-29d1-435f-ac23-37fe4da76bee" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="AutoInferSchemas">false</con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/accounting_entries</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cc09444f-f82d-49da-9108-d9909f5dfdf2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="5c96fa91-bd7a-4595-b729-638ceda8a0ff" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#limit}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
  <con:entry key="user" value="${#TestCase#userId}"/>
  <con:entry key="username" value="${#TestCase#username}"/>
</con:parameters><con:parameterOrder><con:entry>user</con:entry><con:entry>username</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="5f38184d-cd19-4883-b3ee-6314d6673f2c"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('accountingEntriesForNameResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 25
assert jsonResponse.AccountingEntries != null

for(def accountingEntry : jsonResponse.AccountingEntries) {
	try {
		assert accountingEntry.radacctid != null
		assert accountingEntry.acctsessionid != null
		assert accountingEntry.acctuniqueid != null
		assert accountingEntry.username != null
		assert accountingEntry.nasipaddress != null
		assert accountingEntry.nasporttype != null
		assert accountingEntry.acctstarttime != null
		assert accountingEntry.acctupdatetime != null
		assert accountingEntry.acctstoptime != null
		assert accountingEntry.acctinputoctets != null
		assert accountingEntry.acctoutputoctets != null
		assert accountingEntry.calledstationid != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>username</con:name><con:value>ABCDEFGHIJKLMNOPQRST</con:value></con:property><con:property><con:name>accountingEntriesForNameResponse</con:name><con:value>{
    "AccountingEntries": [],
    "meta": {
        "page": 1,
        "limit": 25
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="710317ac-b19d-47c3-99e7-28929f8ebefb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create admins" searchProperties="true"><con:description>TestCase generated for REST Resource [/admins] located at [/admins]</con:description><con:settings/><con:testStep type="groovy" name="Given json content for the create admin request" id="dd6dc5ba-e04a-4d63-8d6e-96d94e656c07"><con:settings/><con:config><script>testCase = testRunner.testCase
testSuite = testCase.testSuite

def timeStamp = new Date().format("HH:mm:ss.SSS")
def testAdminUsername = "Test Admin-" + timeStamp
testCase.setPropertyValue('testAdminUsername', testAdminUsername)
def testAdminPassword = UUID.randomUUID().toString()
def testReseller = "Test Reseller-" + timeStamp
testCase.setPropertyValue('testReseller', testReseller)

jsonRequestStr = """{
	"Admin": {
		"username": "${testAdminUsername}",
		"password": "${testAdminPassword}",
		"super": true,
		"Resellers": [
			{
			"name": "${testReseller}"
			}
		]
	}
}
"""

// Sanity check the json format is valud
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testCase.setPropertyValue('createAdminRequest', jsonRequestStr)

import groovy.json.JsonSlurper
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /admins is Created" id="a0f8083e-67e9-402a-9bc1-4ce8a4fe469e"><con:settings/><con:config service="Radius3 API" resourcePath="/admins" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /admins is Created" id="b5b5d556-57d8-4b79-ad4e-2ed5b410378f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createAdminRequest}
</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/admins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e75f63a5-aa34-408b-b03d-dd4212af69e8" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="fc66c8fc-60ea-491f-b073-80e57ac6522f" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="3a8a5b9e-6756-4443-b924-11ee23b86bdd"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createAdminsResponse', responseContent)

def expectedAdminUsername = testCase.getPropertyValue('testAdminUsername')
def expectedtestReseller = testCase.getPropertyValue('testReseller')

// Expected Response format
//{
//  "Admin": {
//    "id": 1,
//    "username": "Test admin (UUID)",
//    "super": true,
//    "Resellers": [
//      {
//        "id": 1,
//        "name": "Test Reseller (UUID)"
//      }
//    ]
//  }
//}

assert jsonResponse != null
assert jsonResponse.Admin != null
assert jsonResponse.Admin.id != null
assert jsonResponse.Admin.username != null
assert jsonResponse.Admin.username == expectedAdminUsername
assert jsonResponse.Admin.super != null
//assert jsonResponse.Admin.Resellers != null
//assert jsonResponse.Admin.Resellers.id != null
//assert jsonResponse.Admin.Resellers.name != null
//assert jsonResponse.Admin.Resellers.name == expectedtestReseller

testSuite.setPropertyValue('testAdminId', jsonResponse.Admin.id)
testSuite.setPropertyValue('testAdminUsername', jsonResponse.Admin.username)
</script></con:config></con:testStep><con:properties><con:property><con:name>createAdminRequest</con:name><con:value>{
	"Admin": {
		"username": "Test Admin-09:44:50.321",
		"password": "6dbec5a3-b6cc-4dee-83de-ef4f0bc0f305",
		"super": true,
		"Resellers": [
			{
			"name": "Test Reseller-09:44:50.321"
			}
		]
	}
}
</con:value></con:property><con:property><con:name>testAdminUsername</con:name><con:value>Test Admin-09:44:50.321</con:value></con:property><con:property><con:name>testReseller</con:name><con:value>Test Reseller-09:44:50.321</con:value></con:property><con:property><con:name>createAdminsResponse</con:name><con:value>{
    "Admin": {
        "id": 79,
        "username": "Test Admin-09:44:50.321",
        "super": true,
        "Resellers": []
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="a586653a-a460-4505-a156-471d35c62af0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create username" searchProperties="true" disabled="true"><con:description>TestCase generated for REST Resource [/users/generate_username] located at [/users/generate_username]</con:description><con:settings/><con:testStep type="restrequest" name="When /users/generate_username is Retrieved" id="7078cbd5-0606-4f31-b96f-4baddf37fd70"><con:settings/><con:config service="Radius3 API" resourcePath="/users/generate_username" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /users/generate_username is Retrieved" id="e427e7db-4623-471d-8ed9-ebcdfc44c4c2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/users/generate_username</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="44b1b97e-4a9c-440d-aa8f-533c63676823" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="a46c2791-3454-4195-93d8-68ddb2bd56cd" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="6f53c310-196b-4ab5-9896-988c72141277"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createUsernameResponse', responseContent)

// Expected Response
//{"username": "26F90EF78895FC230237"}

assert jsonResponse != null
assert jsonResponse.username != null


</script></con:config></con:testStep><con:properties><con:property><con:name>createUsernameResponse</con:name><con:value>{
    "username": "95CC043BEBE10B2C5157"
}</con:value></con:property></con:properties></con:testCase><con:testCase id="6758932d-5b2c-4ef7-9173-72b14504c77e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create nas" searchProperties="true"><con:description>TestCase generated for REST Resource [/nas] located at [/nas]</con:description><con:settings/><con:testStep type="groovy" name="Given content for the create nas request" id="eda6e24a-35ad-48a6-8fbd-7c2acce63bc9"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testCase.testSuite

def testNasShortName = "NAS-" + UUID.randomUUID().toString().split('-')[0]
def testNasSecret = UUID.randomUUID().toString().split('-')[0]
def timeStamp = new Date().format("HH:mm:ss.SSS")

testCase.setPropertyValue('testNasShortName', testNasShortName)
testCase.setPropertyValue('testNasSecret', testNasSecret)

jsonRequestStr = """{
	"Nas": {
		"nasname": "1.1.1.1",
		"shortname": "${testNasShortName}",
		"type": "other",
		"ports": null,
		"secret": "${testNasSecret}",
		"server": null,
		"community": null,
		"description": "RADIUS Client ${timeStamp}"
	}
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testCase.setPropertyValue('createNasRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /nas is Created" id="e27afe58-975b-45d3-b048-9edf84bbb329"><con:settings/><con:config service="Radius3 API" resourcePath="/nas" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /nas is Created" id="44a54c39-6273-4ca0-83f1-bcce52720d98" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createNasRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/nas</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f6b4994a-83c6-4666-b23e-f352046426ec" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="9b37e795-a8ae-4b0e-b065-6ead86364b98" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="1483576a-5688-434d-ab93-5fca20f38857"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def preceedingStepIndex = context.currentStepIndex - 1
def preceedingStep = testCase.getTestStepAt(preceedingStepIndex)

def responseContent = preceedingStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createNasResponse', responseContent)

def expectedNasShortName = testCase.getPropertyValue('testNasShortName')
def expectedNasSecret = testCase.getPropertyValue('testNasSecret')

// Expected Response format
//{
//  "Nas": {
//    "nasname": "1.1.1.1",
//    "shortname": "nas-(UUID time-low part)",
//    "type": "other",
//    "ports": null,
//    "secret": "testing123",
//    "server": null,
//    "community": null,
//    "description": "RADIUS Client"
//  }
//}

assert jsonResponse != null
assert jsonResponse.Nas != null
assert jsonResponse.Nas.nasname != null
assert jsonResponse.Nas.shortname != null
assert jsonResponse.Nas.shortname == expectedNasShortName
assert jsonResponse.Nas.type != null
//assert jsonResponse.Nas.ports != null
assert jsonResponse.Nas.secret != null
assert jsonResponse.Nas.secret == expectedNasSecret
assert jsonResponse.Nas.description != null

testSuite.setPropertyValue('testNasId', jsonResponse.Nas.id)
</script></con:config></con:testStep><con:properties><con:property><con:name>createNasRequest</con:name><con:value>{
	"Nas": {
		"nasname": "1.1.1.1",
		"shortname": "NAS-9ef40c6d",
		"type": "other",
		"ports": null,
		"secret": "ae37c280",
		"server": null,
		"community": null,
		"description": "RADIUS Client 09:44:50.636"
	}
}
</con:value></con:property><con:property><con:name>testNasShortName</con:name><con:value>NAS-9ef40c6d</con:value></con:property><con:property><con:name>testNasSecret</con:name><con:value>ae37c280</con:value></con:property><con:property><con:name>createNasResponse</con:name><con:value>{
    "Nas": {
        "id": 39,
        "nasname": "1.1.1.1",
        "shortname": "NAS-9ef40c6d",
        "type": "other",
        "ports": null,
        "secret": "ae37c280",
        "server": null,
        "community": null,
        "description": "RADIUS Client 09:44:50.636"
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="fb7526ee-107d-46d3-b1f8-537a2085e25a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create radius attributes" searchProperties="true"><con:description>TestCase generated for REST Resource [/radius_attributes] located at [/radius_attributes{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given content for the request" id="7211def3-458d-4655-afce-78a4f5227585"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testCase.testSuite

testUserId = testSuite.getPropertyValue('userId')

jsonRequestStr = """
{
	"RadiusAttribute": {
		"user_id": ${testUserId},
		"type": "radreply",
		"attribute": "string",
		"op": ":=",
		"value": "test_pool"
	}
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('createRadiusAttributeRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /radius_attributes is Created" id="205f0b00-b727-4ae2-b387-5362ffe4de52"><con:settings/><con:config service="Radius3 API" resourcePath="/radius_attributes" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /radius_attributes is Created" id="6bc825c2-d1bf-4587-8cf5-903d3c7a6d6f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createRadiusAttributeRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/radius_attributes</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4c3e1b6a-1138-4612-b374-23cba5861e9f" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="16cce5f9-c1cf-435e-989b-37f3e092d29e" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="248dba4e-842c-400e-9dc9-9a55b61146dd"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def preceedingStepIndex = context.currentStepIndex - 1
def preceedingStep = testCase.getTestStepAt(preceedingStepIndex)

def responseContent = preceedingStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createNasResponse', responseContent)

def expectedNasShortName = testCase.getPropertyValue('testNasShortName')
def expectedNasSecret = testCase.getPropertyValue('testNasSecret')

// Expected Response format
//{
//  "RadiusAttribute": {
//    "id": 1,
//    "user_id": 1,
//    "type": "radreply",
//    "attribute": "string",
//    "op": ":=",
//    "value": "test_pool"
//  }
//}

assert jsonResponse != null
assert jsonResponse.RadiusAttribute != null
assert jsonResponse.RadiusAttribute.id != null
assert jsonResponse.RadiusAttribute.user_id != null
assert jsonResponse.RadiusAttribute.type != null
assert jsonResponse.RadiusAttribute.attribute != null
assert jsonResponse.RadiusAttribute.op != null
assert jsonResponse.RadiusAttribute.value != null

testSuite.setPropertyValue('testRadiusAttributeId', jsonResponse.RadiusAttribute.id)
</script></con:config></con:testStep><con:properties><con:property><con:name>createRadiusAttributeRequest</con:name><con:value>
{
	"RadiusAttribute": {
		"user_id": null,
		"type": "radreply",
		"attribute": "string",
		"op": ":=",
		"value": "test_pool"
	}
}
</con:value></con:property><con:property><con:name>userId</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="8bcb04f3-4fdd-4ab4-82a0-8a70e773ae6a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create resellers" searchProperties="true"><con:description>TestCase generated for REST Resource [/resellers] located at [/resellers]</con:description><con:settings/><con:testStep type="groovy" name="Given content for the request" id="8791f812-fdca-4fb1-aed6-936fa55bcdb1"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testCase.testSuite

def timeStamp = new Date().format("HH:mm:ss.SSS")
def testResellerNme = "Test Reseller-" + timeStamp
testCase.setPropertyValue('testResellerName', testResellerNme)

jsonRequestStr = """
{
  "Reseller": {
    "name": "${testResellerNme}"
  }
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('createResellerRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /resellers is Created" id="5a5a95e8-35e2-486d-9dfb-e4a7ede289f1"><con:settings/><con:config service="Radius3 API" resourcePath="/resellers" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /resellers is Created" id="0f06c933-b1d2-480b-80ed-85de7ab535da" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createResellerRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/resellers</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1e9232c4-6c40-414c-8645-b1981f1eb6a2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="f222c60c-7589-47aa-9448-3e89d9444dd6" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="98690523-bab6-488f-bd6c-fadddd1d05b0"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def preceedingStepIndex = context.currentStepIndex - 1
def preceedingStep = testCase.getTestStepAt(preceedingStepIndex)

def responseContent = preceedingStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createResellerResponse', responseContent)

def expectedResellerName = testCase.getPropertyValue('testResellerName')

// Expected Response format
//{"Reseller": {
//   "id": 394,
//   "name": "Test Reseller"
//}}

assert jsonResponse != null
assert jsonResponse.Reseller != null
assert jsonResponse.Reseller.id != null
assert jsonResponse.Reseller.name != null
assert jsonResponse.Reseller.name == expectedResellerName

testSuite.setPropertyValue('testRadiusAttributeId', jsonResponse.RadiusAttribute.id)
</script></con:config></con:testStep><con:properties><con:property><con:name>createResellerRequest</con:name><con:value>
{
  "Reseller": {
    "name": "Test Reseller-09:44:50.965"
  }
}
</con:value></con:property><con:property><con:name>testResellerName</con:name><con:value>Test Reseller-09:44:50.965</con:value></con:property><con:property><con:name>createResellerResponse</con:name><con:value>{
    "Reseller": {
        "id": 425,
        "name": "Test Reseller-09:44:50.965"
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="85a7cd87-ad7b-48e1-9bac-799203b666da" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create static ip ranges" searchProperties="true"><con:description>TestCase generated for REST Resource [/static_ip_ranges] located at [/static_ip_ranges]</con:description><con:settings/><con:testStep type="groovy" name="Given content for the request" id="787459a0-238c-4189-9452-66b76ca4a7c8"><con:settings/><con:config><script>import groovy.json.JsonSlurper

jsonRequestStr = """
{
	"StaticIPRange": {
		"reseller_id": 1,
		"prefix": "10.10.0.0",
		"prefix_length": 16,
		"inactive_retention_period": -1
	}
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('createStaticIpRangeRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /static_ip_ranges is Created" id="39a06da4-46c5-48d7-9668-053145b204b9"><con:settings/><con:config service="Radius3 API" resourcePath="/static_ip_ranges" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /static_ip_ranges is Created" id="232dcb85-f3f8-42c3-a04c-4bbc32a318d9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createStaticIpRangeRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/static_ip_ranges</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a02058b4-7c0a-4668-9279-cc621e5e39df" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="bd9e3c46-a83b-476b-9825-7b8a03237151" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="29e7397c-d238-478e-ae5a-cf0e337fc792"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def preceedingStepIndex = context.currentStepIndex - 1
def preceedingStep = testCase.getTestStepAt(preceedingStepIndex)

def responseContent = preceedingStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createStaticIpResponse', responseContent)

def expectedExpectedResellerId = testCase.getPropertyValue('testResellerId')


// Expected Response format
//{
//  "StaticIPRange": {
//    "id": 1,
//    "reseller_id": 1,
//    "prefix": "10.10.0.0",
//    "prefix_length": 16,
//    "inactive_retention_period": -1
//  }
//}

assert jsonResponse != null
assert jsonResponse.StaticIPRange != null
assert jsonResponse.StaticIPRange.id != null
assert jsonResponse.StaticIPRange.reseller_id != null
assert jsonResponse.StaticIPRange.reseller_id == expectedExpectedResellerId
assert jsonResponse.StaticIPRange.prefix != null
assert jsonResponse.StaticIPRange.prefix_len != null
assert jsonResponse.StaticIPRange.inactive_retention_period != null

testSuite.setPropertyValue('testRadiusAttributeId', jsonResponse.RadiusAttribute.id)
</script></con:config></con:testStep><con:properties><con:property><con:name>createStaticIpRangeRequest</con:name><con:value>
{
	"StaticIPRange": {
		"reseller_id": 1,
		"prefix": "10.10.0.0",
		"prefix_length": 16,
		"inactive_retention_period": -1
	}
}
</con:value></con:property><con:property><con:name>createStaticIpResponse</con:name><con:value>{
    "Errors": {
        "syntax": "Invalid Syntax"
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="d2d565bc-b5aa-4898-a755-3a04473bc2a9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create statuses" searchProperties="true"><con:description>TestCase generated for REST Resource [/statuses] located at [/statuses]</con:description><con:settings/><con:testStep type="groovy" name="Given content for the request" id="e8edbf7c-c01e-4fc5-bfe6-5dc5a1434552"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testCase.testSuite

def resellerId = testCase.getPropertyValue('resellerId')

jsonRequestStr = """
{	"Status": {
		"name": "Active",
		"reseller_id": ${resellerId},
		"redirect_url": "string",
		"pool_name": "string",
		"static_override_pool": true,
		"type": "active"
	}
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('createStatusesRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /statuses is Created" id="f02225ab-44ac-4b4e-9b9d-1ff2f9a87106"><con:settings/><con:config service="Radius3 API" resourcePath="/statuses" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /statuses is Created" id="c6059817-0e9f-42a2-9107-a87ed8e3d2d7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createStatusesRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/statuses</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5e3b28f8-f3a9-4631-ba4c-e017f88fa000" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="488ccf99-a37b-4d86-a764-a4dffc8f6ae3" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="3663ba5e-e04d-4ed1-89fa-9e42bbb4c2e6"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def preceedingStepIndex = context.currentStepIndex - 1
def preceedingStep = testCase.getTestStepAt(preceedingStepIndex)

def responseContent = preceedingStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createStatusResponse', responseContent)

// Expected Response format
//{
//  "Status": {
//    "id": 1,
//    "name": "Active",
//    "reseller_id": 1,
//    "redirect_url": "string",
//    "pool_name": "string",
//    "static_override_pool": true,
//    "type": "active"
//  }
//}

assert jsonResponse != null
assert jsonResponse.Status != null
assert jsonResponse.Status.id != null
assert jsonResponse.Status.name != null
assert jsonResponse.Status.reseller_id != null
assert jsonResponse.Status.redirect_url != null
assert jsonResponse.Status.pool_name != null
assert jsonResponse.Status.static_override_pool != null
assert jsonResponse.Status.type != null

testSuite.setPropertyValue('testRadiusAttributeId', jsonResponse.RadiusAttribute.id)
</script></con:config></con:testStep><con:properties><con:property><con:name>createStatusesRequest</con:name><con:value>
{	"Status": {
		"name": "Active",
		"reseller_id": 1,
		"redirect_url": "string",
		"pool_name": "string",
		"static_override_pool": true,
		"type": "active"
	}
}
</con:value></con:property><con:property><con:name>resellerId</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="e1a45e5a-0cc2-4390-9770-1d43c2b6edf1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create transient packages" searchProperties="true"><con:description>TestCase generated for REST Resource [/transient_packages] located at [/transient_packages]</con:description><con:settings/><con:testStep type="groovy" name="Given content for the request" id="7b202d5f-09ad-4858-955a-a0c7ace91157"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testCase.testSuite

jsonRequestStr = """
{  "Transient Package": {
    "user_id": 1,
    "start": {},
    "end": {},
    "precedence": 5,
    "mode": "Override",
    "speed_up": 60,
    "speed_down": 60,
    "upload_limit": 250,
    "download_limit": 250
  }
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('createTransientPackageRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /transient_packages is Created" id="5743b106-5a60-48ce-85ef-f538dec7e217"><con:settings/><con:config service="Radius3 API" resourcePath="/transient_packages" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /transient_packages is Created" id="49e3212c-4b4d-4508-9e8a-a56d642c0037" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createTransientPackageRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/transient_packages</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6661bf91-d79b-4969-9db6-789f466abc83" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="ba5dfe35-087a-4855-9d33-664536eb7960" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="36ad2079-cda8-4c3d-871c-d25b93019cf0"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('transientPackagesJson', responseContent)

// Expected Response format
//{  "Transient Package": {
//    "id": 1,
//    "user_id": 1,
//    "start": {},
//    "end": {},
//    "precedence": 5,
//    "mode": "Override",
//    "speed_up": 60,
//    "speed_down": 60,
//    "upload_limit": 250,
//    "download_limit": 250
//  }
//}

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse."Transient Package" != null
assert jsonResponse."Transient Package".id != null
assert jsonResponse."Transient Package".user_id != null
assert jsonResponse."Transient Package".start != null
assert jsonResponse."Transient Package".end != null
assert jsonResponse."Transient Package".precedence != null
assert jsonResponse."Transient Package".mode != null
assert jsonResponse."Transient Package".speed_up != null
assert jsonResponse."Transient Package".speed_down != null
assert jsonResponse."Transient Package".upload_limit != null
assert jsonResponse."Transient Package".download_limit != null

testSuite.setPropertyValue('testRadiusAttributeId', jsonResponse.RadiusAttribute.id)

</script></con:config></con:testStep><con:properties><con:property><con:name>createTransientPackageRequest</con:name><con:value>
{  "Transient Package": {
    "user_id": 1,
    "start": {},
    "end": {},
    "precedence": 5,
    "mode": "Override",
    "speed_up": 60,
    "speed_down": 60,
    "upload_limit": 250,
    "download_limit": 250
  }
}
</con:value></con:property><con:property><con:name>transientPackagesJson</con:name><con:value>{
    "Errors": {
        "syntax": "Invalid Syntax"
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="f428c78d-37a1-4f2d-96bd-82cb6841b59d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create users" searchProperties="true"><con:description>TestCase generated for REST Resource [/users] located at [/users]</con:description><con:settings/><con:testStep type="groovy" name="Given content for the request" id="fd1c3235-a6ba-4dd7-85a2-3259eea51299"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testCase.testSuite

def timeStamp = new Date().format("HHmmssSSS")
def testUsername = "TEST" + timeStamp
testCase.setPropertyValue('testUsername', testUsername)
def testPassword = UUID.randomUUID().toString()
def testResellerId = testCase.getPropertyValue('testResellerId')
def testStatusId = testCase.getPropertyValue('testStatusId')

jsonRequestStr = """{
	"User": {
		"username": "${testUsername.padRight(20,'0')}",
		"password": "01234567890123456789",
		"hashed_password": false,
		"base_speed_up": 60,
		"base_speed_down": 60,
		"session_limit": 1,
		"base_upload_limit": 250,
		"base_download_limit": 250,
		"lock": false,
		"reseller_id": ${testResellerId},
		"status_id": ${testStatusId}
	}
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('createUserRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /users is Created" id="227d0ff9-5549-4a72-9d2b-ce6b2e81f88d"><con:settings/><con:config service="Radius3 API" resourcePath="/users" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /users is Created" id="aceb84e2-0111-4372-893b-26e6e5c272b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createUserRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0308bf6f-7a1c-4f12-b4bd-5656edada603" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="90201e11-763e-40a2-bb7d-b7092e847611" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="0f9f503c-8228-426f-93b8-4a9e5e64e6b1"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def preceedingStepIndex = context.currentStepIndex - 1
def preceedingStep = testCase.getTestStepAt(preceedingStepIndex)

def responseContent = preceedingStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createNasResponse', responseContent)

def expectedNasShortName = testCase.getPropertyValue('testNasShortName')
def expectedNasSecret = testCase.getPropertyValue('testNasSecret')

// Expected Response format
//{
//  "User": {
//    "id": 1,
//    "username": "ABCDEFGHIJKLMNOPQRST",
//    "password": "ABCDEFGHIJKLMNOPQRST",
//    "hashed_password": false,
//    "base_speed_up": 60,
//    "base_speed_down": 60,
//    "session_limit": 1,
//    "static_ip": "1.1.1.1",
//    "base_upload_limit": 250,
//    "base_download_limit": 250,
//    "lock": false,
//    "pending": false,
//    "reseller_id": 1,
//    "status_id": 1,
//    "usage": {
//      "login": 1,
//      "logintime": 60,
//      "up": 10,
//      "down": 10,
//      "total": 20
//    },
//    "session": {
//      "id": 0
//    },
//    "speed_up": 60,
//    "speed_down": 60,
//    "upload_limit": 250,
//    "download_limit": 250,
//    "Status": {
//      "id": 1,
//      "name": "Active",
//      "reseller_id": 1,
//      "redirect_url": "string",
//      "pool_name": "string",
//      "static_override_pool": true,
//      "type": "active"
//    },
//    "TransientPackages": [
//      {
//        "id": 1,
//        "user_id": 1,
//        "start": {},
//        "end": {},
//        "precedence": 5,
//        "mode": "Override",
//        "speed_up": 60,
//        "speed_down": 60,
//        "upload_limit": 250,
//        "download_limit": 250
//      }
//    ],
//    "RadiusAttributes": [
//      {
//        "id": 1,
//        "user_id": 1,
//        "type": "radreply",
//        "attribute": "string",
//        "op": ":=",
//        "value": "test_pool"
//      }
//    ]
//  }
//}

assert jsonResponse != null
assert jsonResponse.User != null
assert jsonResponse.TransientPackages != null
assert jsonResponse.RadiusAttributes != null

testSuite.setPropertyValue('testUSerId', jsonResponse.User.id)
testSuite.setPropertyValue('testUSerId', jsonResponse.TransientPackages.id)
testSuite.setPropertyValue('testUSerId', jsonResponse.RadiusAttributes.id)
</script></con:config></con:testStep><con:properties><con:property><con:name>testUsername</con:name><con:value>TEST094451651</con:value></con:property><con:property><con:name>createUserRequest</con:name><con:value>{
	"User": {
		"username": "TEST0944516510000000",
		"password": "01234567890123456789",
		"hashed_password": false,
		"base_speed_up": 60,
		"base_speed_down": 60,
		"session_limit": 1,
		"base_upload_limit": 250,
		"base_download_limit": 250,
		"lock": false,
		"reseller_id": 37,
		"status_id": 279
	}
}
</con:value></con:property><con:property><con:name>testResellerId</con:name><con:value>37</con:value></con:property><con:property><con:name>testStatusId</con:name><con:value>279</con:value></con:property></con:properties></con:testCase><con:testCase id="27918493-82bb-4e59-b531-0bc45e1c3931" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create webhook endpoints" searchProperties="true"><con:description>TestCase generated for REST Resource [/webhook_endpoints] located at [/webhook_endpoints]</con:description><con:settings/><con:testStep type="groovy" name="Given content for the request" id="6174a4d3-fee0-47b8-948d-5e1326869885"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testCase.testSuite

def testResellerId = testCase.getPropertyValue('testResellerId')

jsonRequestStr = """{
  "WebhookEndpoint": {
    "endpoint": "https://example.com/webhook",
    "reseller_id": ${testResellerId},
    "disabled": true,
    "EventTypes": [
      {}
    ]
  }
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('WebhookEndpointRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /webhook_endpoints is Created" id="da0940e5-fa8b-48f8-b8dd-0099bc962d5f"><con:settings/><con:config service="Radius3 API" resourcePath="/webhook_endpoints" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /webhook_endpoints is Created" id="5129bef7-66ed-4d38-b3f4-17d00ec7c4e3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createWebhookEndpointRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/webhook_endpoints</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="bbb521ef-3caf-49b5-b445-f112f5336034" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="231a70f1-c659-4004-aadf-f03b5b7a52dc" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="bf0472fb-bf82-423c-9e21-8ef2826178bb"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def preceedingStepIndex = context.currentStepIndex - 1
def preceedingStep = testCase.getTestStepAt(preceedingStepIndex)

def responseContent = preceedingStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testSuite.setPropertyValue('createNasResponse', responseContent)

def expectedNasShortName = testCase.getPropertyValue('testNasShortName')
def expectedNasSecret = testCase.getPropertyValue('testNasSecret')

// Expected Response format
//{
//  "WebhookEndpoint": {
//    "id": 1,
//    "endpoint": "https://example.com/webhook",
//    "reseller_id": 1,
//    "disabled": true,
//    "EventTypes": [
//      {
//        "id": 1,
//        "name": "user.download_limit_75"
//      }
//    ]
//  }
//}

assert jsonResponse != null
assert jsonResponse.WebhookEndpoint.id != null
assert jsonResponse.WebhookEndpoint.endpoint != null
assert jsonResponse.WebhookEndpoint.reseller_id != null
assert jsonResponse.WebhookEndpoint.disabled != null
assert jsonResponse.WebhookEndpoint.EventTypes != null
assert jsonResponse.WebhookEndpoint.EventTypes.id != null
assert jsonResponse.WebhookEndpoint.EventTypes.name != null

testSuite.setPropertyValue('testWebhookEndpointId', jsonResponse.WebhookEndpoint.id)


</script></con:config></con:testStep><con:properties><con:property><con:name>WebhookEndpointRequest</con:name><con:value>{
  "WebhookEndpoint": {
    "endpoint": "https://example.com/webhook",
    "reseller_id": 37,
    "disabled": true,
    "EventTypes": [
      {}
    ]
  }
}
</con:value></con:property><con:property><con:name>testResellerId</con:name><con:value>37</con:value></con:property></con:properties></con:testCase><con:testCase id="6112c58c-bafd-40ea-8362-911ea2deb2f3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve admin for userID" searchProperties="true"><con:description>TestCase generated for REST Resource [/admins/{id}] located at [/admins/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid adminId is available" id="8b2a7f85-6187-440b-96f2-fa93dbf93236"><con:settings/><con:config><script>
assert testRunner.testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /admins/{id} is Retrieved" id="67de03d2-ab05-45bc-8e07-7c4a7beb8387"><con:settings/><con:config service="Radius3 API" resourcePath="/admins/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /admins/{id} is Retrieved" id="2d95123e-a165-4f12-942f-f4ccc2c997cb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/admins/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9aba4db0-f41d-4ec0-ab9d-b6224b82492a" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="2c0dba8a-a54c-41eb-886e-b87f4a2bb05f" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="fff4fffa-9483-4745-af58-355eb52c884e"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('adminsForIdResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.Admin != null
assert jsonResponse.Admin.id != null
assert jsonResponse.Admin.username != null
assert jsonResponse.Admin.super != null
</script></con:config></con:testStep><con:properties><con:property><con:name>adminId</con:name><con:value>5</con:value></con:property><con:property><con:name>adminsForIdResponse</con:name><con:value>{
    "Admin": {
        "id": 5,
        "username": "martin",
        "super": true,
        "Resellers": []
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="40dfa7ae-5afb-456c-9516-1d25b9e2456d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve audit entries for userID" searchProperties="true"><con:description>TestCase generated for REST Resource [/audits/{id}] located at [/audits/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="ffc226fb-a662-4a63-add8-f1684832b9db"><con:settings/><con:config><script>
assert testRunner.testCase.getPropertyValue('auditEntryId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /audits/{id} is Retrieved" id="d4920d56-5264-4cf8-b2e8-0e4c99bfb6f9"><con:settings/><con:config service="Radius3 API" resourcePath="/audits/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /audits/{id} is Retrieved" id="f0910fbd-2d91-4011-8e44-7c2647431270" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/audits/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="dc7c6a7a-40aa-4329-8d66-ca585b90d942" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="c88c3b63-66ab-4899-8d61-cd9c31c58e16" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="fb60dd5f-99bd-448b-beca-9a0d98e233b4"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('auditEntryForIdResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.Audits != null

// Expected response format 
//	"event": "EDIT",
//	"model": "User",
//	"entity_id": 3925,
//	"request_id": "5cadf286-9b10-4947-8a66-31ecb03a6a9c",
//	"json_object": "{\"User\":{\"id\":\"3925\",\"username\":\"02Q4X5AR1QNP0AQ9IZR0\",\"password\":\"862807D4D88978966D13\",\"hashed_password\":true,\"base_speed_up\":\"60\",\"base_speed_down\":\"60\",\"session_limit\":\"1\",\"static_ip\":null,\"base_upload_limit\":\"-1\",\"base_download_limit\":\"-1\",\"lock\":false,\"pending\":true,\"reseller_id\":\"359\",\"status_id\":\"279\",\"status_changed\":null,\"deleted\":false,\"deleted_date\":null,\"usage\":{\"login\":\"1\",\"logintime\":null,\"up\":\"92233722589\",\"down\":\"8589934369\",\"total\":\"100823656958\"},\"session\":[{\"acctuniqueid\":\"36d88b8586ba1fe220204bb5ddb5cf58\",\"framedipaddress\":\"\",\"calledstationid\":\"callingid\",\"callingstationid\":\"\"}],\"speed_up\":\"60\",\"speed_down\":\"60\",\"upload_limit\":\"-1\",\"download_limit\":\"-1\"}}",
//	"description": "will",
//	"source_id": 2,
//	"created": "2019-04-10T13:41:26Z",
//	"AuditDeltas": [
//		{
//			"id": "5cadf286-988c-45d9-8056-31ecb03a6a9c",
//			"audit_id": "5cadf286-c4f8-4809-9ecb-31ecb03a6a9c",
//			"property_name": "password",
//			"old_value": "XM.9nvToay50w",
//			"new_value": "862807D4D88978966D13"
//		},
//		{
//			"id": "5cadf286-f2c8-4b1c-b91f-31ecb03a6a9c",
//			"audit_id": "5cadf286-c4f8-4809-9ecb-31ecb03a6a9c",
//			"property_name": "pending",
//			"old_value": "",
//			"new_value": 1
//		}
//	]
//}, ...

for(def entry : jsonResponse.Audits) {
	try {
		assert entry.id != null
		assert entry.event != null
		assert entry.model != null
		assert entry.entity_id != null
		assert entry.request_id != null
		assert entry.json_object != null
		assert entry.description != null
		assert entry.source_id != null
		assert entry.created != null
		assert entry.AuditDeltas != null
		for(def delta : entry.AuditDeltas) {
			assert delta != null
			assert delta.id != null
			assert delta.audit_id != null
			assert delta.property_name != null
//			assert delta.old_value != null
//			assert delta.new_value != null
		}
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>auditEntryForIdResponse</con:name><con:value>{
    "Audits": [
        {
            "id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
            "event": "CREATE",
            "model": "User",
            "entity_id": 9120,
            "request_id": "5cc16a6e-0b1c-46df-a235-6a6db03a6a9c",
            "json_object": "{\"User\":{\"id\":\"9120\",\"username\":\"D314406DD3A966C38146\",\"password\":\"BF63236CEB98007FD55A\",\"hashed_password\":false,\"base_speed_up\":\"10\",\"base_speed_down\":\"10\",\"session_limit\":\"1\",\"static_ip\":null,\"base_upload_limit\":\"100\",\"base_download_limit\":\"100\",\"lock\":false,\"pending\":true,\"reseller_id\":\"359\",\"status_id\":\"279\",\"status_changed\":null,\"deleted\":false,\"deleted_date\":null,\"usage\":{\"login\":0,\"logintime\":0,\"up\":0,\"down\":0,\"total\":0},\"session\":[],\"speed_up\":\"10\",\"speed_down\":\"10\",\"upload_limit\":\"100\",\"download_limit\":\"100\"}}",
            "description": "jim",
            "source_id": 3,
            "created": "2019-04-25T08:06:06Z",
            "AuditDeltas": [
                {
                    "id": "5cc16a6e-0810-4b2a-8d30-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "hashed_password",
                    "old_value": "",
                    "new_value": ""
                },
                {
                    "id": "5cc16a6e-1488-410f-aa83-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "status_changed",
                    "old_value": "",
                    "new_value": null
                },
                {
                    "id": "5cc16a6e-1e14-4ef7-8ebe-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "id",
                    "old_value": "",
                    "new_value": 9120
                },
                {
                    "id": "5cc16a6e-1e94-4b7f-835b-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "static_ip",
                    "old_value": "",
                    "new_value": null
                },
                {
                    "id": "5cc16a6e-4774-4ef2-8dfb-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "pending",
                    "old_value": "",
                    "new_value": 1
                },
                {
                    "id": "5cc16a6e-4adc-4d16-93b7-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "base_speed_up",
                    "old_value": "",
                    "new_value": 10
                },
                {
                    "id": "5cc16a6e-5560-45c6-8974-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "deleted",
                    "old_value": "",
                    "new_value": ""
                },
                {
                    "id": "5cc16a6e-60fc-4083-ab65-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "base_upload_limit",
                    "old_value": "",
                    "new_value": 100
                },
                {
                    "id": "5cc16a6e-797c-4140-9a8a-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "username",
                    "old_value": "",
                    "new_value": "D314406DD3A966C38146"
                },
                {
                    "id": "5cc16a6e-8c7c-439a-af8e-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "base_speed_down",
                    "old_value": "",
                    "new_value": 10
                },
                {
                    "id": "5cc16a6e-901c-44f3-9855-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "reseller_id",
                    "old_value": "",
                    "new_value": 359
                },
                {
                    "id": "5cc16a6e-950c-4ef4-a8d1-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "deleted_date",
                    "old_value": "",
                    "new_value": null
                },
                {
                    "id": "5cc16a6e-a1d4-4853-9039-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "base_download_limit",
                    "old_value": "",
                    "new_value": 100
                },
                {
                    "id": "5cc16a6e-c1c0-4a0f-b3f8-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "password",
                    "old_value": "",
                    "new_value": "BF63236CEB98007FD55A"
                },
                {
                    "id": "5cc16a6e-ce1c-4692-a41d-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "session_limit",
                    "old_value": "",
                    "new_value": 1
                },
                {
                    "id": "5cc16a6e-d220-4849-8af0-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "status_id",
                    "old_value": "",
                    "new_value": 279
                },
                {
                    "id": "5cc16a6e-e248-47f4-87b4-6a6db03a6a9c",
                    "audit_id": "5cc16a6e-4e04-4c51-93d4-6a6db03a6a9c",
                    "property_name": "lock",
                    "old_value": "",
                    "new_value": ""
                }
            ]
        },
        {
            "id": "5cc07f30-15e0-4795-895a-44a5b03a6a9c",
            "event": "CREATE",
            "model": "Admin",
            "entity_id": 63,
            "request_id": "5cc07f30-a178-4f32-9bde-44a5b03a6a9c",
            "json_object": "{\"Admin\":{\"id\":\"63\",\"username\":\"Test Admin 7ffab2c9-f1dd-49b7-92ea-6c2732caeff7\",\"password\":\"$2a$10$ZI.KJ0Jy\\\/oVHgeeqVNuaougLsbUnQotUBbg2.sPmvgOcsmXA6kWQS\",\"super\":true,\"deleted\":false,\"deleted_date\":null,\"Reseller\":\"\"}}",
            "description": "martin",
            "source_id": 5,
            "created": "2019-04-24T15:22:24Z",
            "AuditDeltas": [
                {
                    "id": "5cc07f30-178c-4842-be53-44a5b03a6a9c",
                    "audit_id": "5cc07f30-15e0-4795-895a-44a5b03a6a9c",
                    "property_name": "deleted",
                    "old_value": "",
                    "new_value": ""
                },
                {
                    "id": "5cc07f30-4118-4133-9c05-44a5b03a6a9c",
                    "audit_id": "5cc07f30-15e0-4795-895a-44a5b03a6a9c",
                    "property_name": "username",
                    "old_value": "",
                    "new_value": "Test Admin 7ffab2c9-f1dd-49b7-92ea-6c2732caeff7"
                },
                {
                    "id": "5cc07f30-592c-4dac-8254-44a5b03a6a9c",
                    "audit_id": "5cc07f30-15e0-4795-895a-44a5b03a6a9c",
                    "property_name": "deleted_date",
                    "old_value": "",
                    "new_value": null
                },
                {
                    "id": "5cc07f30-8830-45ed-a88f-44a5b03a6a9c",
                    "audit_id": "5cc07f30-15e0-4795-895a-44a5b03a6a9c",
                    "property_name": "password",
                    "old_value": "",
                    "new_value": "$2a$10$ZI.KJ0Jy\/oVHgeeqVNuaougLsbUnQotUBbg2.sPmvgOcsmXA6kWQS"
                },
                {
                    "id": "5cc07f30-9d88-4dea-9f0e-44a5b03a6a9c",
                    "audit_id": "5cc07f30-15e0-4795-895a-44a5b03a6a9c",
                    "property_name": "Reseller",
                    "old_value": "",
                    "new_value": ""
                },
                {
                    "id": "5cc07f30-d45c-46f6-966c-44a5b03a6a9c",
                    "audit_id": "5cc07f30-15e0-4795-895a-44a5b03a6a9c",
                    "property_name": "super",
                    "old_value": "",
                    "new_value": 1
                },
                {
                    "id": "5cc07f30-eb8c-4f42-933d-44a5b03a6a9c",
                    "audit_id": "5cc07f30-15e0-4795-895a-44a5b03a6a9c",
                    "property_name": "id",
                    "old_value": "",
                    "new_value": 63
                }
            ]
        },
        {
            "id": "5cc07f30-3f14-46d9-829f-44a5b03a6a9c",
            "event": "CREATE",
            "model": "Admin",
            "entity_id": 64,
            "request_id": "5cc07f30-b8b4-46d3-8d80-44a5b03a6a9c",
            "json_object": "{\"Admin\":{\"id\":\"64\",\"username\":\"Test Admin 13e08ba9-64dc-4bc4-bd44-17485482e92e\",\"password\":\"$2a$10$h2DNPYQX5a7BSW6TAt7lx.GvjhfP4JLSrbF5LY5O9a6.UD19QtziS\",\"super\":true,\"deleted\":false,\"deleted_date\":null,\"Reseller\":\"\"}}",
            "description": "martin",
            "source_id": 5,
            "created": "2019-04-24T15:22:24Z",
            "AuditDeltas": [
                {
                    "id": "5cc07f30-1a38-46a3-bc18-44a5b03a6a9c",
                    "audit_id": "5cc07f30-3f14-46d9-829f-44a5b03a6a9c",
                    "property_name": "id",
                    "old_value": "",
                    "new_value": 64
                },
                {
                    "id": "5cc07f30-1a54-4a24-8dd9-44a5b03a6a9c",
                    "audit_id": "5cc07f30-3f14-46d9-829f-44a5b03a6a9c",
                    "property_name": "Reseller",
                    "old_value": "",
                    "new_value": ""
                },
                {
                    "id": "5cc07f30-1b40-4be9-81a0-44a5b03a6a9c",
                    "audit_id": "5cc07f30-3f14-46d9-829f-44a5b03a6a9c",
                    "property_name": "super",
                    "old_value": "",
                    "new_value": 1
                },
                {
                    "id": "5cc07f30-7f00-4acc-ac9e-44a5b03a6a9c",
                    "audit_id": "5cc07f30-3f14-46d9-829f-44a5b03a6a9c",
                    "property_name": "username",
                    "old_value": "",
                    "new_value": "Test Admin 13e08ba9-64dc-4bc4-bd44-17485482e92e"
                },
                {
                    "id": "5cc07f30-8710-4e95-9095-44a5b03a6a9c",
                    "audit_id": "5cc07f30-3f14-46d9-829f-44a5b03a6a9c",
                    "property_name": "deleted",
                    "old_value": "",
                    "new_value": ""
                },
                {
                    "id": "5cc07f30-c6e0-4924-ba05-44a5b03a6a9c",
                    "audit_id": "5cc07f30-3f14-46d9-829f-44a5b03a6a9c",
                    "property_name": "password",
                    "old_value": "",
                    "new_value": "$2a$10$h2DNPYQX5a7BSW6TAt7lx.GvjhfP4JLSrbF5LY5O9a6.UD19QtziS"
                },
                {
                    "id": "5cc07f30-caa4-4061-b6fc-44a5b03a6a9c",
                    "audit_id": "5cc07f30-3f14-46d9-829f-44a5b03a6a9c",
                    "property_name": "deleted_date",
                    "old_value": "",
                    "new_value": null
                }
            ]
        },
        {
            "id": "5cc07f2f-7a24-4097-8a31-2540b03a6a9c",
            "event": "CREATE",
            "model": "Reseller",
            "entity_id": 417,
            "request_id": "5cc07f2f-0d8c-46e9-b7af-2540b03a6a9c",
            "json_object": "{\"Reseller\":{\"id\":\"417\",\"name\":\"Test Reseller-16:22:07.473\",\"deleted\":false,\"deleted_date\":null,\"Admin\":\"\"}}",
            "description": "martin",
            "source_id": 5,
            "created": "2019-04-24T15:22:23Z",
            "AuditDeltas": [
                {
                    "id": "5cc07f2f-20a0-4f70-9b1a-2540b03a6a9c",
                    "audit_id": "5cc07f2f-7a24-4097-8a31-2540b03a6a9c",
                    "property_name": "Admin",
                    "old_value": "",
                    "new_value": ""
                },
                {
                    "id": "5cc07f2f-470c-4a6d-96a5-2540b03a6a9c",
                    "audit_id": "5cc07f2f-7a24-4097-8a31-2540b03a6a9c",
                    "property_name": "name",
                    "old_value": "",
                    "new_value": "Test Reseller-16:22:07.473"
                },
                {
                    "id": "5cc07f2f-9720-447c-8ab9-2540b03a6a9c",
                    "audit_id": "5cc07f2f-7a24-4097-8a31-2540b03a6a9c",
                    "property_name": "deleted",
                    "old_value": "",
                    "new_value": ""
                },
                {
                    "id": "5cc07f2f-d6f0-41c8-b371-2540b03a6a9c",
                    "audit_id": "5cc07f2f-7a24-4097-8a31-2540b03a6a9c",
                    "property_name": "id",
                    "old_value": "",
                    "new_value": 417
                },
                {
                    "id": "5cc07f2f-dd0c-4c0e-a2d1-2540b03a6a9c",
                    "audit_id": "5cc07f2f-7a24-4097-8a31-2540b03a6a9c",
                    "property_name": "deleted_date",
                    "old_value": "",
                    "new_value": null
                }
            ]
        },
        {
            "id": "5cc07f2f-da20-4c06-bff8-2540b03a6a9c",
            "event": "CREATE",
            "model": "Nas",
            "entity_id": 31,
            "request_id": "5cc07f2f-5eb0-46c5-bd45-2540b03a6a9c",
            "json_object": "{\"Nas\":{\"id\":\"31\",\"nasname\":\"1.1.1.1\",\"shortname\":\"NAS-758e533f\",\"type\":\"other\",\"ports\":null,\"secret\":\"e2edeb94\",\"server\":null,\"community\":null,\"description\":\"RADIUS Client 16:22:07.314\"}}",
            "description": "martin",
            "source_id": 5,
            "created": "2019-04-24T15:22:23Z",
            "AuditDeltas": [
                {
                    "id": "5cc07f2f-0524-47a6-ae53-2540b03a6a9c",
                    "audit_id": "5cc07f2f-da20-4c06-bff8-2540b03a6a9c",
                    "property_name": "ports",
                    "old_value": "",
                    "new_value": null
                },
                {
                    "id": "5cc07f2f-2cbc-4429-8bca-2540b03a6a9c",
                    "audit_id": "5cc07f2f-da20-4c06-bff8-2540b03a6a9c",
                    "property_name": "type",
                    "old_value": "",
                    "new_value": "other"
                },
                {
                    "id": "5cc07f2f-46b0-4753-b0fc-2540b03a6a9c",
                    "audit_id": "5cc07f2f-da20-4c06-bff8-2540b03a6a9c",
                    "property_name": "nasname",
                    "old_value": "",
                    "new_value": "1.1.1.1"
                },
                {
                    "id": "5cc07f2f-4704-4d08-9442-2540b03a6a9c",
                    "audit_id": "5cc07f2f-da20-4c06-bff8-2540b03a6a9c",
                    "property_name": "secret",
                    "old_value": "",
                    "new_value": "e2edeb94"
                },
                {
                    "id": "5cc07f2f-5318-47b8-b7b9-2540b03a6a9c",
                    "audit_id": "5cc07f2f-da20-4c06-bff8-2540b03a6a9c",
                    "property_name": "description",
                    "old_value": "",
                    "new_value": "RADIUS Client 16:22:07.314"
                },
                {
                    "id": "5cc07f2f-6dcc-4486-ae38-2540b03a6a9c",
                    "audit_id": "5cc07f2f-da20-4c06-bff8-2540b03a6a9c",
                    "property_name": "community",
                    "old_value": "",
                    "new_value": null
                },
                {
                    "id": "5cc07f2f-8bb0-44ef-9d20-2540b03a6a9c",
                    "audit_id": "5cc07f2f-da20-4c06-bff8-2540b03a6a9c",
                    "property_name": "shortname",
                    "old_value": "",
                    "new_value": "NAS-758e533f"
                },
                {
                    "id": "5cc07f2f-a504-4605-beba-2540b03a6a9c",
                    "audit_id": "5cc07f2f-da20-4c06-bff8-2540b03a6a9c",
                    "property_name": "server",
                    "old_value": "",
                    "new_value": null
                },
                {
                    "id": "5cc07f2f-ec34-4b8c-afec-2540b03a6a9c",
                    "audit_id": "5cc07f2f-da20-4c06-bff8-2540b03a6a9c",
                    "property_name": "id",
                    "old_value": "",
                    "new_value": 31
                }
            ]
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property><con:property><con:name>auditEntryId</con:name><con:value/></con:property></con:properties></con:testCase><con:testCase id="57611411-31ec-4a87-859c-f891b5d795b6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve event type for userID" searchProperties="true"><con:description>TestCase generated for REST Resource [/event_types/{id}] located at [/event_types/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="9770b145-fbc0-4e87-a178-805649e3af28"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /event_types/{id} is Retrieved" id="39b84c9b-abfd-4443-bcaf-972e642ec522"><con:settings/><con:config service="Radius3 API" resourcePath="/event_types/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /event_types/{id} is Retrieved" id="3f04b53b-748e-45d2-9875-f847c866ff11" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/event_types/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="19311759-0d9b-478c-9672-1cd2ed2978cb" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="2a6457df-9722-410d-aba0-7904d05d1760" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="de22d584-7486-4601-89d5-3de4a6abfeee"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('eventTypeForIdResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.EventTypes != null

// Expected Response format
//{   "EventTypes": [   {
//      "id": 1,
//      "name": "user.download_limit_75"
//   }],
//   "meta":    {
//      "page": 1,
//      "limit": 5
//   }
//}

for(def entry : jsonResponse.EventTypes) {
	try {
		assert entry.id != null
		assert entry.name != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>eventTypeForIdResponse</con:name><con:value>{
    "EventTypes": [
        {
            "id": 1,
            "name": "user.download_limit_75"
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="6860b08e-6b84-4189-8a2d-97e54ae481fe" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve event for userID" searchProperties="true"><con:description>TestCase generated for REST Resource [/events/{id}] located at [/events/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="b0c2a2de-f540-422f-822f-cbb829a60afe"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /events/{id} is Retrieved" id="5f936f20-aae9-4c9e-99fb-beeed3b67846"><con:settings/><con:config service="Radius3 API" resourcePath="/events/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /events/{id} is Retrieved" id="f179b959-03a4-46f9-8bf5-f6c754a61ac9" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/events/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="afd4d155-84f5-4f35-8c77-bd47b8c95db7" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="c6abf370-509e-4714-8cb4-d30085c72c3b" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="1a65fa0c-3d63-4732-859b-007c1b6f4d7e"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('eventEntryForIdResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.Events != null

// Expected Response format
//{	"Events": [
//		{	"id": 5,
//			"datetime": "1970-01-01T00:00:00Z",
//			"event_type_id": 1,
//			"user_id": 670
//		}, ...
//	],
//	"meta": {
//		"page": 1,
//		"limit": 5
//	}
//}

for(def entry : jsonResponse.Events) {
	try {
		assert entry.id != null
		assert entry.datetime != null
		assert entry.event_type_id != null
		assert entry.user_id != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>eventEntryForIdResponse</con:name><con:value>{
    "Events": [
        {
            "id": 5,
            "datetime": "1970-01-01T00:00:00Z",
            "event_type_id": 1,
            "user_id": 670
        },
        {
            "id": 6,
            "datetime": "1970-01-01T00:00:00Z",
            "event_type_id": 1,
            "user_id": 670
        },
        {
            "id": 7,
            "datetime": "1970-01-01T00:00:00Z",
            "event_type_id": 1,
            "user_id": 670
        },
        {
            "id": 8,
            "datetime": "1970-01-01T00:00:00Z",
            "event_type_id": 1,
            "user_id": 670
        },
        {
            "id": 9,
            "datetime": "1970-01-01T00:00:00Z",
            "event_type_id": 1,
            "user_id": 670
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="1fd8bdeb-533a-4122-bc51-020f93fec71b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve nas for userID" searchProperties="true"><con:description>TestCase generated for REST Resource [/nas/{id}] located at [/nas/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="f20e8767-2906-4a8f-bac2-ae95592e2bd1"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /nas/{id} is Retrieved" id="8608b807-19d0-4e8b-b9c9-f6c4f47e4f16"><con:settings/><con:config service="Radius3 API" resourcePath="/nas/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /nas/{id} is Retrieved" id="e9d836fb-a7ec-4e11-9ec5-ef5e1b5fece1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/nas/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed4f2046-4874-4a02-a581-9c6b2da38d7b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="f0c40a20-0d03-4f4c-9a01-1b6f3deea9da" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="f6a7a680-2234-4d9d-946e-e66c693f8e8f"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('nasFromIdResponse', responseContent)

// Expected Response format
//{"Nas": {
//   "id": 3,
//   "nasname": "185.6.154.1",
//   "shortname": "pppoe1",
//   "type": "other",
//   "ports": null,
//   "secret": "testing123",
//   "server": null,
//   "community": null,
//   "description": "RADIUS Client"
//}}

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.Nas != null
assert jsonResponse.Nas.id != null
assert jsonResponse.Nas.nasname != null
assert jsonResponse.Nas.shortname != null
assert jsonResponse.Nas.type != null
assert jsonResponse.Nas.secret != null
assert jsonResponse.Nas.description != null
</script></con:config></con:testStep><con:properties><con:property><con:name>nasId</con:name><con:value>3</con:value></con:property><con:property><con:name>nasFromIdResponse</con:name><con:value>{
    "Nas": {
        "id": 3,
        "nasname": "185.6.154.1",
        "shortname": "pppoe1",
        "type": "other",
        "ports": null,
        "secret": "testing123",
        "server": null,
        "community": null,
        "description": "RADIUS Client"
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="14644bda-ebc0-4377-aa6d-9a7289f7518f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve radius attributes for userID" searchProperties="true"><con:description>TestCase generated for REST Resource [/radius_attributes/{id}] located at [/radius_attributes/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="2cf83ca4-c589-43c3-8119-835596ac15b5"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /radius_attributes/{id} is Retrieved" id="bdcc7f25-b3de-4eec-8483-43398cd76e2a"><con:settings/><con:config service="Radius3 API" resourcePath="/radius_attributes/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /radius_attributes/{id} is Retrieved" id="298dd407-ddd0-40ea-9b48-8280a4e939ce" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/radius_attributes/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="767868b8-7543-431b-9807-22f2d3761e8b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="f2815fe9-2bba-4c8d-ba8e-6a9187808b82" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="fe395ee9-be6e-4051-a8c9-924244734c34"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('radiusAttributeForIdResponse', responseContent)

// Espected response
//{"RadiusAttribute": {
//   "id": 54,
//   "user_id": 670,
//   "type": "radreply",
//   "attribute": "Cisco-AVPair",
//   "op": "+=",
//   "value": "ip:qos-policy-in=add-class(sub, (class-default), police(20000000))"
//}}

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.RadiusAttribute != null
assert jsonResponse.RadiusAttribute.id != null
assert jsonResponse.RadiusAttribute.user_id != null
assert jsonResponse.RadiusAttribute.type != null
assert jsonResponse.RadiusAttribute.attribute != null
assert jsonResponse.RadiusAttribute.op != null
assert jsonResponse.RadiusAttribute.value != null
</script></con:config></con:testStep><con:properties><con:property><con:name>attributeId</con:name><con:value>54</con:value></con:property><con:property><con:name>radiusAttributeForIdResponse</con:name><con:value>{
    "RadiusAttribute": {
        "id": 54,
        "user_id": 670,
        "type": "radreply",
        "attribute": "Cisco-AVPair",
        "op": "+=",
        "value": "ip:qos-policy-in=add-class(sub, (class-default), police(20000000))"
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="69359d7d-242d-407d-ad26-ac083ce436e8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve resellers for userID" searchProperties="true"><con:description>TestCase generated for REST Resource [/resellers/{id}] located at [/resellers/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="b53bb681-7197-4f66-b9cd-d9a654e2b682"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /resellers/{id} is Retrieved" id="02e0db1d-1b8c-4a31-897e-ede46729e47a"><con:settings/><con:config service="Radius3 API" resourcePath="/resellers/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /resellers/{id} is Retrieved" id="e6d17c5f-b336-4a47-ad6d-2c4076e70ad9" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/resellers/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b2317cc7-4dfa-41ca-86e3-3484bafcd9c0" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="b35aa9e9-bb19-4fbe-825a-a9a368540336" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="48dc0042-2a34-42af-b277-d4435c638599"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('resellerForIdResponse', responseContent)

// Expected response format
//{   "Resellers":    [
//            {
//         "id": 37,
//         "name": "Test Reseller"
//      }, ...
//   ],
//   "meta":    {
//      "page": 1,
//      "limit": 5
//   }
//}

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.Resellers != null

for(def entry : jsonResponse.Resellers) {
	try {
		assert entry.id != null
		assert entry.name != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>resellerForIdResponse</con:name><con:value>{
    "Resellers": [
        {
            "id": 37,
            "name": "Test Reseller"
        },
        {
            "id": 359,
            "name": "connexin"
        },
        {
            "id": 360,
            "name": "wisper"
        },
        {
            "id": 361,
            "name": "itc"
        },
        {
            "id": 390,
            "name": "Bob"
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="142cfa06-30a5-4fad-a0d0-4506ebfa913e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve static IP ranges for userID" searchProperties="true"><con:description>TestCase generated for REST Resource [/static_ip_ranges/{id}] located at [/static_ip_ranges/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="29de4603-94f8-4218-ae39-168ac5b88d4d"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /static_ip_ranges/{id} is Retrieved" id="e751f30e-6da3-447b-99a1-c510d7c3ee6a"><con:settings/><con:config service="Radius3 API" resourcePath="/static_ip_ranges/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /static_ip_ranges/{id} is Retrieved" id="9508eb4d-f1fa-468c-a92a-05f0d58a1e3c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/static_ip_ranges/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a3a72b24-e695-4d0a-a765-daf25b3a0148" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="a43d78cc-6702-4c88-b684-d08e920f999d" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="a2ecc665-c09d-4ef0-8975-fe9a89ba9d45"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('StaticIpRangesForIdResponse', responseContent)

// Expected Response 
//{   "StaticIpRanges":    [
//	{	"id": 186,
//		"reseller_id": 359,
//		"prefix": "185.6.153.0",
//		"prefix_length": 24,
//		"inactive_retention_period": -1
//      }, ... ],
//   "meta":    {
//      "page": 1,
//      "limit": 5
//   }
//}

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.StaticIpRanges != null

for(def entry : jsonResponse.StaticIpRanges) {
	try {
		assert entry.id != null
		assert entry.reseller_id != null
		assert entry.prefix != null
		assert entry.prefix_length != null
		assert entry.inactive_retention_period  != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>rangeId</con:name><con:value>1</con:value></con:property><con:property><con:name>StaticIpRangesForIdResponse</con:name><con:value>{
    "StaticIpRanges": [
        {
            "id": 186,
            "reseller_id": 359,
            "prefix": "185.6.153.0",
            "prefix_length": 24,
            "inactive_retention_period": -1
        },
        {
            "id": 187,
            "reseller_id": 359,
            "prefix": "185.6.154.128",
            "prefix_length": 25,
            "inactive_retention_period": -1
        },
        {
            "id": 188,
            "reseller_id": 359,
            "prefix": "185.6.155.128",
            "prefix_length": 25,
            "inactive_retention_period": -1
        },
        {
            "id": 189,
            "reseller_id": 360,
            "prefix": "185.6.153.0",
            "prefix_length": 24,
            "inactive_retention_period": -1
        },
        {
            "id": 190,
            "reseller_id": 360,
            "prefix": "185.6.154.128",
            "prefix_length": 25,
            "inactive_retention_period": -1
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="08331571-2d6f-48ca-a9a2-c24f3472a6e9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve statuses for userID" searchProperties="true"><con:description>TestCase generated for REST Resource [/statuses/{id}] located at [/statuses/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="a59cd4cc-f39f-4238-929b-70b3a34d76e9"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /statuses/{id} is Retrieved" id="62b2c63c-2fec-444f-aaa8-0f07095bcf3a"><con:settings/><con:config service="Radius3 API" resourcePath="/statuses/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /statuses/{id} is Retrieved" id="a246be8e-9bfa-49fe-b88f-e7a4e429f76a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/statuses/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c7578425-76e7-4e68-b4d0-2556e3ee8b3e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="25a72941-5785-4cb6-8ab0-c4ac9042d740" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="f0f9d359-e9b9-45ce-904b-3fccaa3117a3"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)
def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('statusesByIdResponse', responseContent)

// Expected Response
// {	"Status": {
//		"id": 279,
//		"name": "active",
//		"reseller_id": 359,
//		"redirect_url": "",
//		"pool_name": "active_pool",
//		"static_override_pool": true,
//		"type": "active"
//}}

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.Status.id != null
assert jsonResponse.Status.name != null
assert jsonResponse.Status.reseller_id != null
assert jsonResponse.Status.redirect_url != null
assert jsonResponse.Status.pool_name != null
assert jsonResponse.Status.static_override_pool != null
assert jsonResponse.Status.type != null
</script></con:config></con:testStep><con:properties><con:property><con:name>statusesByIdResponse</con:name><con:value>{
    "Status": {
        "id": 279,
        "name": "active",
        "reseller_id": 359,
        "redirect_url": "",
        "pool_name": "active_pool",
        "static_override_pool": true,
        "type": "active"
    }
}</con:value></con:property><con:property><con:name>statusId</con:name><con:value>279</con:value></con:property></con:properties></con:testCase><con:testCase id="c7363295-81d4-4f79-88a4-d4b7dd6d4130" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve transient packages by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/transient_packages/{id}] located at [/transient_packages/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="b68cc5b5-a443-49cc-bd0e-1c7eaa70f952"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('packageId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /transient_packages/{id} is Retrieved" id="10181299-d99d-4e0f-82e3-32324d2269b2"><con:settings/><con:config service="Radius3 API" resourcePath="/transient_packages/" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /transient_packages/{id} is Retrieved" id="26c2d2c9-9b9d-41c5-8174-687b3a0c6e10" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/transient_packages/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="327a5347-008a-45fd-aba8-f5bfc8e1446b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="39831d09-1025-400d-a7d3-a89558e6c001" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#packageId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="2c5078de-406b-4c38-aedd-1b9a00142157"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('packagesForIdResponse', responseContent)

// Expected Response
//{
//   "TransientPackages": [],
//   "meta":    {
//      "page": 1,
//      "limit": 5
//   }
//}

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.TransientPackages != null

for(def entry : jsonResponse.TransientPackages) {
	try {
		assert entry.id != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>packagesForIdResponse</con:name><con:value>{
    "TransientPackages": [],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property><con:property><con:name>packageId</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="ccc032bf-adea-487a-b760-0fbe5a56d9e5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve users by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/users/{id}] located at [/users/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="1d36b5c2-e6e4-4092-9c4f-a4e4dd6e346d"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /users/{id} is Retrieved" id="6d2a857b-b88a-4949-9ada-24e477a2d676"><con:settings/><con:config service="Radius3 API" resourcePath="/users/{id}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /users/{id} is Retrieved" id="274c4c77-2122-4fd3-9f84-797ac8e1ec9a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/users/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6e294157-a433-46ae-bc26-bbc29e9e2dd4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="b3ed1543-0277-46d2-b7b8-28986237fc82" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="2b778c97-b446-4013-891d-5d990c7ff7e0"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('userForIdResponse', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.Users != null

for(def user : jsonResponse.Users) {
	try {
		assert user.id != null
		assert user.username != null
		assert user.password != null
		assert user.hashed_password != null
		assert user.base_speed_up != null
		assert user.base_speed_down != null
		assert user.session_limit != null
//		assert user.static_ip != null
		assert user.base_upload_limit != null
		assert user.base_download_limit != null
		assert user.lock != null
		assert user.pending != null
		assert user.reseller_id != null
		assert user.status_id != null
		assert user.usage != null
		assert user.usage.login != null
		assert user.usage.logintime != null
		assert user.usage.up != null
		assert user.usage.down != null
		assert user.usage.total != null		
//		assert user.sessions != null
		assert user.speed_up != null
		assert user.speed_down != null
		assert user.upload_limit != null
		assert user.download_limit != null
		assert user.Status != null
		assert user.Status.id != null
		assert user.Status.name != null
		assert user.Status.reseller_id != null
		assert user.Status.redirect_url != null
		assert user.Status.pool_name != null
		assert user.Status.static_override_pool != null
		assert user.Status.type != null
//		assert user.TransientPackages != null
		if (user.RadiusAttributes != null) {
			for( attribute in user.RadiusAttributes) {
				assert attribute.id != null
				assert attribute.user_id != null
				assert attribute.type != null
				assert attribute.attribute != null
				assert attribute.op != null
				assert attribute.value != null
			}
		}
		
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>userId</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="039539f4-a543-49a3-995c-d32a11c389ad" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve webhook endpoints by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/webhook_endpoints/{id}] located at [/webhook_endpoints/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="36fcca99-4d8a-4b95-a535-36a5c6c031c6"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /webhook_endpoints/{id} is Retrieved" id="16b0a234-4f2a-409f-8161-0bb701efc012"><con:settings/><con:config service="Radius3 API" resourcePath="/webhook_endpoints/" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /webhook_endpoints/{id} is Retrieved" id="a780a4d4-7cbe-4820-97a7-ac7fea600ea4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/webhook_endpoints/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d148b8bf-635f-4cc2-998b-476e6ecf5aeb" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="af223c75-1308-4b5b-a79a-bdcb7ea43443" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#webhookId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="8d9d82c7-31c7-40d9-b105-476af1695cfd"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('webhookEndpointById', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.WebhookEndpoints != null

// Expected response
//{
//   "WebhookEndpoints": [   {
//      "id": 1,
//      "endpoint": "http://127.0.0.1/webhook.php",
//      "reseller_id": 37,
//      "disabled": false,
//      "EventTypes": []
//   }],
//   "meta":    {
//      "page": 1,
//      "limit": 5
//   }
//}

for(def entry : jsonResponse.WebhookEndpoints) {
	try {
		assert entry.id != null
		assert entry.endpoint != null
		assert entry.reseller_id != null
		assert entry.disabled != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>webhookEndpointById</con:name><con:value>{
    "WebhookEndpoints": [
        {
            "id": 1,
            "endpoint": "http:\/\/127.0.0.1\/webhook.php",
            "reseller_id": 37,
            "disabled": false,
            "EventTypes": []
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="29b495a1-aae7-4fca-87a5-a4f3cc4842e1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Retrieve webhooks by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/webhooks/{id}] located at [/webhooks/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="758c6018-bc2a-45cd-9043-9c95cf6813ee"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /webhooks/{id} is Retrieved" id="a1dfe367-94e8-43dc-a95c-a260f73767ec"><con:settings/><con:config service="Radius3 API" resourcePath="/webhooks/" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /webhooks/{id} is Retrieved" id="6950159c-ed75-46cf-a1bc-4ae2179186c6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/webhooks/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="64277404-b443-4b5b-9922-96d90d827263" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="f1bb4f3f-8d52-4fa6-83b1-521f53d4eb07" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#webhookId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="b85aeda8-9367-4f4b-8352-9649af03eda1"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('webhooksJson', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 5
assert jsonResponse.Webhooks != null

// Expected Response format
//{   "Webhooks": [   {
//      "id": 1,
//      "webhook_endpoint_id": 1,
//      "status_code": null,
//      "request": "{\"Events\":[{\"id\":\"4\",\"datetime\":\"2018-11-03 21:33:06\",\"event_type_id\":\"1\",\"user_id\":\"104\"}]}",
//      "response": null,
//      "request_headers": "{\"Content-Type\":\"application\\/json\",\"Content-Length\":92,\"User-Agent\":\"connexin-radius-api\\/3\"}",
//      "response_headers": null,
//      "success_1": 0,
//      "success_2": 0,
//      "success_3": 0,
//      "success_4": 0,
//      "success_5": 0
//   }],
//   "meta":    {
//      "page": 1,
//      "limit": 5
//   }
//}

for(def entry : jsonResponse.Webhooks) {
	try {
		assert entry.id != null
		assert entry.webhook_endpoint_id != null
//		assert entry.status_code != null
		assert entry.request != null
//		assert entry.response != null
		assert entry.request_headers != null
//		assert entry.response_headers != null
		assert entry.success_1 != null
		assert entry.success_2 != null
		assert entry.success_3 != null
		assert entry.success_4 != null
		assert entry.success_5 != null

	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>webhooksJson</con:name><con:value>{
    "Webhooks": [
        {
            "id": 1,
            "webhook_endpoint_id": 1,
            "status_code": null,
            "request": "{\"Events\":[{\"id\":\"4\",\"datetime\":\"2018-11-03 21:33:06\",\"event_type_id\":\"1\",\"user_id\":\"104\"}]}",
            "response": null,
            "request_headers": "{\"Content-Type\":\"application\\\/json\",\"Content-Length\":92,\"User-Agent\":\"connexin-radius-api\\\/3\"}",
            "response_headers": null,
            "success_1": 0,
            "success_2": 0,
            "success_3": 0,
            "success_4": 0,
            "success_5": 0
        }
    ],
    "meta": {
        "page": 1,
        "limit": 5
    }
}</con:value></con:property></con:properties></con:testCase><con:testCase id="3c12438f-c0e4-4004-81c9-18c0c65ee227" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update admins by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/admins/{id}] located at [/admins/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="50380e34-c770-4619-ae7f-d9cdb0098620"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="groovy" name="Given content for the update request" id="77c3dde8-18f8-40fc-a729-e9ce97539bf2"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// fields padded to full length
// def field = "Value".padRight(10,'.')

jsonRequestStr = """
{
	"Admin": {
		"username": "admin",
		"password": "password",
		"super": true,
		"Resellers": [
			{
			"name": "Test Reseller"
			}
		]
	}
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('updateAdminRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /admins/{id} is Updated" id="48376718-1575-4b71-9a69-34d61a51f67d"><con:settings/><con:config service="Radius3 API" resourcePath="/admins/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /admins/{id} is Updated" id="1b7588ff-d556-4762-ac43-df81b967e476" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateAdminRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/admins/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9a5790b1-386d-46b9-a371-7ad8d6124a62" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="42d7b25f-8715-437a-8e17-bc73eb02fe22" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="ce2b3b7d-01df-4dce-b7b3-046b0264a926"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createAdminsResponse', responseContent)

def expectedAdminUsername = testCase.getPropertyValue('testAdminUsername')
def expectedtestReseller = testCase.getPropertyValue('testReseller')

// Expected Response format
//{
//  "Admin": {
//    "id": 1,
//    "username": "Test admin (UUID)",
//    "super": true,
//    "Resellers": [
//      {
//        "id": 1,
//        "name": "Test Reseller (UUID)"
//      }
//    ]
//  }
//}

assert jsonResponse != null
assert jsonResponse.Admin != null
assert jsonResponse.Admin.id != null
assert jsonResponse.Admin.username != null
assert jsonResponse.Admin.username == expectedAdminUsername
assert jsonResponse.Admin.super != null
assert jsonResponse.Admin.Resellers != null
assert jsonResponse.Admin.Resellers.id != null
assert jsonResponse.Admin.Resellers.name != null
assert jsonResponse.Admin.Resellers.name == expectedtestReseller
</script></con:config></con:testStep><con:properties><con:property><con:name>updateAdminRequest</con:name><con:value>
{
	"Admin": {
		"username": "admin",
		"password": "password",
		"super": true,
		"Resellers": [
			{
			"name": "Test Reseller"
			}
		]
	}
}
</con:value></con:property></con:properties></con:testCase><con:testCase id="0132a2c7-d487-496b-ba18-e606b4c754e6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update nas by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/nas/{id}] located at [/nas/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="39bdbd87-80f9-47c6-830c-11b62ceb3b42"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="groovy" name="Given content for the update request" id="f83f85e7-0260-43c5-9dca-9ed784b43566"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// fields padded to full length
// def field = "Value".padRight(10,'.')

jsonRequestStr = """
{
	"Nas": {
		"nasname": "1.1.1.1",
		"shortname": "nas1",
		"type": "other",
		"ports": null,
		"secret": "testing123",
		"server": null,
		"community": null,
		"description": "RADIUS Client"
	}
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('updateNasRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /nas/{id} is Updated" id="bcc5f044-5514-4fed-bfac-8557365acee1"><con:settings/><con:config service="Radius3 API" resourcePath="/nas/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /nas/{id} is Updated" id="2a0a5ef3-0f9e-4a6a-93e9-3f1d0965b1f0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/nas/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b2188626-a2ba-43d4-aac5-726a9423cdc4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="20ccd673-7811-4d77-88f8-20d19d541436" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="dd8931a1-63d0-466d-86a3-930588dae7bb"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def preceedingStepIndex = context.currentStepIndex - 1
def preceedingStep = testCase.getTestStepAt(preceedingStepIndex)

def responseContent = preceedingStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createNasResponse', responseContent)

def expectedNasShortName = testCase.getPropertyValue('testNasShortName')
def expectedNasSecret = testCase.getPropertyValue('testNasSecret')

// Expected Response format
//{
//  "Nas": {
//    "nasname": "1.1.1.1",
//    "shortname": "nas-(UUID time-low part)",
//    "type": "other",
//    "ports": null,
//    "secret": "testing123",
//    "server": null,
//    "community": null,
//    "description": "RADIUS Client"
//  }
//}

assert jsonResponse != null
assert jsonResponse.Nas != null
assert jsonResponse.Nas.nasname != null
assert jsonResponse.Nas.shortname != null
assert jsonResponse.Nas.shortname == expectedNasShortName
assert jsonResponse.Nas.type != null
//assert jsonResponse.Nas.ports != null
assert jsonResponse.Nas.secret != null
assert jsonResponse.Nas.secret == expectedNasSecret
assert jsonResponse.Nas.description != null
</script></con:config></con:testStep><con:properties><con:property><con:name>updateNasRequest</con:name><con:value>
{
	"Nas": {
		"nasname": "1.1.1.1",
		"shortname": "nas1",
		"type": "other",
		"ports": null,
		"secret": "testing123",
		"server": null,
		"community": null,
		"description": "RADIUS Client"
	}
}
</con:value></con:property></con:properties></con:testCase><con:testCase id="af30f49c-e6cb-41b0-b653-4915164db1f2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update radius attributes by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/radius_attributes/{id}] located at [/radius_attributes/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="324a1722-e1b7-470e-8739-0d2c143e22d1"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="groovy" name="Given content for the update request" id="b1a87be8-f7c4-4aa1-a596-f1a3e020a3c2"><con:settings/><con:config><script>import groovy.json.JsonSlurper

jsonRequestStr = """
{
	"Name" : {
		"reference":	"${testRef}",
	}
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('updateRadiusRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /radius_attributes/{id} is Updated" id="87bc5c8c-9e46-4339-94dc-68aa6add7c58"><con:settings/><con:config service="Radius3 API" resourcePath="/radius_attributes/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /radius_attributes/{id} is Updated" id="ebda78b6-a6fb-435d-84d9-e15c1614ff83" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateRadiusAttributeRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/radius_attributes/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6cbe08bd-c7f4-47a5-a2e3-1430fd4cfeb3" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="3c6c6515-88ca-48cf-8d38-b2eaa20b4cfe" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="02b6bddc-f628-45ec-a7ea-5adf2ebe9942"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def preceedingStepIndex = context.currentStepIndex - 1
def preceedingStep = testCase.getTestStepAt(preceedingStepIndex)

def responseContent = preceedingStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createNasResponse', responseContent)

def expectedNasShortName = testCase.getPropertyValue('testNasShortName')
def expectedNasSecret = testCase.getPropertyValue('testNasSecret')

// Expected Response format
//{
//  "Nas": {
//    "nasname": "1.1.1.1",
//    "shortname": "nas-(UUID time-low part)",
//    "type": "other",
//    "ports": null,
//    "secret": "testing123",
//    "server": null,
//    "community": null,
//    "description": "RADIUS Client"
//  }
//}

assert jsonResponse != null
assert jsonResponse.Nas != null
assert jsonResponse.Nas.nasname != null
assert jsonResponse.Nas.shortname != null
assert jsonResponse.Nas.shortname == expectedNasShortName
assert jsonResponse.Nas.type != null
//assert jsonResponse.Nas.ports != null
assert jsonResponse.Nas.secret != null
assert jsonResponse.Nas.secret == expectedNasSecret
assert jsonResponse.Nas.description != null
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f48c7281-6962-4bef-9f97-86366199d5ac" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update resellers by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/resellers/{id}] located at [/resellers/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="e5089f02-59d2-458b-ade2-8ab2fa8c5e28"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="groovy" name="Given content for the update request" id="95fd5a75-4574-48bb-acff-229ee27528da"><con:settings/><con:config><script>import groovy.json.JsonSlurper

jsonRequestStr = """{
	"Name" : {
		"reference":	"${testRef}",
		}
	}"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('JsonRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /resellers/{id} is Updated" id="67a44745-ecc1-4899-b5ce-c18d2f9fe8f8"><con:settings/><con:config service="Radius3 API" resourcePath="/resellers/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /resellers/{id} is Updated" id="3a8e5b7e-6358-491d-83da-ffb881b7a916" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateRequest}
</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/resellers/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9a39d0a9-7069-4abc-af14-480d689f60ae" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="2ec2f9e5-55ed-44c7-b0d4-1ad533652499" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="3dfd5558-32f5-4264-afda-62c3d4f4e029"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def preceedingStepIndex = context.currentStepIndex - 1
def preceedingStep = testCase.getTestStepAt(preceedingStepIndex)

def responseContent = preceedingStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createNasResponse', responseContent)

def expectedNasShortName = testCase.getPropertyValue('testNasShortName')
def expectedNasSecret = testCase.getPropertyValue('testNasSecret')

// Expected Response format
//{
//  "Nas": {
//    "nasname": "1.1.1.1",
//    "shortname": "nas-(UUID time-low part)",
//    "type": "other",
//    "ports": null,
//    "secret": "testing123",
//    "server": null,
//    "community": null,
//    "description": "RADIUS Client"
//  }
//}

assert jsonResponse != null
assert jsonResponse.Nas != null
assert jsonResponse.Nas.nasname != null
assert jsonResponse.Nas.shortname != null
assert jsonResponse.Nas.shortname == expectedNasShortName
assert jsonResponse.Nas.type != null
//assert jsonResponse.Nas.ports != null
assert jsonResponse.Nas.secret != null
assert jsonResponse.Nas.secret == expectedNasSecret
assert jsonResponse.Nas.description != null
</script></con:config></con:testStep><con:properties><con:property><con:name>JsonRequest</con:name><con:value>{
	"Name" : {
		"reference":	"Test c166f806-11d8-491a-a014-f4d652ab9b17",
		}
	}</con:value></con:property></con:properties></con:testCase><con:testCase id="cf22333a-a6a2-451a-9100-092142c03b9b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update static ip ranges by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/static_ip_ranges/{id}] located at [/static_ip_ranges/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="f833465c-ba7a-447b-acfc-271eb5921b4c"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="groovy" name="Given content for the update request" id="f91e715c-8386-4559-ada9-66373a215af3"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// fields padded to full length
// def field = "Value".padRight(10,'.')

jsonRequestStr = """{
	"Name" : {
		"reference":	"${testRef}",
		}
	}"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('updateStaticIpRangeRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /static_ip_ranges/{id} is Updated" id="d9d4f74e-9784-4cc2-9570-52a55f2e3ffe"><con:settings/><con:config service="Radius3 API" resourcePath="/static_ip_ranges/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /static_ip_ranges/{id} is Updated" id="a34f2389-9d21-4a74-8022-0b957e39aa97" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/static_ip_ranges/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6112de2c-b4c1-47df-b4d8-f6a86035f9f1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="861049b6-8330-4e4c-a3e2-e868a2bacb12" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="8f784ae3-83db-4fb5-9494-e6b10e82f21a"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def preceedingStepIndex = context.currentStepIndex - 1
def preceedingStep = testCase.getTestStepAt(preceedingStepIndex)

def responseContent = preceedingStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createNasResponse', responseContent)

def expectedNasShortName = testCase.getPropertyValue('testNasShortName')
def expectedNasSecret = testCase.getPropertyValue('testNasSecret')

// Expected Response format
//{
//  "Nas": {
//    "nasname": "1.1.1.1",
//    "shortname": "nas-(UUID time-low part)",
//    "type": "other",
//    "ports": null,
//    "secret": "testing123",
//    "server": null,
//    "community": null,
//    "description": "RADIUS Client"
//  }
//}

assert jsonResponse != null
assert jsonResponse.Nas != null
assert jsonResponse.Nas.nasname != null
assert jsonResponse.Nas.shortname != null
assert jsonResponse.Nas.shortname == expectedNasShortName
assert jsonResponse.Nas.type != null
//assert jsonResponse.Nas.ports != null
assert jsonResponse.Nas.secret != null
assert jsonResponse.Nas.secret == expectedNasSecret
assert jsonResponse.Nas.description != null
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5a1dd746-80a6-43dc-a6af-40d86eb9fb3d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update statuses by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/statuses/{id}] located at [/statuses/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="53de40df-67d5-4d24-ac99-80bb8ae87097"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="groovy" name="Given content for the update request" id="2ed6ecf0-a766-4eab-b743-f88e8574ed75"><con:settings/><con:config><script>import groovy.json.JsonSlurper

jsonRequestStr = """{
	"Name" : {
		"reference":	"${testRef}",
		}
	}"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('updateStatusRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /statuses/{id} is Updated" id="53dce0be-2313-4559-9e07-25f7dc8220b4"><con:settings/><con:config service="Radius3 API" resourcePath="/statuses/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /statuses/{id} is Updated" id="6d94db8a-90f6-4dd3-a7f1-796b05dd7264" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/statuses/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1f78472b-7b47-45e8-83d7-3094d57d9518" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="fcd3b13b-0b0a-4dd9-8bef-4a552a9aec34" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="94de8582-837f-4b41-b3be-a0b683bfaedc"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def preceedingStepIndex = context.currentStepIndex - 1
def preceedingStep = testCase.getTestStepAt(preceedingStepIndex)

def responseContent = preceedingStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createNasResponse', responseContent)

def expectedNasShortName = testCase.getPropertyValue('testNasShortName')
def expectedNasSecret = testCase.getPropertyValue('testNasSecret')

// Expected Response format
//{
//  "Nas": {
//    "nasname": "1.1.1.1",
//    "shortname": "nas-(UUID time-low part)",
//    "type": "other",
//    "ports": null,
//    "secret": "testing123",
//    "server": null,
//    "community": null,
//    "description": "RADIUS Client"
//  }
//}

assert jsonResponse != null
assert jsonResponse.Nas != null
assert jsonResponse.Nas.nasname != null
assert jsonResponse.Nas.shortname != null
assert jsonResponse.Nas.shortname == expectedNasShortName
assert jsonResponse.Nas.type != null
//assert jsonResponse.Nas.ports != null
assert jsonResponse.Nas.secret != null
assert jsonResponse.Nas.secret == expectedNasSecret
assert jsonResponse.Nas.description != null
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0a6f0f9b-9df9-48bb-af78-5ca997cc245a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update transient packages by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/transient_packages/{id}] located at [/transient_packages/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="832ee180-8259-40c1-a739-9559888e3c10"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="groovy" name="Given content for the update request" id="1f7d1d18-4125-4347-b6f8-b236b53104ed"><con:settings/><con:config><script>import groovy.json.JsonSlurper

jsonRequestStr = """{
	"Name" : {
		"reference":	"${testRef}",
		}
	}"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('updateTransientPackagesRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /transient_packages/{id} is Updated" id="0d38a8fd-5208-41cf-8770-f6e968882495"><con:settings/><con:config service="Radius3 API" resourcePath="/transient_packages/" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /transient_packages/{id} is Updated" id="53772f55-4ac8-4adb-b517-3b1a7349231d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/transient_packages/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ee9e9a49-2e94-4153-a15f-d0cfe596b02e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="24961a3f-14fd-41b3-88ab-c8aa01d9bf2e" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="c78dbbe1-13ce-4b89-b53d-43d3b4f83002"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def preceedingStepIndex = context.currentStepIndex - 1
def preceedingStep = testCase.getTestStepAt(preceedingStepIndex)

def responseContent = preceedingStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createNasResponse', responseContent)

def expectedNasShortName = testCase.getPropertyValue('testNasShortName')
def expectedNasSecret = testCase.getPropertyValue('testNasSecret')

// Expected Response format
//{
//  "Nas": {
//    "nasname": "1.1.1.1",
//    "shortname": "nas-(UUID time-low part)",
//    "type": "other",
//    "ports": null,
//    "secret": "testing123",
//    "server": null,
//    "community": null,
//    "description": "RADIUS Client"
//  }
//}

assert jsonResponse != null
assert jsonResponse.Nas != null
assert jsonResponse.Nas.nasname != null
assert jsonResponse.Nas.shortname != null
assert jsonResponse.Nas.shortname == expectedNasShortName
assert jsonResponse.Nas.type != null
//assert jsonResponse.Nas.ports != null
assert jsonResponse.Nas.secret != null
assert jsonResponse.Nas.secret == expectedNasSecret
assert jsonResponse.Nas.description != null
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="31f7d40c-b3f9-4e44-86ae-f3f8f6648c27" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update users by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/users/{id}] located at [/users/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="0ee9cfbf-80e1-4e4c-9430-65ec4f990608"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="groovy" name="Given content for the update request 1" id="2f208baf-c258-4c29-88e7-90942525703e"><con:settings/><con:config><script>import groovy.json.JsonSlurper

jsonRequestStr = """{
	"Name" : {
		"reference":	"${testRef}",
		}
	}"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('updateUserRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /users/{id} is Updated" id="669efe85-1a8c-4383-949b-ff48f43b442b"><con:settings/><con:config service="Radius3 API" resourcePath="/users/{id}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /users/{id} is Updated" id="94d32a52-0919-4b9f-a682-1a4321d11f8f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/users/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ba4c0cea-dbed-490a-9342-ef1e0d4b8ae0" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="3a7f2bd2-92a0-47f3-9344-0fe014b19714" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="09cd0ee1-2fb3-4cb0-85bb-63d0a709d7cd"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def preceedingStepIndex = context.currentStepIndex - 1
def preceedingStep = testCase.getTestStepAt(preceedingStepIndex)

def responseContent = preceedingStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createNasResponse', responseContent)

def expectedNasShortName = testCase.getPropertyValue('testNasShortName')
def expectedNasSecret = testCase.getPropertyValue('testNasSecret')

// Expected Response format
//{
//  "Nas": {
//    "nasname": "1.1.1.1",
//    "shortname": "nas-(UUID time-low part)",
//    "type": "other",
//    "ports": null,
//    "secret": "testing123",
//    "server": null,
//    "community": null,
//    "description": "RADIUS Client"
//  }
//}

assert jsonResponse != null
assert jsonResponse.Nas != null
assert jsonResponse.Nas.nasname != null
assert jsonResponse.Nas.shortname != null
assert jsonResponse.Nas.shortname == expectedNasShortName
assert jsonResponse.Nas.type != null
//assert jsonResponse.Nas.ports != null
assert jsonResponse.Nas.secret != null
assert jsonResponse.Nas.secret == expectedNasSecret
assert jsonResponse.Nas.description != null
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0c38aa0a-0bd7-486e-a426-5532e8375d40" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update users password by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/users/{id}/change_password] located at [/users/{id}/change_password]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="e2d586bd-d81a-4a3c-9655-27609bf946a5"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="groovy" name="Given content for the update request" id="8fecdb59-4dc2-4325-80b2-d580fef4625a"><con:settings/><con:config><script>import groovy.json.JsonSlurper

jsonRequestStr = """{
	"Name" : {
		"reference":	"${testRef}",
		}
	}"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('updateUserPasswordRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /users/{id}/change_password is Created" id="fa2d6daa-b696-42ae-a632-cf7767b8069e"><con:settings/><con:config service="Radius3 API" resourcePath="/users/{id}/change_password" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /users/{id}/change_password is Created" id="7a648d09-5c23-4d66-9487-5b707d7253c0" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/users//change_password</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="25e483ec-0da8-4b34-be80-905c13fd0290" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="2ec7e04c-55f8-4c51-9d44-1a13bdaf5ee2" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cbd09b6f-d9ab-4fd7-82ef-35a8626e2ef6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Update webhook endpoints by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/webhook_endpoints/{id}] located at [/webhook_endpoints/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="3eb06ef0-c2df-4250-a904-278f787dd119"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="groovy" name="Given content for the update request" id="df7cf5e0-a7f6-4ce7-9628-0cf2e1e30b65"><con:settings/><con:config><script>import groovy.json.JsonSlurper

jsonRequestStr = """{
	"Name" : {
		"reference":	"${testRef}",
		}
	}"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('updateWebhookEndpointRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /webhook_endpoints/{id} is Updated" id="a03b8a30-24e0-4617-9461-f670749ec1b2"><con:settings/><con:config service="Radius3 API" resourcePath="/webhook_endpoints/" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /webhook_endpoints/{id} is Updated" id="e364b297-8cbd-4a62-afc1-2e504e9ecca5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/webhook_endpoints/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ceb00c23-51f2-4646-9e98-5d9fa7f0d2c2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="4eaa4801-c941-47ef-92a2-4a02c4abe3e0" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="c7d46968-b4ac-408c-904b-3f4dec1435a0"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def preceedingStepIndex = context.currentStepIndex - 1
def preceedingStep = testCase.getTestStepAt(preceedingStepIndex)

def responseContent = preceedingStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createNasResponse', responseContent)

def expectedNasShortName = testCase.getPropertyValue('testNasShortName')
def expectedNasSecret = testCase.getPropertyValue('testNasSecret')

// Expected Response format
//{
//  "Nas": {
//    "nasname": "1.1.1.1",
//    "shortname": "nas-(UUID time-low part)",
//    "type": "other",
//    "ports": null,
//    "secret": "testing123",
//    "server": null,
//    "community": null,
//    "description": "RADIUS Client"
//  }
//}

assert jsonResponse != null
assert jsonResponse.Nas != null
assert jsonResponse.Nas.nasname != null
assert jsonResponse.Nas.shortname != null
assert jsonResponse.Nas.shortname == expectedNasShortName
assert jsonResponse.Nas.type != null
//assert jsonResponse.Nas.ports != null
assert jsonResponse.Nas.secret != null
assert jsonResponse.Nas.secret == expectedNasSecret
assert jsonResponse.Nas.description != null
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="95e583c3-a809-4446-8777-bf22da330334" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Assign static IP to user by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/users/{id}/static_ip] located at [/users/{id}/static_ip]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="49fd3b8c-277e-45bc-9c61-163a1ce22836"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="groovy" name="Given content for the request" id="fe8ffa15-a11d-448e-a588-6ddbe7e41df1"><con:settings/><con:config><script>import groovy.json.JsonSlurper

jsonRequestStr = """{
	"Name" : {
		"reference":	"${testAccountRef}",
		}
	}"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('updateStaticIpRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /users/{id}/static_ip is Created" id="00bc5e02-2718-448e-893f-d0dd7af47acb"><con:settings/><con:config service="Radius3 API" resourcePath="/users/{id}/static_ip" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /users/{id}/static_ip is Created" id="5967027a-fbc1-4c74-bc26-7cb8ed463a38" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/users//static_ip</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6bc429ba-10d9-452f-995e-110c5409ba27" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="294b6d46-6e22-49cd-83f2-c26021adbb59" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#UserId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="8808402a-b383-4dbd-8914-621b941e68bd"><con:settings/><con:config><script>assert false</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2ef08c8e-91cc-4775-9a16-e8adf9ae9622" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Disconnect user by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/users/{id}/disconnect] located at [/users/{id}/disconnect]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="bca1b978-a50e-4e53-b7fb-d3c413d68b19"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="groovy" name="Given content for the request" id="0c2cc56a-5f60-45ed-b653-85ae86844e77"><con:settings/><con:config><script>import groovy.json.JsonSlurper

jsonRequestStr = """{
	"Name" : {
		"reference":	"${testAccountRef}",
		}
	}"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('disconnectUserRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /users/{id}/disconnect is Created" id="07c4a816-41e3-4beb-8c01-294cf18b30a8"><con:settings/><con:config service="Radius3 API" resourcePath="/users/{id}/disconnect" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /users/{id}/disconnect is Created" id="9d31bbfe-a14d-416c-9fbd-7f85aa236bfa" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="989ec61d-7ff3-47ef-88ab-11adca3ca128" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="81d9a512-82d8-4680-b890-7c2d20714702" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#userId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="69073c27-82b9-48ba-be00-ffa39e19d584"><con:settings/><con:config><script>assert false</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5a3b6ac1-cf0f-4a75-a3d0-fddad1c19519" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove transient packages by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/transient_packages/{id}] located at [/transient_packages/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="b893f123-6108-4296-a065-8a83c67d2c76"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /transient_packages/{id} is Deleted" id="639f6125-7936-4b02-975a-1f53421b6be5"><con:settings/><con:config service="Radius3 API" resourcePath="/transient_packages/" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /transient_packages/{id} is Deleted" id="aa284bd8-770c-48d5-9d0b-cf717e896526" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/transient_packages/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c92c5ced-85d6-4390-9157-16f6625454b9" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="6b506c99-30e8-4e46-bde3-6bed64aacb68" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="27272ba5-df4c-4aa2-97ad-038b1652b54d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Remove static IP from user by ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/users/{id}/static_ip] located at [/users/{id}/static_ip]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="0df74589-4d96-4073-a4b4-20f70cc9e034"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('staticIpRangeId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /users/{id}/static_ip is Deleted" id="6892260f-f77d-4443-8ce7-094b4a5b7d26"><con:settings/><con:config service="Radius3 API" resourcePath="/users/{id}/static_ip" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /users/{id}/static_ip is Deleted" id="620c6b65-42a8-49a4-99c1-009c0c7d57cc" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/users//static_ip</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9a9825b7-cd1f-43ac-87d1-d14799c61430" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="799941f0-f587-4d3a-9436-da3d73efe4dd" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#UserId}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="da9d2a34-7d7d-4741-8cfa-be91effad867" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Delete resellers by ID" searchProperties="true" disabled="true"><con:description>TestCase generated for REST Resource [/resellers/{id}] located at [/resellers/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="04398186-d4b3-4ddc-b410-70eb1560642f"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('resellerId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /resellers/{id} is Deleted" id="134b8587-a328-4c02-8ab3-50f0f1248ab1"><con:settings/><con:config service="Radius3 API" resourcePath="/resellers/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /resellers/{id} is Deleted" id="16488e2e-d57c-43d6-8ff3-98d618c342bd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/resellers/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3ffe80c6-de34-4b91-a76c-7704be27e91f" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="739b4bb3-2d0c-4989-a2da-e0b753a283ab" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="450ced11-85e8-401f-893f-b3ce89d429f8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Delete radius attributes by ID" searchProperties="true" disabled="true"><con:description>TestCase generated for REST Resource [/radius_attributes/{id}] located at [/radius_attributes/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="df9db39c-9c0d-4b90-966a-655475fe4efc"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('radiusAttributeId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /radius_attributes/{id} is Deleted" id="9b7abc6d-d06f-4168-9d67-1c30034eca7f"><con:settings/><con:config service="Radius3 API" resourcePath="/radius_attributes/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /radius_attributes/{id} is Deleted" id="cd189576-251f-4c07-9417-fcb3a93488c6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/radius_attributes/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="60c62d2f-8ebe-43fd-9b14-ccba3ac8516d" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="38cb006e-ec1b-4e9e-884e-b9865ca0c32e" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a8cbdcfd-f353-4cbd-abc1-0c1591d0a419" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Delete nas by ID" searchProperties="true" disabled="true"><con:description>TestCase generated for REST Resource [/nas/{id}] located at [/nas/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="b13aa3e2-52b0-4cb9-9f9a-efa31479de61"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('nasId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /nas/{id} is Deleted" id="f70aaf29-a68e-418d-bb0a-a607d54cfe3b"><con:settings/><con:config service="Radius3 API" resourcePath="/nas/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /nas/{id} is Deleted" id="758eb974-69e8-434b-b976-ecb60c26d6e5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/nas/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6af8dff4-0716-4a65-b8ac-33cbba22965f" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="62610ca4-92de-4219-b84d-5ae445106267" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cb82db7b-d518-4a5c-bf8c-1b65a32a1621" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Delete admins by ID" searchProperties="true" disabled="true"><con:description>TestCase generated for REST Resource [/admins/{id}] located at [/admins/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="b1c47e6a-de00-4f06-92f0-a1568f9621dd"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('adminId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /admins/{id} is Deleted" id="53c9bedd-384b-4f70-a03f-979072bc8ce9"><con:settings/><con:config service="Radius3 API" resourcePath="/admins/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /admins/{id} is Deleted" id="834065a6-26ca-4b52-ad7d-647361df4711" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/admins/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3da8654c-37e0-4273-8cd9-7dfc3bc25b3d" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="503641dd-a94f-4671-b7a7-1cccaf5d04f3" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2d17dd40-9ac1-4fef-87bc-fd2667c57e55" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Delete static ip ranges by ID" searchProperties="true" disabled="true"><con:description>TestCase generated for REST Resource [/static_ip_ranges/{id}] located at [/static_ip_ranges/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="76584c35-4f9d-4980-9b88-0fa56e3753de"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('staticIpRangeId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /static_ip_ranges/{id} is Deleted" id="3333a7cf-c5a4-40a0-b319-30db2eb4afff"><con:settings/><con:config service="Radius3 API" resourcePath="/static_ip_ranges/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /static_ip_ranges/{id} is Deleted" id="26443137-da52-416f-b44f-46b53fe22f2b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/static_ip_ranges/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="95c24680-0638-4a31-900e-b943cfdf22ae" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="72cb0e97-4203-409e-94b8-ec8ee1fe5d73" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7943c812-917b-4c97-8eec-c0bf35b760b9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Delete statuses by ID" searchProperties="true" disabled="true"><con:description>TestCase generated for REST Resource [/statuses/{id}] located at [/statuses/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="e8b2136e-287c-4ce1-bef7-16633c383489"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('statusId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /statuses/{id} is Deleted" id="52b930ee-6d19-43c3-9fcf-dca1c518900c"><con:settings/><con:config service="Radius3 API" resourcePath="/statuses/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /statuses/{id} is Deleted" id="aef64a1a-a97d-4f97-aba6-616f9a621e77" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/statuses/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="37af7c9c-de23-4163-b7f5-811fad912b81" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="013553c6-22a7-42d4-9084-67da4fc4b67c" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9fd0c99d-0beb-4cba-9b4e-673f6dc48624" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Delete users by ID" searchProperties="true" disabled="true"><con:description>TestCase generated for REST Resource [/users/{id}] located at [/users/{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given a valid Id is available" id="b36c3ca4-2f94-4ef5-9be0-712da9fc98fc"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
assert testCase.getPropertyValue('userId')
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /users/{id} is Deleted" id="3b498acf-9d95-4f88-b9be-c6be52809f28"><con:settings/><con:config service="Radius3 API" resourcePath="/users/{id}" methodName="DELETE" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /users/{id} is Deleted" id="e9d1c3bb-103a-4594-a8f7-13beab882ff2" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/users/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="50fc5371-6e59-4c0c-953d-f2390e4a760a" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="10e71ad8-138f-4ea3-b206-fa27e82a22fa" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>id</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1e4e0d9e-f59c-468f-8530-cd0b2a82d2e1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Attempt to retrieve list of accounting entries with missing id" searchProperties="true" disabled="true"><con:description>TestCase generated for REST Resource [/accounting_entries] located at [/accounting_entries]</con:description><con:settings/><con:testStep type="restrequest" name="When /accounting_entries are Retrieved" id="f55f174c-a515-41a8-a9db-db1bff996b09"><con:settings/><con:config service="Radius3 API" resourcePath="/accounting_entries" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /accounting_entries are Retrieved" id="4d349f18-29d1-435f-ac23-37fe4da76bee" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="AutoInferSchemas">false</con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/accounting_entries</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cc09444f-f82d-49da-9108-d9909f5dfdf2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="5c96fa91-bd7a-4595-b729-638ceda8a0ff" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#limit}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
</con:parameters><con:parameterOrder><con:entry>user</con:entry><con:entry>username</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="f6c16341-48d3-46cc-952e-485b6738f981"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 25
assert jsonResponse.AccountingEntries != null

for(def accountingEntry : jsonResponse.AccountingEntries) {
	try {
		assert accountingEntry.radacctid != null
		assert accountingEntry.acctsessionid != null
		assert accountingEntry.acctuniqueid != null
		assert accountingEntry.username != null
		assert accountingEntry.nasipaddress != null
		assert accountingEntry.nasporttype != null
		assert accountingEntry.acctstarttime != null
		assert accountingEntry.acctupdatetime != null
		assert accountingEntry.acctstoptime != null
		assert accountingEntry.acctinputoctets != null
		assert accountingEntry.acctoutputoctets != null
		assert accountingEntry.calledstationid != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>userId</con:name><con:value>-1</con:value></con:property></con:properties></con:testCase><con:testCase id="5489eb8f-9152-40ff-9c6a-1f1ea1580af2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Attempt to retrieve list of accounting entries by invalid ID" searchProperties="true"><con:description>TestCase generated for REST Resource [/accounting_entries] located at [/accounting_entries]</con:description><con:settings/><con:testStep type="restrequest" name="When /accounting_entries are Retrieved" id="a94edd14-8ebc-4adf-acf5-904a94576582"><con:settings/><con:config service="Radius3 API" resourcePath="/accounting_entries/" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /accounting_entries are Retrieved" id="4d349f18-29d1-435f-ac23-37fe4da76bee" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="AutoInferSchemas">false</con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/accounting_entries</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cc09444f-f82d-49da-9108-d9909f5dfdf2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="5c96fa91-bd7a-4595-b729-638ceda8a0ff" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>user</con:entry><con:entry>username</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="cb7087dd-f22d-4939-93c6-4a47a1f4177c"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 25
assert jsonResponse.AccountingEntries != null

for(def accountingEntry : jsonResponse.AccountingEntries) {
	try {
		assert accountingEntry.radacctid != null
		assert accountingEntry.acctsessionid != null
		assert accountingEntry.acctuniqueid != null
		assert accountingEntry.username != null
		assert accountingEntry.nasipaddress != null
		assert accountingEntry.nasporttype != null
		assert accountingEntry.acctstarttime != null
		assert accountingEntry.acctupdatetime != null
		assert accountingEntry.acctstoptime != null
		assert accountingEntry.acctinputoctets != null
		assert accountingEntry.acctoutputoctets != null
		assert accountingEntry.calledstationid != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>userId</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="c8a67d48-af38-466f-b4bd-f6c4c403adfd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Attempt to retrieve list of accounting entries invalid username (deprecated)" searchProperties="true" disabled="true"><con:description>TestCase generated for REST Resource [/accounting_entries] located at [/accounting_entries]</con:description><con:settings/><con:testStep type="restrequest" name="When /accounting_entries are Retrieved" id="9f7ddade-5f5f-468b-a647-2f90ea8f800b"><con:settings/><con:config service="Radius3 API" resourcePath="/accounting_entries" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /accounting_entries are Retrieved" id="4d349f18-29d1-435f-ac23-37fe4da76bee" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="AutoInferSchemas">false</con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request/><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/accounting_entries</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cc09444f-f82d-49da-9108-d9909f5dfdf2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="5c96fa91-bd7a-4595-b729-638ceda8a0ff" name="Invalid HTTP Status Codes"><con:configuration><codes>400, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="limit" value="${#TestCase#limit}"/>
  <con:entry key="page" value="${#TestCase#pageNo}"/>
  <con:entry key="user" value="${#TestCase#userId}"/>
  <con:entry key="username" value="${#TestCase#username}"/>
</con:parameters><con:parameterOrder><con:entry>user</con:entry><con:entry>username</con:entry><con:entry>page</con:entry><con:entry>limit</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="94edde2c-9b06-4fdf-a898-3067dfd9291f"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('accountingEntriesJson', responseContent)

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse.meta != null
assert jsonResponse.meta.page != null
assert jsonResponse.meta.page == 1
assert jsonResponse.meta.limit != null
assert jsonResponse.meta.limit == 25
assert jsonResponse.AccountingEntries != null

for(def accountingEntry : jsonResponse.AccountingEntries) {
	try {
		assert accountingEntry.radacctid != null
		assert accountingEntry.acctsessionid != null
		assert accountingEntry.acctuniqueid != null
		assert accountingEntry.username != null
		assert accountingEntry.nasipaddress != null
		assert accountingEntry.nasporttype != null
		assert accountingEntry.acctstarttime != null
		assert accountingEntry.acctupdatetime != null
		assert accountingEntry.acctstoptime != null
		assert accountingEntry.acctinputoctets != null
		assert accountingEntry.acctoutputoctets != null
		assert accountingEntry.calledstationid != null
	} catch(AssertionError  assertion) {
		log.error assertion
	}
}
</script></con:config></con:testStep><con:properties><con:property><con:name>username</con:name><con:value>ABCDEFGHIJKLMNOPQRST</con:value></con:property></con:properties></con:testCase><con:testCase id="63470e93-617e-485d-8afb-cc548974db80" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Attempt to Create nas without details" searchProperties="true"><con:description>TestCase generated for REST Resource [/nas] located at [/nas]</con:description><con:settings/><con:testStep type="groovy" name="Given content for the request" id="cf78a2ce-b7cf-409d-9f4a-928f8db0df71"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// fields padded to full length
// def field = "Value".padRight(10,'.')


jsonRequestStr = """{
	"Name" : {
		"reference":	"${testRef}",
		}
	}"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('invalidRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /nas is Created" id="e59e8fb5-102c-4910-b086-8cb9bc1dc0db"><con:settings/><con:config service="Radius3 API" resourcePath="/nas" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /nas is Created" id="44a54c39-6273-4ca0-83f1-bcce52720d98" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/nas</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f6b4994a-83c6-4666-b23e-f352046426ec" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="9b37e795-a8ae-4b0e-b065-6ead86364b98" name="Invalid HTTP Status Codes"><con:configuration><codes>200, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="61b1161d-230a-499a-bfaa-a6c9b602148e"><con:settings/><con:config><script>assert false</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="51361d32-cf3f-490b-8c64-b7dca15440eb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Attempt to Create nas with invalid request" searchProperties="true"><con:description>TestCase generated for REST Resource [/nas] located at [/nas]</con:description><con:settings/><con:testStep type="groovy" name="Given content for the create nas request" id="285fdf72-7f80-4da5-ba25-2991c2b9051a"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// padded field to full length with
// def field = "Value".padRight(10,'.')

def testUsername = "Test Admin " + UUID.randomUUID().toString()
def testPassword = UUID.randomUUID().toString()

jsonRequestStr = """{
  "Admin": {
    "username": "${testUsername}",
    "password": "${testPassword}",
    "super": true,
    "Resellers": [
      {
        "name": "Test Reseller"
      }
    ]
  }
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('invalidRequest', jsonRequestStr)

</script></con:config></con:testStep><con:testStep type="restrequest" name="When /nas is Created" id="1e958103-6e0d-431f-a23d-0c4cfff659a1"><con:settings/><con:config service="Radius3 API" resourcePath="/nas" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /nas is Created" id="44a54c39-6273-4ca0-83f1-bcce52720d98" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#updateRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/nas</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f6b4994a-83c6-4666-b23e-f352046426ec" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="9b37e795-a8ae-4b0e-b065-6ead86364b98" name="Invalid HTTP Status Codes"><con:configuration><codes>200, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="deb67b9f-6127-4121-8bb2-bba8b919688d"><con:settings/><con:config><script>assert false</script></con:config></con:testStep><con:properties><con:property><con:name>JsonRequest</con:name><con:value>{
	"Name" : {
		"reference":	"Test d005959c-f581-4dfc-81c3-084d0842d1dc",
		}
	}</con:value></con:property><con:property><con:name>createAdminJson</con:name><con:value>{
	"Name" : {
		"reference":	"Test 26c4bf85-57f9-4d94-acaf-0ee0d14abdbd",
		}
	}</con:value></con:property><con:property><con:name>createNasJson</con:name><con:value>{
  "Admin": {
    "username": "Test Admin bc4b5cba-d36f-4a5e-9bdf-ccadd1a5269e",
    "password": "e7549ad2-56f7-41f1-af90-416f0603ba0f",
    "super": true,
    "Resellers": [
      {
        "name": "Test Reseller"
      }
    ]
  }
}
</con:value></con:property><con:property><con:name>invalidRequest</con:name><con:value>{
  "Admin": {
    "username": "Test Admin 9fc7a8f8-a881-42b4-b4c9-ab6a28f8ad2e",
    "password": "452396bf-7c14-4e29-a5f7-4ebc07c03bfa",
    "super": true,
    "Resellers": [
      {
        "name": "Test Reseller"
      }
    ]
  }
}
</con:value></con:property></con:properties></con:testCase><con:testCase id="d0ab2b65-d236-4f97-80ef-033e686b9b7f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Attempt to Create admins with empty request" searchProperties="true"><con:description>TestCase generated for REST Resource [/admins] located at [/admins]</con:description><con:settings/><con:testStep type="groovy" name="Given json content for the create admin request" id="77d2e1e9-5da2-4db8-83b7-2c7fe480776b"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// padded field to full length with
// def field = "Value".padRight(10,'.')

def testUsername = "Test Admin " + UUID.randomUUID().toString()
def testPassword = UUID.randomUUID().toString()

jsonRequestStr = """{
  "Admin": {
    "username": "${testUsername}",
    "password": "${testPassword}",
    "super": true,
    "Resellers": [
      {
        "name": "Test Reseller"
      }
    ]
  }
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('invalidCreateAdminRequest', jsonRequestStr)

</script></con:config></con:testStep><con:testStep type="restrequest" name="When /admins is Created" id="27c4ada1-c6cc-4a7d-8c58-c98c20a77fb0"><con:settings/><con:config service="Radius3 API" resourcePath="/admins" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /admins is Created" id="b5b5d556-57d8-4b79-ad4e-2ed5b410378f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createAdminJson}
</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/admins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e75f63a5-aa34-408b-b03d-dd4212af69e8" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="fc66c8fc-60ea-491f-b073-80e57ac6522f" name="Invalid HTTP Status Codes"><con:configuration><codes>200, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="252a7d33-2abb-4f60-909f-a8c5fc660515"><con:settings/><con:config><script>assert false</script></con:config></con:testStep><con:properties><con:property><con:name>createAdminJson</con:name><con:value>{
  "Admin": {
    "username": "Test Admin 7ffab2c9-f1dd-49b7-92ea-6c2732caeff7",
    "password": "caf8794b-e7b7-4d0d-bb44-f1675ae5aca6",
    "super": true,
    "Resellers": [
      {
        "name": "Test Reseller"
      }
    ]
  }
}
</con:value></con:property><con:property><con:name>invalidCreateAdminRequest</con:name><con:value>{
  "Admin": {
    "username": "Test Admin d97200fd-47dd-44cb-a3ad-af756c9bfb2b",
    "password": "f96a822d-b82a-41ee-9f93-ca421722b4d8",
    "super": true,
    "Resellers": [
      {
        "name": "Test Reseller"
      }
    ]
  }
}
</con:value></con:property></con:properties></con:testCase><con:testCase id="d6f4bd89-1137-4e26-9344-c79034d317e3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Attempt to Create admins with invalid request" searchProperties="true"><con:description>TestCase generated for REST Resource [/admins] located at [/admins]</con:description><con:settings/><con:testStep type="groovy" name="Given json content for the create admin request" id="4b2f5273-7c7c-4ce1-9e2d-3e27d64856a6"><con:settings/><con:config><script>import groovy.json.JsonSlurper

// padded field to full length with
// def field = "Value".padRight(10,'.')

def testUsername = "Test Admin " + UUID.randomUUID().toString()
def testPassword = UUID.randomUUID().toString()

jsonRequestStr = """{
  "Admin": {
    "username": "${testUsername}",
    "password": "${testPassword}",
    "super": true,
    "Resellers": [
      {
        "name": "Test Reseller"
      }
    ]
  }
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('createAdminJson', jsonRequestStr)

</script></con:config></con:testStep><con:testStep type="restrequest" name="When /admins is Created" id="7750311d-4f98-4bc5-b398-1b5d5390864f"><con:settings/><con:config service="Radius3 API" resourcePath="/admins" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /admins is Created" id="b5b5d556-57d8-4b79-ad4e-2ed5b410378f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createAdminJson}
</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/admins</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="e75f63a5-aa34-408b-b03d-dd4212af69e8" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="fc66c8fc-60ea-491f-b073-80e57ac6522f" name="Invalid HTTP Status Codes"><con:configuration><codes>200, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="ab264983-3aa5-4977-a0e5-065e49af78d4"><con:settings/><con:config><script>assert false</script></con:config></con:testStep><con:properties><con:property><con:name>createAdminJson</con:name><con:value>{
  "Admin": {
    "username": "Test Admin a57998da-088d-415d-83b6-21f16f92c757",
    "password": "ff68aed7-fded-4d4f-96da-5ee6b502681d",
    "super": true,
    "Resellers": [
      {
        "name": "Test Reseller"
      }
    ]
  }
}
</con:value></con:property></con:properties></con:testCase><con:testCase id="7b506e59-3964-41ef-8b3e-71bb78977e6b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Attempt to create radius attributes with invalid user_id" searchProperties="true"><con:description>TestCase generated for REST Resource [/radius_attributes] located at [/radius_attributes{id}]</con:description><con:settings/><con:testStep type="groovy" name="Given content for the request" id="b7454289-52a6-4259-b0f1-dabecb5940e6"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testCase.testSuite

testUserId = testSuite.getPropertyValue('testUserId')

jsonRequestStr = """
{
	"RadiusAttribute": {
		"user_id": ${testUserId},
		"type": "radreply",
		"attribute": "string",
		"op": ":=",
		"value": "test_pool"
	}
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('invalidCreateRadiusAttributeRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /radius_attributes is Created" id="b37cb56d-0754-4c1b-9859-4b76fe04e288"><con:settings/><con:config service="Radius3 API" resourcePath="/radius_attributes" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /radius_attributes is Created" id="6bc825c2-d1bf-4587-8cf5-903d3c7a6d6f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createRadiusAttributeRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/radius_attributes</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4c3e1b6a-1138-4612-b374-23cba5861e9f" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="16cce5f9-c1cf-435e-989b-37f3e092d29e" name="Invalid HTTP Status Codes"><con:configuration><codes>200, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the expected response is an error" id="58085c75-e814-499b-80c8-8ca227f3df12"><con:settings/><con:config><script>//{
//    "Errors": {
//        "user_id": [
//            "User ID is a Required Field"
//        ]
//    }
//}
</script></con:config></con:testStep><con:properties><con:property><con:name>createRadiusAttributeRequest</con:name><con:value>
{
	"RadiusAttribute": {
		"user_id": null,
		"type": "radreply",
		"attribute": "string",
		"op": ":=",
		"value": "test_pool"
	}
}
</con:value></con:property><con:property><con:name>invalidCreateRadiusAttributeRequest</con:name><con:value>
{
	"RadiusAttribute": {
		"user_id": null,
		"type": "radreply",
		"attribute": "string",
		"op": ":=",
		"value": "test_pool"
	}
}
</con:value></con:property></con:properties></con:testCase><con:testCase id="1af4ec51-26db-41c0-96ad-25e51bd2b338" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Attempt to Create transient package with invalid request" searchProperties="true"><con:description>TestCase generated for REST Resource [/transient_packages] located at [/transient_packages]</con:description><con:settings/><con:testStep type="groovy" name="Given content for the request" id="ad8ebc09-0d66-4da3-8ba5-be78f190956e"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testCase.testSuite

jsonRequestStr = """
{  "Transient Package": {
    "user_id": 1,
    "start": {},
    "end": {},
    "precedence": 5,
    "mode": "Override",
    "speed_up": 60,
    "speed_down": 60,
    "upload_limit": 250,
    "download_limit": 250
  }
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('invalidCreateTransientPackageRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /transient_packages is Created" id="7dba7685-5272-402a-987f-d6a52f4ec36f"><con:settings/><con:config service="Radius3 API" resourcePath="/transient_packages" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /transient_packages is Created" id="49e3212c-4b4d-4508-9e8a-a56d642c0037" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createTransientPackageRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/transient_packages</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6661bf91-d79b-4969-9db6-789f466abc83" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="ba5dfe35-087a-4855-9d33-664536eb7960" name="Invalid HTTP Status Codes"><con:configuration><codes>200, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="12088c7f-aa14-4f81-ac51-22aa3f5d90e4"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def previousStepIndex = context.currentStepIndex - 1
def previousStep = testRunner.testCase.getTestStepAt(previousStepIndex)

def responseContent = previousStep.getPropertyValue("response")
assert responseContent, "A response not found in previous step"
testCase.setPropertyValue('transientPackagesJson', responseContent)

// Expected Response format
//{  "Transient Package": {
//    "id": 1,
//    "user_id": 1,
//    "start": {},
//    "end": {},
//    "precedence": 5,
//    "mode": "Override",
//    "speed_up": 60,
//    "speed_down": 60,
//    "upload_limit": 250,
//    "download_limit": 250
//  }
//}

def jsonResponse = new JsonSlurper().parseText(responseContent)
assert jsonResponse != null
assert jsonResponse."Transient Package" != null
</script></con:config></con:testStep><con:properties><con:property><con:name>createTransientPackageRequest</con:name><con:value>
{  "Transient Package": {
    "user_id": 1,
    "start": {},
    "end": {},
    "precedence": 5,
    "mode": "Override",
    "speed_up": 60,
    "speed_down": 60,
    "upload_limit": 250,
    "download_limit": 250
  }
}
</con:value></con:property><con:property><con:name>transientPackagesJson</con:name><con:value>{
    "Errors": {
        "syntax": "Invalid Syntax"
    }
}</con:value></con:property><con:property><con:name>invalidCreateTransientPackageRequest</con:name><con:value>
{  "Transient Package": {
    "user_id": 1,
    "start": {},
    "end": {},
    "precedence": 5,
    "mode": "Override",
    "speed_up": 60,
    "speed_down": 60,
    "upload_limit": 250,
    "download_limit": 250
  }
}
</con:value></con:property></con:properties></con:testCase><con:testCase id="516973a1-458d-47df-9d3e-d429c0873e56" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Attempt to Create user with invalid request" searchProperties="true"><con:description>TestCase generated for REST Resource [/users] located at [/users]</con:description><con:settings/><con:testStep type="groovy" name="Given content for the request" id="d0a360eb-a5b7-47ce-b28f-f9b6c0cdab76"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testCase.testSuite

def timeStamp = new Date().format("HH:mm:ss.SSS")
def testUsername = "Test User-" + timeStamp
testCase.setPropertyValue('testUsername', testUsername)
def testPassword = UUID.randomUUID().toString()
def testResellerId = testCase.getPropertyValue('testResellerId')

jsonRequestStr = """{
	"User": {
		"username": "${testUsername}",
		"password": "${testPassword}",
		"hashed_password": false,
		"base_speed_up": 60,
		"base_speed_down": 60,
		"session_limit": 1,
		"static_ip": "1.1.1.1",
		"base_upload_limit": 250,
		"base_download_limit": 250,
		"lock": false,
		"reseller_id": ${testResellerId},
		"status_id": 1
	}
}
"""

// Sanity check the json
def jsonObj = new JsonSlurper().parseText(jsonRequestStr)
assert jsonObj != null

testRunner.testCase.setPropertyValue('invalidCreateUserRequest', jsonRequestStr)
</script></con:config></con:testStep><con:testStep type="restrequest" name="When /users is Created" id="05e4a462-f5d2-4ea6-838c-df05ef6a2192"><con:settings/><con:config service="Radius3 API" resourcePath="/users" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="When /users is Created" id="aceb84e2-0111-4372-893b-26e6e5c272b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint><con:request>${#TestCase#createUserRequest}</con:request><con:originalUri>http://radius-dev-v3.uk.cxn-network.net/api/users</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="0308bf6f-7a1c-4f12-b4bd-5656edada603" name="Valid HTTP Status Codes"><con:configuration><codes>400</codes></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="90201e11-763e-40a2-bb7d-b7092e847611" name="Invalid HTTP Status Codes"><con:configuration><codes>200, 500</codes></con:configuration></con:assertion><con:credentials><con:username>martin</con:username><con:password>connexin123456</con:password><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Then the response is as expected" id="aaf7efbc-2494-4d98-9036-0efb40d3bff8"><con:settings/><con:config><script>import groovy.json.JsonSlurper

testCase = testRunner.testCase
testSuite = testRunner.testCase.testSuite
project = testRunner.testCase.testSuite.project

def preceedingStepIndex = context.currentStepIndex - 1
def preceedingStep = testCase.getTestStepAt(preceedingStepIndex)

def responseContent = preceedingStep.getPropertyValue("response")
assert responseContent, "Response not found in preceeding step"
def jsonResponse = new JsonSlurper().parseText(responseContent)
testCase.setPropertyValue('createNasResponse', responseContent)

def expectedNasShortName = testCase.getPropertyValue('testNasShortName')
def expectedNasSecret = testCase.getPropertyValue('testNasSecret')

// Expected Response format
//{
//  "Nas": {
//    "nasname": "1.1.1.1",
//    "shortname": "nas-(UUID time-low part)",
//    "type": "other",
//    "ports": null,
//    "secret": "testing123",
//    "server": null,
//    "community": null,
//    "description": "RADIUS Client"
//  }
//}

assert jsonResponse != null
assert jsonResponse.Nas != null
assert jsonResponse.Nas.nasname != null
assert jsonResponse.Nas.shortname != null
assert jsonResponse.Nas.shortname == expectedNasShortName
assert jsonResponse.Nas.type != null
//assert jsonResponse.Nas.ports != null
assert jsonResponse.Nas.secret != null
assert jsonResponse.Nas.secret == expectedNasSecret
assert jsonResponse.Nas.description != null
</script></con:config></con:testStep><con:properties><con:property><con:name>testUsername</con:name><con:value>Test User-09:44:53.869</con:value></con:property><con:property><con:name>createUserRequest</con:name><con:value>{
	"User": {
		"username": "Test User-17:15:30.391",
		"password": "820c41ff-a71b-4ed4-86a9-1f670cf4ed6e",
		"hashed_password": false,
		"base_speed_up": 60,
		"base_speed_down": 60,
		"session_limit": 1,
		"static_ip": "1.1.1.1",
		"base_upload_limit": 250,
		"base_download_limit": 250,
		"lock": false,
		"reseller_id": null,
		"status_id": 1
	}
}
</con:value></con:property><con:property><con:name>invalidCreateUserRequest</con:name><con:value>{
	"User": {
		"username": "Test User-09:44:53.869",
		"password": "6f310531-734f-4b0f-b8bd-0756635beec2",
		"hashed_password": false,
		"base_speed_up": 60,
		"base_speed_down": 60,
		"session_limit": 1,
		"static_ip": "1.1.1.1",
		"base_upload_limit": 250,
		"base_download_limit": 250,
		"lock": false,
		"reseller_id": null,
		"status_id": 1
	}
}
</con:value></con:property><con:property><con:name>createNasResponse</con:name><con:value>{
    "Errors": {
        "username": [
            "Username must be 20 Characters in Length"
        ],
        "password": [
            "Password must be 20 Characters in Length"
        ],
        "static_ip": [
            "Static IP not in Reseller's Static IP Pool"
        ],
        "reseller_id": [
            "Reseller ID is a Required Field"
        ],
        "status_id": [
            "Status ID is not Valid"
        ]
    }
}</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="909aaff4-4eb2-4ff8-b145-2d58da0b7ff4" name="Library" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ea2636a6-d034-4e14-a972-333706cafe42" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Meta-Programming" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Generate Test Plan for project from TestCases" id="a206a579-e378-49da-9d84-4eedc85b4000"><con:settings/><con:config><script>def project = testRunner.getTestCase().getTestSuite().getProject();
String projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
log.info "Project : ${project.name}"
log.info "projectPath : ${projectPath}"
String isoTimeStamp = new Date().format('yyyy-mm-dd-kkmmss')
log.info "isoTimeStamp : ${isoTimeStamp}"

def file = new File("${projectPath}/bdd/${project.name}.story")
file.text = "# ${project.name}\n# ${isoTimeStamp}\n"

for(testSuite in project.getTestSuiteList()) {
	log.info "_ ${testSuite.label} ${testSuite.isDisabled() == true ? "(Disabled)" : ""}"
	if (testSuite.isDisabled() == true) {
		file.append("@disabled\n")
	}
	file.append("Feature : ${testSuite.label}\n")

	for(testCase in testSuite.getTestCaseList()) {
		log.info "__ ${testCase.label} ${testCase.isDisabled() == true ? "(Disabled)" : ""}"
		if (testCase.isDisabled() == true) {
			file.append("\t@disabled\n")
		}
		file.append("\tScenario : ${testCase.label}\n")

		for(testStep in testCase.getTestStepList()) {
			log.info "___ ${testStep.label} ${testStep.isDisabled() == true ? "(Disabled)" : ""}"
			file.append("\t\t${testStep.label}\n")

			if (testStep instanceof com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep) {				
				for(assertion in testStep.getAssertionList()) {
					log.info "____ ${assertion.label}"
					file.append("\t\t\t${assertion.label}\n")
				}
			}
		}
	}
}


//Feature: feature narrative
//  Scenario: scenario narrative
//   Given precondition
//     And another precondition
//    When the operation is performed
//    Then the post-condition
//     And another post-condition
</script></con:config></con:testStep><con:testStep type="groovy" name="Refactor auto generated tests in current project" id="cf0d2327-d32e-4907-a844-d8dae8158af3"><con:settings/><con:config><script>
refactorGeneratedTests(testRunner.testCase.testSuite.project)
cleanUp(testRunner.testCase.testSuite.project)

def refactorGeneratedTests(def thisProject) {
	assert thisProject
	log.info "Refactoring ${thisProject.name}"

	for (testSuite in thisProject.testSuiteList) {
		if (!testSuite.isDisabled()) {
			log.info "- ${testSuite.name}"
			for (testCase in testSuite.testCaseList) {
				if (!testCase.isDisabled()) {
					log.info "-- ${testCase.name}"

					renameRequestSteps(testCase)

					forEachRequestMake(testCase)

					ensureBdd(testCase)
				}
			}
		}
	}
}

def renameRequestSteps(testCase) {
	assert testCase
	assert testCase instanceof WsdlTestCase
	def languageMap = [ "GET": 'Retrieved', "POST": 'Created', "PUT": "Updated", 'DELETE': 'Deleted']
//	log.info "languageMap : ${languageMap}"

	boolean isFirst = true
	for (testStep in testCase.testStepList) {
		log.info "--- ${testStep.name}"
		if (isREST(testStep)) {
			if (testStep.label.startsWith("Request")) {
				// TODO: sanitise rest operation string to remove slash, underscore etc.
				String restOperation = testStep.getOperation().getName()
//				log.info "restOperation : " + restOperation
				String methodType = testStep.getRestMethod().getMethod()
//				log.info "methodType : ${methodType}"
				actionName = languageMap.get(methodType)
//				log.info "actionName : ${actionName}"
				String newStepName = "When ${restOperation} is ${actionName}"
				log.info "${newStepName}"

				testStep.setName(newStepName)
			}
		}
	}
}

def forEachRequestMake(testCase) {
	assert testCase
	assert testCase instanceof WsdlTestCase
	def languageMap = [ "GET": 'Retrieve', "POST": 'Create', "PUT": "Update", 'DELETE': 'Delete']
//	log.info "languageMap : ${languageMap}"
	
	boolean isFirst = true
	for (testStep in testCase.testStepList) {
		log.info "--- ${testStep.name}"
		if (isREST(testStep)) {
			// TODO: sanitise rest operation string to remove slash, underscore etc.
			String restOperation = testStep.getOperation().getName()
//			log.info "restOperation : " + restOperation
			String methodType = testStep.getRestMethod().getMethod()
//			log.info "methodType : ${methodType}"
			actionName = languageMap.get(methodType)
//			log.info "actionName : ${actionName}"
			String newTestCaseName = "${actionName} ${restOperation} "
			log.info "${newTestCaseName}"

			if (isFirst) {
				testCase.setName(newTestCaseName)
				isFirst = false
			} else {
				// clone the test for each REST request
				testCase.testSuite.cloneTestCase(testCase, newTestCaseName);
			}
		}
	}
}

def ensureBdd(testCase) {
	assert testCase
	assert testCase instanceof WsdlTestCase

	givenStep = "Given content for the request"
	if (testCase.getTestStepByName(givenStep) == null) {
		testCase.insertTestStep("groovy", givenStep, 0)
		// TODO: add script template.
		//  testStep.setScriptText(...)
	}

	thenStep = "Then the response is as expected"
	if (testCase.getTestStepByName(thenStep) == null) {
		testCase.addTestStep("groovy", thenStep)
		// TODO: add script template.
		//  testStep.setScriptText(...)
	}
}

def isREST(def testStep) {
	assert testStep
	return testStep instanceof RestTestRequestStep;
}

def addHttpStatusAssertions(testStep) {
	assert testStep
	return testStep instanceof RestTestRequestStep;
	if (testStep.getAssertionCount() == 0) {
		testStep.addAssertion("Valid HTTP Status Codes").setCodes("200").setName("AND ")
		// TODO .setName("AND the servers response is Valid")

		testStep.addAssertion("Invalid HTTP Status Codes").setCodes("400, 500")
		// TODO .setName("AND the servers response is Valid")

		// TODO add "AND the content type is as expected (...)"
	}
	log.info testStep.getAssertionList()
}

def cleanUp(def thisProject) {
	assert thisProject
	log.info "${thisProject.name}"
	for (testSuite in thisProject.testSuiteList) {
		log.info "- ${testSuite.name}"
		for (testCase in testSuite.testCaseList) {
			log.info "-- ${testCase.name}"
			String actionName = testCase.name.split().head()
			log.info "-- ${actionName}"
			for (testStep in testCase.testStepList) {
				log.info "--- ${testStep.name} ${testStep.getClass().getSimpleName()}"
				if (isREST(testStep)) {
					if (testStep.name.contains(actionName)) {
						log.info("keep ${testStep.name} in ${testCase.name}")
					} else {
						log.info("remove ${testStep.name} from ${testCase.name}")
						testCase.removeTestStep(testStep)
					}
				}
			}
		}
	}
}

//	https://www.soapui.org/apidocs/com/eviware/soapui/impl/wsdl/teststeps/RestTestRequestStep.html
//	class com.eviware.soapui.impl.wsdl.WsdlProject
//	class com.eviware.soapui.impl.wsdl.WsdlTestSuite
//	class com.eviware.soapui.impl.wsdl.testcase.WsdlTestCase
//	class com.eviware.soapui.impl.wsdl.teststeps.WsdlGroovyScriptTestStep

log.info context.getClass()
log.info testRunner.getClass()
log.info testRunner.testCase.getClass()
log.info testRunner.testCase.testSuite.getClass()
log.info testRunner.testCase.testSuite.project.getClass()
log.info testRunner.testCase.testSuite.project.workspace.getClass()

import com.eviware.soapui.impl.wsdl.WsdlTestSuite
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCase
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep
</script></con:config></con:testStep><con:testStep type="groovy" name="Add HTTP STATUS Assertion to all REST TestSteps" id="f936e2a3-e523-49b6-8a4d-be9bc4ec1d8a"><con:settings/><con:config><script>
addAssertions(testRunner.testCase.testSuite.project)

def addAssertions(def thisProject) {
	assert thisProject
	log.info "${thisProject.name}"
	for (testSuite in thisProject.testSuiteList) {
		log.info "- ${testSuite.name}"
		for (testCase in testSuite.testCaseList) {
			log.info "-- ${testCase.name}"
			for (testStep in testCase.testStepList) {
				log.info "--- ${testStep.name} ${testStep.getClass().getSimpleName()}"
				if (isREST(testStep)) {
					if (testStep.getAssertionCount() == 0) {
						testStep.addAssertion("Valid HTTP Status Codes").setCodes("200")
						testStep.addAssertion("Invalid HTTP Status Codes").setCodes("400, 500")
					}
					log.info testStep.getAssertionList()
				}
			}
		}
	}
}

def isREST(def testStep) {
	return testStep instanceof RestTestRequestStep;
}

//	https://www.soapui.org/apidocs/com/eviware/soapui/impl/wsdl/teststeps/RestTestRequestStep.html
//	class com.eviware.soapui.impl.wsdl.WsdlProject
//	class com.eviware.soapui.impl.wsdl.WsdlTestSuite
//	class com.eviware.soapui.impl.wsdl.testcase.WsdlTestCase
//	class com.eviware.soapui.impl.wsdl.teststeps.WsdlGroovyScriptTestStep

log.info context.getClass()
log.info testRunner.getClass()
log.info testRunner.testCase.getClass()
log.info testRunner.testCase.testSuite.getClass()
log.info testRunner.testCase.testSuite.project.getClass()
log.info testRunner.testCase.testSuite.project.workspace.getClass()

import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
</script></con:config></con:testStep><con:testStep type="groovy" name="Make BDD TestCases from REST requests" id="eedacea2-d079-464e-bffc-db3494e45337"><con:settings/><con:config><script>
addBddSteps(testRunner.testCase.testSuite.project)

def addBddSteps(def thisProject) {
	assert thisProject
	log.info "${thisProject.name}"
	for (testSuite in thisProject.testSuiteList) {
		if (!testSuite.isDisabled()) {
			log.info "- ${testSuite.name}"
			for (testCase in testSuite.testCaseList) {
				if (!testCase.isDisabled()) {
					log.info "-- ${testCase.name}"
					if (isREST(testCase)) {
						givenStep = "Given json data for the request"
						if (testCase.getTestStepByName(givenStep) == null) {
							testCase.addTestStep("groovy", givenStep)
						} else {
							log.info "${givenStep} already exists for ${testCase.name}"
						}

						thenStep = "Then verify the response is valid"
						if (testCase.getTestStepByName(thenStep) == null) {
							testCase.addTestStep("groovy", thenStep)
						} else {
							log.info "${thenStep} already exists for ${testCase.name}"
						}
					}
				}
			}
		}
	}
}

def isREST(def testCase) {
	assert testCase
	log.info "-- ${testCase.name}"
	for (testStep in testCase.testStepList) {
		log.info "-- ${testStep.name} ${testStep.getClass().getSimpleName()}"
		if (testStep instanceof com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep) {
			return true;		
		}
	}
}


//	https://www.soapui.org/apidocs/com/eviware/soapui/impl/wsdl/teststeps/RestTestRequestStep.html

//	class com.eviware.soapui.impl.wsdl.WsdlProject
//	class com.eviware.soapui.impl.wsdl.WsdlTestSuite
//	class com.eviware.soapui.impl.wsdl.testcase.WsdlTestCase
//	class com.eviware.soapui.impl.wsdl.teststeps.WsdlGroovyScriptTestStep

log.info context.getClass()
log.info testRunner.getClass()
log.info testRunner.getClass()
log.info testRunner.testCase.getClass()
log.info testRunner.testCase.testSuite.getClass()
log.info testRunner.testCase.testSuite.project.getClass()
</script></con:config></con:testStep><con:testStep type="groovy" name="Cleanup redundant REST Requests" id="bde679d7-cfe1-4342-8997-91b22d1dc6ce"><con:settings/><con:config><script>
cleanUp(testRunner.testCase.testSuite.project)

def cleanUp(def thisProject) {
	assert thisProject
	log.info "${thisProject.name}"
	for (testSuite in thisProject.testSuiteList) {
		log.info "- ${testSuite.name}"
		for (testCase in testSuite.testCaseList) {
			log.info "-- ${testCase.name}"
			String actionName = testCase.name.split().head()
			log.info "-- ${actionName}"
			for (testStep in testCase.testStepList) {
				log.info "--- ${testStep.name} ${testStep.getClass().getSimpleName()}"
				if (isREST(testStep)) {
					if (testStep.name.contains(actionName)) {
						log.info("keep ${testStep.name} in ${testCase.name}")
					} else {
						log.info("remove ${testStep.name} from ${testCase.name}")
						testCase.removeTestStep(testStep)
					}
				}
			}
		}
	}
}

def isREST(def testStep) {
	return testStep instanceof RestTestRequestStep;
}

//	https://www.soapui.org/apidocs/com/eviware/soapui/impl/wsdl/teststeps/RestTestRequestStep.html
//	class com.eviware.soapui.impl.wsdl.WsdlProject
//	class com.eviware.soapui.impl.wsdl.WsdlTestSuite
//	class com.eviware.soapui.impl.wsdl.testcase.WsdlTestCase
//	class com.eviware.soapui.impl.wsdl.teststeps.WsdlGroovyScriptTestStep

log.info context.getClass()
log.info testRunner.getClass()
log.info testRunner.testCase.getClass()
log.info testRunner.testCase.testSuite.getClass()
log.info testRunner.testCase.testSuite.project.getClass()
log.info testRunner.testCase.testSuite.project.workspace.getClass()

import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="4853237d-0bd7-44f3-bb71-e3504077508d"><con:settings/><con:config><script/></con:config></con:testStep><con:testStep type="groovy" name="Refactor TestCase to regular English language" id="5ce77a8a-3a27-4bc8-a6f0-8e3de1ca025f"><con:settings/><con:config><script>
refactorGeneratedTests(testRunner.testCase.testSuite.project)

def refactorGeneratedTests(def thisProject) {
	assert thisProject
	log.info "Refactoring ${thisProject.name}"

	for (testSuite in thisProject.testSuiteList) {
		if (!testSuite.isDisabled()) {
			log.info "- ${testSuite.name}"
			for (testCase in testSuite.testCaseList) {
				if (!testCase.isDisabled()) {
					log.info "-- ${testCase.name}"
					String narrative = testCase.name
					narrative = narrative.replace(' by id', " by ID")
					testCase.name = narrative
				}
			}
		}
	}
}

import com.eviware.soapui.impl.wsdl.WsdlTestSuite
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCase
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep
</script></con:config></con:testStep><con:testStep type="groovy" name="Script Assertions" id="1e5596cf-8f88-4b24-92c4-773e60d9195d"><con:settings/><con:config><script>
passed = true
verify(1 == 1)
verify(1 != 1)
verify(2 == 2)
verify(2 != 2)
assert passed

def verify(def condition) {
	try {
		assert condition
	} catch (AssertionError assertion) {
		log.info assertion
		passed = false
	}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Add Authorisation Header to all REST TestSteps" id="f9ea7f5a-ef8a-4b85-a620-ce5716f6c4e0"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap 

def project = context.testCase.testSuite.project
  
def token = "\${"+"#"+"Project"+"#"+"token}"
log.info(token)

def valueOf = { key -> testSuite.getPropertyValue( key ) }

project.testSuiteList.each{ testSuite ->
	testSuite.testCaseList.each { testCase ->
   		testCase.testStepList.each { testStep ->
      		if (testStep instanceof WsdlTestRequestStep || testStep instanceof RestTestRequestStep) {
				def headers = new StringToStringMap()
				headers.put("Authorization", token)
         			log.info("Add header ${headers} to ${testCase.label}")
         			testStep.testRequest.setRequestHeaders(headers)
			}
		}
	}
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Add Accepts Header to all REST TestSteps" id="3bdca7f1-f9c0-4f4a-973d-49b807ad1dcf"><con:settings/><con:config><script>import com.eviware.soapui.impl.wsdl.teststeps.*
import com.eviware.soapui.support.types.StringToStringMap 

def project = context.testCase.testSuite.project  
def headerValue = "application/json"

project.testSuiteList.each{ testSuite ->
	testSuite.testCaseList.each { testCase ->
   		testCase.testStepList.each { testStep ->
      		if (testStep instanceof WsdlTestRequestStep || testStep instanceof RestTestRequestStep) {
				def headers = new StringToStringMap()
				headers.put("accept", headerValue)
         			log.info("Add header ${headers} to ${testCase.label}")
         			testStep.testRequest.setRequestHeaders(headers)
			}
		}
	}
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7090729c-4003-438a-973d-49ad02454731" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Useful Functions" searchProperties="true"><con:settings/><con:testStep type="groovy" name="TimeStamp" id="26272c58-c7a3-4292-9ce3-97b086c9dbc8"><con:settings/><con:config><script>
log.info new Date().format("HH:mm:ss.SSS", TimeZone.getTimeZone('UTC'))
log.info new Date().format("yyyyMMdd-HH:mm:ss.SSS", TimeZone.getTimeZone('UTC'))
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="653d4b7c-fede-4d27-ac1c-214c1ed60d35" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Reporting" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="c0aa8d03-8989-494a-8918-068eb0a2c432" port="8089" path="/" host="TECH3" name="RADIUS3 Mock REST Service"><con:settings/><con:properties/><con:restMockAction name="/accounting_entries" method="GET" resourcePath="/accounting_entries" id="bd1dc882-fde0-46bf-9e21-8109497a6d89"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Empty Response" id="d48be15d-58a1-4b4b-8490-8d75972508ea" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "AccountingEntries": [],
  "meta": {
    "page": 1,
    "limit": 25
  }
}
</con:responseContent></con:response><con:response name="One Record" id="93cead74-a527-4d47-8d74-1e548e932b1a" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "AccountingEntires": [
    {
      "radacctid": 0,
      "acctsessionid": 0,
      "acctuniqueid": "string",
      "username": "string",
      "groupname": "string",
      "realm": "string",
      "nasipaddress": "198.51.100.42",
      "nasportid": "string",
      "nasporttype": "string",
      "acctstarttime": "2019-04-24T13:40:55.950Z",
      "acctupdatetime": "2019-04-24T13:40:55.950Z",
      "acctstoptime": "2019-04-24T13:40:55.950Z",
      "acctinterval": 0,
      "acctsessiontime": 0,
      "acctauthentic": "string",
      "connectinfo_start": "string",
      "connectinfo_stop": "string",
      "acctinputoctets": 0,
      "acctoutputoctets": 0,
      "calledstationid": "string",
      "callingstationid": "string",
      "acctterminatecause": "string",
      "servicetype": "string",
      "framedprotocol": "string",
      "framedipaddress": "string"
    }
  ],
  "meta": {
    "page": 1,
    "limit": 0
  }
}</con:responseContent></con:response><con:response name="Page of Records" id="f4f0c4e3-3454-4823-af7d-7631bf2ec0ee" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
   "AccountingEntries":    [
            {
         "radacctid": "36",
         "acctsessionid": "81200d4e",
         "acctuniqueid": "36d88b8586ba1fe220204bb5ddb5cf58",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "1.1.1.1",
         "nasportid": "",
         "nasporttype": "other",
         "acctstarttime": "2019-04-16T16:15:00Z",
         "acctupdatetime": "2019-04-16T16:15:00Z",
         "acctstoptime": null,
         "acctinterval": null,
         "acctsessiontime": null,
         "acctauthentic": null,
         "connectinfo_start": null,
         "connectinfo_stop": null,
         "acctinputoctets": "92233722589",
         "acctoutputoctets": "8589934369",
         "calledstationid": "callingid",
         "callingstationid": "",
         "acctterminatecause": "",
         "servicetype": null,
         "framedprotocol": null,
         "framedipaddress": ""
      },
            {
         "radacctid": "37",
         "acctsessionid": "00000FA6",
         "acctuniqueid": "f2267386067043d1e4a9180755b5d955",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "other",
         "acctstarttime": "2019-04-09T00:00:00Z",
         "acctupdatetime": "2019-04-09T10:01:00Z",
         "acctstoptime": "2019-04-09T10:01:00Z",
         "acctinterval": "62",
         "acctsessiontime": "570",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "15734",
         "acctoutputoctets": "58",
         "calledstationid": "calledid",
         "callingstationid": "callingid",
         "acctterminatecause": "User-Request",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.29"
      },
            {
         "radacctid": "265",
         "acctsessionid": "0/0/0/50.500_0300000000019DCE",
         "acctuniqueid": "d58dd570f90bd59a494828521d485540",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-04-04T11:37:00Z",
         "acctupdatetime": "2019-04-04T11:51:45Z",
         "acctstoptime": "2019-04-04T11:52:01Z",
         "acctinterval": "63",
         "acctsessiontime": "901",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "41135674",
         "acctoutputoctets": "95046769",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "Admin-Reset",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.40"
      },
            {
         "radacctid": "264",
         "acctsessionid": "0/0/0/50.500_0300000000019DCD",
         "acctuniqueid": "19941ba071157ce1a8173a3f5c968412",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-04-04T11:18:27Z",
         "acctupdatetime": "2019-04-04T11:22:36Z",
         "acctstoptime": "2019-04-04T11:23:01Z",
         "acctinterval": "63",
         "acctsessiontime": "274",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "52856",
         "acctoutputoctets": "154420",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "Admin-Reset",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.39"
      },
            {
         "radacctid": "263",
         "acctsessionid": "0/0/0/50.500_0300000000019DCB",
         "acctuniqueid": "459f46fb0fc9934df4fef677cfbd8cce",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-04-04T11:14:10Z",
         "acctupdatetime": "2019-04-04T11:14:10Z",
         "acctstoptime": "2019-04-04T11:15:04Z",
         "acctinterval": null,
         "acctsessiontime": "54",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "41677243",
         "acctoutputoctets": "181561527",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "User-Request",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": ""
      },
            {
         "radacctid": "262",
         "acctsessionid": "0/0/0/50.500_0300000000019DC9",
         "acctuniqueid": "16f8063eaa1615e255abc73f4e7b382b",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-04-04T11:06:09Z",
         "acctupdatetime": "2019-04-04T11:10:21Z",
         "acctstoptime": "2019-04-04T11:11:01Z",
         "acctinterval": "61",
         "acctsessiontime": "292",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "439233",
         "acctoutputoctets": "17760564",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "Admin-Reset",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.37"
      },
            {
         "radacctid": "261",
         "acctsessionid": "0/0/0/50.500_0300000000019DC7",
         "acctuniqueid": "f93788fb87f180dcb750e9aa50e35b7c",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-04-04T11:04:19Z",
         "acctupdatetime": "2019-04-04T11:04:19Z",
         "acctstoptime": "2019-04-04T11:04:56Z",
         "acctinterval": null,
         "acctsessiontime": "37",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "49909",
         "acctoutputoctets": "474839",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "Admin-Reset",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": ""
      },
            {
         "radacctid": "260",
         "acctsessionid": "0/0/0/50.500_0300000000019DC6",
         "acctuniqueid": "ef0289f99401d726d542724566ba266e",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-04-04T11:01:08Z",
         "acctupdatetime": "2019-04-04T11:04:13Z",
         "acctstoptime": "2019-04-04T11:04:17Z",
         "acctinterval": "60",
         "acctsessiontime": "189",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "166359419",
         "acctoutputoctets": "43897578",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "User-Request",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.34"
      },
            {
         "radacctid": "259",
         "acctsessionid": "0/0/0/50.500_0300000000019DC5",
         "acctuniqueid": "a45c462fd3a452d13d5d428f1e075dbf",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-04-04T10:58:51Z",
         "acctupdatetime": "2019-04-04T10:59:55Z",
         "acctstoptime": "2019-04-04T11:00:02Z",
         "acctinterval": "64",
         "acctsessiontime": "71",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "279904",
         "acctoutputoctets": "898097",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "Admin-Reset",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.33"
      },
            {
         "radacctid": "258",
         "acctsessionid": "0/0/0/50.500_0300000000019DC4",
         "acctuniqueid": "0497cd0a3b2a8d09bc37691abe2d56bf",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-04-04T10:52:44Z",
         "acctupdatetime": "2019-04-04T10:56:56Z",
         "acctstoptime": "2019-04-04T10:58:01Z",
         "acctinterval": "60",
         "acctsessiontime": "317",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "4450005",
         "acctoutputoctets": "112947433",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "Admin-Reset",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.32"
      },
            {
         "radacctid": "257",
         "acctsessionid": "0/0/0/50.500_0300000000019DB7",
         "acctuniqueid": "95693d32540a089bab753a75fadf7cc7",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-04-04T10:09:03Z",
         "acctupdatetime": "2019-04-04T10:10:06Z",
         "acctstoptime": "2019-04-04T10:10:55Z",
         "acctinterval": "63",
         "acctsessiontime": "112",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "159205060",
         "acctoutputoctets": "250894990",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "User-Request",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.31"
      },
            {
         "radacctid": "266",
         "acctsessionid": "fga768asg",
         "acctuniqueid": "fva8tsad8ftasdy7as8asrf6abs67ft",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "2.2.2.2",
         "nasportid": null,
         "nasporttype": "other",
         "acctstarttime": "2019-03-30T00:01:00Z",
         "acctupdatetime": "2019-03-30T00:01:00Z",
         "acctstoptime": "2019-03-30T00:01:00Z",
         "acctinterval": null,
         "acctsessiontime": null,
         "acctauthentic": null,
         "connectinfo_start": null,
         "connectinfo_stop": null,
         "acctinputoctets": "9223372258",
         "acctoutputoctets": "85899343698",
         "calledstationid": "test",
         "callingstationid": "",
         "acctterminatecause": "",
         "servicetype": null,
         "framedprotocol": null,
         "framedipaddress": ""
      },
            {
         "radacctid": "256",
         "acctsessionid": "0/0/0/50.500_0300000000019D5A",
         "acctuniqueid": "def8b16e6c2ce7b7dbbe20cc73434a6a",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-03-21T11:43:22Z",
         "acctupdatetime": "2019-03-21T11:51:37Z",
         "acctstoptime": "2019-03-21T11:51:57Z",
         "acctinterval": "61",
         "acctsessiontime": "515",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "210013",
         "acctoutputoctets": "1029548",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "User-Request",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.29"
      },
            {
         "radacctid": "255",
         "acctsessionid": "0/0/0/50.500_0300000000019D58",
         "acctuniqueid": "5aa5b89f337f5011e49facd72acd31be",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-03-21T11:08:39Z",
         "acctupdatetime": "2019-03-21T11:42:16Z",
         "acctstoptime": "2019-03-21T11:42:18Z",
         "acctinterval": "65",
         "acctsessiontime": "2019",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "41477607",
         "acctoutputoctets": "57333756",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "Admin-Reset",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.28"
      },
            {
         "radacctid": "254",
         "acctsessionid": "0/0/0/50.500_0300000000019D55",
         "acctuniqueid": "720b80001363b9bda465b23c0679b765",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-03-21T10:57:52Z",
         "acctupdatetime": "2019-03-21T11:06:23Z",
         "acctstoptime": "2019-03-21T11:06:31Z",
         "acctinterval": "61",
         "acctsessiontime": "519",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "169432577",
         "acctoutputoctets": "183738110",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "Admin-Reset",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.27"
      },
            {
         "radacctid": "253",
         "acctsessionid": "0/0/0/50.500_0300000000019D54",
         "acctuniqueid": "ba76e12288263fa74fcbbb4e43e76f32",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-03-21T10:56:27Z",
         "acctupdatetime": "2019-03-21T10:57:30Z",
         "acctstoptime": "2019-03-21T10:57:50Z",
         "acctinterval": "63",
         "acctsessiontime": "83",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "4418559",
         "acctoutputoctets": "246578641",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "User-Request",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.26"
      },
            {
         "radacctid": "252",
         "acctsessionid": "0/0/0/50.500_0300000000019D53",
         "acctuniqueid": "f37cc0ce30b4a8f6c0e6c9d257afcc63",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-03-21T10:52:11Z",
         "acctupdatetime": "2019-03-21T10:55:17Z",
         "acctstoptime": "2019-03-21T10:56:14Z",
         "acctinterval": "63",
         "acctsessiontime": "243",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "312804027",
         "acctoutputoctets": "226913625",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "Admin-Reset",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.25"
      },
            {
         "radacctid": "251",
         "acctsessionid": "0/0/0/50.500_0300000000019D52",
         "acctuniqueid": "f000df33122578b7d4a8704413342ed9",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-03-21T10:48:20Z",
         "acctupdatetime": "2019-03-21T10:51:33Z",
         "acctstoptime": "2019-03-21T10:52:09Z",
         "acctinterval": "65",
         "acctsessiontime": "229",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "171385344",
         "acctoutputoctets": "444294600",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "User-Request",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.24"
      },
            {
         "radacctid": "250",
         "acctsessionid": "0/0/0/50.500_0300000000019D43",
         "acctuniqueid": "d1137616f07211474a277a096f4cbf72",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-03-21T10:17:19Z",
         "acctupdatetime": "2019-03-21T10:17:19Z",
         "acctstoptime": "2019-03-21T10:17:25Z",
         "acctinterval": null,
         "acctsessiontime": "6",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "134007",
         "acctoutputoctets": "752304",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "User-Request",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": ""
      },
            {
         "radacctid": "249",
         "acctsessionid": "0/0/0/50.500_0300000000019D42",
         "acctuniqueid": "c02fe9799f23f1ead15353577c7487b9",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-03-21T10:10:21Z",
         "acctupdatetime": "2019-03-21T10:16:34Z",
         "acctstoptime": "2019-03-21T10:17:16Z",
         "acctinterval": "62",
         "acctsessiontime": "415",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "4263373",
         "acctoutputoctets": "165123040",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "User-Request",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.22"
      },
            {
         "radacctid": "248",
         "acctsessionid": "0/0/0/50.500_0300000000019C64",
         "acctuniqueid": "95e6ba175cf971d95706a2af6b162a8e",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-03-19T09:38:34Z",
         "acctupdatetime": "2019-03-19T09:38:34Z",
         "acctstoptime": "2019-03-19T09:39:02Z",
         "acctinterval": null,
         "acctsessiontime": "28",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "129900",
         "acctoutputoctets": "679347",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "Admin-Reset",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": ""
      },
            {
         "radacctid": "247",
         "acctsessionid": "0/0/0/50.500_0300000000019C63",
         "acctuniqueid": "5016a0b93a300cd096e3f3c35ec98f33",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-03-19T09:33:19Z",
         "acctupdatetime": "2019-03-19T09:38:30Z",
         "acctstoptime": "2019-03-19T09:38:31Z",
         "acctinterval": "63",
         "acctsessiontime": "312",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "443070",
         "acctoutputoctets": "1153031",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "User-Request",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.17"
      },
            {
         "radacctid": "246",
         "acctsessionid": "0/0/0/50.500_0300000000019C5D",
         "acctuniqueid": "96c1b10a8acd89d2abb6179868f3e4e4",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-03-19T09:24:37Z",
         "acctupdatetime": "2019-03-19T09:24:37Z",
         "acctstoptime": "2019-03-19T09:25:01Z",
         "acctinterval": null,
         "acctsessiontime": "24",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "1426798",
         "acctoutputoctets": "53919917",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "Admin-Reset",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": ""
      },
            {
         "radacctid": "245",
         "acctsessionid": "0/0/0/50.500_0300000000019C55",
         "acctuniqueid": "c36e7b86bf4054d0f1b9965d7234b067",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-03-18T17:12:07Z",
         "acctupdatetime": "2019-03-18T17:31:37Z",
         "acctstoptime": "2019-03-18T17:32:13Z",
         "acctinterval": "64",
         "acctsessiontime": "1206",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "17103639",
         "acctoutputoctets": "940483608",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "User-Request",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": "10.0.0.15"
      },
            {
         "radacctid": "244",
         "acctsessionid": "0/0/0/50.500_0300000000019C09",
         "acctuniqueid": "9fd0d09ec2d48b37849bab0ed6aea0ec",
         "username": "5F65BFC54263252B7998",
         "groupname": "",
         "realm": "",
         "nasipaddress": "185.6.154.1",
         "nasportid": "0/0/0/50.500",
         "nasporttype": "PPPoEoQinQ",
         "acctstarttime": "2019-03-18T16:56:57Z",
         "acctupdatetime": "2019-03-18T16:56:57Z",
         "acctstoptime": "2019-03-18T16:57:02Z",
         "acctinterval": null,
         "acctsessiontime": "5",
         "acctauthentic": "RADIUS",
         "connectinfo_start": "",
         "connectinfo_stop": "",
         "acctinputoctets": "0",
         "acctoutputoctets": "76",
         "calledstationid": "office.ptp.torpoint.hu.uk.cxn-network.net",
         "callingstationid": "B4-B6-86-BA-3B-B0",
         "acctterminatecause": "Admin-Reset",
         "servicetype": "Framed-User",
         "framedprotocol": "PPP",
         "framedipaddress": ""
      }
   ],
   "meta":    {
      "page": 1,
      "limit": 25
   }
}</con:responseContent><con:header><con:name>cache-control</con:name><con:value>no-cache</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/accounting_entries/" method="GET" resourcePath="/accounting_entries/" id="90c999b1-2d2f-42a5-a32b-5cb9a380a7ea"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="5fee174e-d310-42e4-bcfb-12997f3f56ae" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/admins" method="GET" resourcePath="/admins" id="2fc58ee3-c099-494e-98d8-ec588d8256b9"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="def695ff-91cd-4369-bb06-56fc091ccc8e" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/admins" method="POST" resourcePath="/admins" id="19438027-f41c-4862-8f17-2069f8b8da53"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="946fc09b-41d2-4cd8-b77e-46ad0fb10c84" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/admins/" method="GET" resourcePath="/admins/" id="2116d365-0989-4d52-bf11-5a1c14c617e2"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="4b7410df-9b88-4f24-ac0b-8e82248b451c" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/admins/" method="PUT" resourcePath="/admins/" id="47a737f0-a449-434e-9f23-4810da1e76f9"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="7703d1ac-9a9d-44b7-aeb9-cd43999abcf5" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/admins/" method="DELETE" resourcePath="/admins/" id="5409ad67-e86e-4b15-842e-23951e1a841c"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="df729d95-372a-41df-88e0-f1fca8af60cb" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/audits" method="GET" resourcePath="/audits" id="44e7d1f7-c238-488b-b208-ef2b03cc59d1"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="02e3488f-0f29-4024-8e7a-0a64f0c9cb82" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/audits/" method="GET" resourcePath="/audits/" id="00b8da68-b864-4072-abb1-62f5b83d2acf"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="3f03c9e9-61f8-4c15-a4c7-17b96f6ecbf1" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/event_types" method="GET" resourcePath="/event_types" id="7502c77f-bf71-4d5a-b314-ab44fcee7524"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="9a22845d-ef3c-482c-8b32-aa56c7feefdb" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/event_types/" method="GET" resourcePath="/event_types/" id="0c62d552-0c35-46b8-90f9-6c9c986b00a5"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="07919278-6c7b-4eb7-898e-e89dd14a60d9" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/events" method="GET" resourcePath="/events" id="e7503cfd-d3b7-4e05-a242-027f694d7e4b"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="66ef5a31-5141-4791-ba1b-cecfa8c2874e" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/events/" method="GET" resourcePath="/events/" id="4463e512-1c1a-4bf3-90e0-997a9bfaa4cb"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="b9d1fa0d-c52b-4d4c-8362-dcc6a0ee9832" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/nas" method="GET" resourcePath="/nas" id="6717bb2e-3cc0-4613-9f68-2489f03f25fc"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="84bfbc3d-573a-4a82-b05b-65ab7c64dfde" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/nas" method="POST" resourcePath="/nas" id="f9472a9f-8903-43b5-9a56-675794a98351"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="c46a78d8-c7d5-4bed-9158-45f7d61a3d97" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/nas/" method="GET" resourcePath="/nas/" id="aaa97f2e-8e35-45f4-97e8-f0e1cd5b8a74"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="d8f1dbf1-5f57-4308-acce-e7b5589fb462" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/nas/" method="PUT" resourcePath="/nas/" id="ad74cd5e-f308-4b8c-a906-aabb896820af"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="72231f1c-1559-4d71-ab69-c8ea6d144b31" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/nas/" method="DELETE" resourcePath="/nas/" id="f7b45136-ca07-45de-8881-43046913cabb"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="303a1a85-97ee-427c-afe8-f2c0db817d22" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/radius_attributes" method="GET" resourcePath="/radius_attributes" id="dceb6d73-7525-45f3-8fc0-c66b2757b405"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="1b45c6fb-14a9-405b-b50b-f2fd3786c6e0" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/radius_attributes" method="POST" resourcePath="/radius_attributes" id="bae93fd5-789c-4996-8c77-4c15831ddc00"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="67079c60-817a-4a80-bc0d-1af1648c091c" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/radius_attributes/" method="GET" resourcePath="/radius_attributes/" id="77ac8aa0-a09b-4664-9550-01fc8e8128f4"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="7eb0888a-c859-446f-8856-9d945cf2fda3" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/radius_attributes/" method="PUT" resourcePath="/radius_attributes/" id="4bc04673-b00f-4fd7-a385-76d368adac31"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="d086242e-6590-4dcf-9178-f347169407d4" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/radius_attributes/" method="DELETE" resourcePath="/radius_attributes/" id="778c74bc-09b6-47cd-abbf-29bd31f16c95"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="5565343b-de72-4852-9a2e-fb813173e6a8" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/resellers" method="GET" resourcePath="/resellers" id="5babf14b-612f-409c-9ea2-3bb83a7d741b"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="fe78b975-1825-499a-9f31-b491843754b3" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/resellers" method="POST" resourcePath="/resellers" id="b539a319-3100-4eac-b88d-ddc1b344f914"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="b6892f64-a555-4d66-8cf8-cde671f1f559" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/resellers/" method="GET" resourcePath="/resellers/" id="5b6d6b10-6455-4557-adbc-2ddd88a7e122"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="25674c9a-36dd-4447-a7ad-aa58d7534867" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/resellers/" method="PUT" resourcePath="/resellers/" id="27385dbd-3029-42bb-8d6d-f3185ead9a77"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="a9afbd8a-8622-4225-ba6b-50fac283e99f" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/resellers/" method="DELETE" resourcePath="/resellers/" id="19a04c4b-c681-4984-bc00-204bf589d27e"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="2559f62e-716c-4b07-9d0b-85f5dfbde8c5" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/static_ip_ranges" method="GET" resourcePath="/static_ip_ranges" id="6550f44d-282b-4773-9874-96ed10792500"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="19def21c-db6e-4f8f-8955-9f2a7f5c997d" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/static_ip_ranges" method="POST" resourcePath="/static_ip_ranges" id="058f782b-83bb-4420-a74d-ef3f89f77035"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="88cc428b-3bac-45f7-83a7-15f881e955e2" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/static_ip_ranges/" method="GET" resourcePath="/static_ip_ranges/" id="7c1b63e1-b0f8-4d6b-978b-0169a6cae6f4"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="59835f0d-a9f8-4712-8c30-3bc77085f75e" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/static_ip_ranges/" method="PUT" resourcePath="/static_ip_ranges/" id="788d08a3-7d58-41e6-ac01-d462ff5dbd4a"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="19022257-673e-40c9-be01-1628de6d4082" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/static_ip_ranges/" method="DELETE" resourcePath="/static_ip_ranges/" id="4b0125f5-3b75-4c7a-84bf-877a240f6142"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="a71aa3c1-8800-4d22-b9e5-4fb4123cf36b" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/statuses" method="GET" resourcePath="/statuses" id="f11821fc-2ecd-4315-a987-d202a3c13ccc"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="ef3e65bb-9bf6-44ed-a652-8bf672fc9e59" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/statuses" method="POST" resourcePath="/statuses" id="afdd9d5f-2c0f-4ab3-a834-bfb488dbd52d"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="495f6daa-60a3-4aca-869a-1b8dd24cd0a9" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/statuses/" method="GET" resourcePath="/statuses/" id="dabcdaf3-07df-475f-8463-4bc47203b3ec"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="8a85a081-3032-442b-8bc2-d7556027e8e4" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/statuses/" method="PUT" resourcePath="/statuses/" id="a626105f-ef08-4781-a5d0-b3d87ff99961"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="99c80289-d881-4a3c-9535-9a0c1137046b" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/statuses/" method="DELETE" resourcePath="/statuses/" id="8cd079e6-46f2-4804-adf5-03f5109a8f62"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="1400dbdd-f413-4b68-93d0-a7b6c5bb9ec6" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/transient_packages" method="GET" resourcePath="/transient_packages" id="c8846d2c-a2e7-4472-9d6c-ab2a677e1f32"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="645569a0-2ef0-4e34-85f3-47bec4c0d0db" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/transient_packages" method="POST" resourcePath="/transient_packages" id="4218ccf0-3e5c-4929-8d03-8c28790b930e"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="78898a83-5778-4279-be06-62b5c5dc9638" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/transient_packages/" method="GET" resourcePath="/transient_packages/" id="a1bb60fb-7bb4-4e5b-b821-01206d0bfee2"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="7dcfa7e0-59e9-46ef-bb32-0b2892489b23" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/transient_packages/" method="PUT" resourcePath="/transient_packages/" id="b07f1bae-a23b-43dc-b1a5-23abb815cb0d"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="2b026ec9-1261-41b1-a466-96fd2d809158" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/transient_packages/" method="DELETE" resourcePath="/transient_packages/" id="93ae4138-f003-412b-b654-43a19289057f"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="8171f31a-38d5-48b8-b8ea-dbc152e5de77" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/users" method="GET" resourcePath="/users" id="8629598b-6e89-40ec-8460-88ef9590181c"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="c2f1c6f1-867e-4703-b860-03e7d842e4cb" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/users" method="POST" resourcePath="/users" id="30692734-dd5c-4bcd-a4d6-e5a199dcde51"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="dfea7615-31f5-4d69-8fba-cff71f0d2cf7" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/users/generate_username" method="GET" resourcePath="/users/generate_username" id="16953169-383c-411e-9527-5633ad0de74e"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="4ddde538-dd9b-4650-9bb6-bbd22719133a" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/users/" method="GET" resourcePath="/users/" id="76ee0664-17fa-4dae-a88b-bb222fc4b3a7"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="0337ae61-2b10-4982-b354-54d1bcaef1e9" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/users/" method="PUT" resourcePath="/users/" id="277249a5-122b-4f16-9cee-9047cc5e5918"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="64fee5c7-31b3-4093-b67f-ddd150e96c29" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/users/" method="DELETE" resourcePath="/users/" id="906cca4d-f424-4e0c-aa31-4ef2ffae68f2"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="7a0abbf5-6149-461a-b952-e68567541019" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/users//change_password" method="POST" resourcePath="/users//change_password" id="ea965c2f-3b81-4105-807d-e20ca23fb800"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="7e50dbb3-8c6e-4110-ab4f-29af7e0ed16e" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/users//disconnect" method="POST" resourcePath="/users//disconnect" id="3337e3d2-eeb6-423f-ae6b-919e0f671043"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="62f63ab2-a70e-4c24-aa8a-3e4ef2f1e0bc" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/users//static_ip" method="POST" resourcePath="/users//static_ip" id="dd7ef6f4-de8d-45cf-8269-d5e4e49c3f4d"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="9101d444-23a4-41cd-9496-1ff8ab8e3f89" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/users//static_ip" method="DELETE" resourcePath="/users//static_ip" id="88fc39b5-7557-4c7f-bb86-ef4dfdfa4293"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="932ec09f-299a-4dc3-9bac-e21c2b995f85" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/webhook_endpoints" method="GET" resourcePath="/webhook_endpoints" id="8321ee2b-16a6-428a-a238-b96bd72e879b"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="621078f5-6c01-4fe4-a890-2c6f37e2fb10" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/webhook_endpoints" method="POST" resourcePath="/webhook_endpoints" id="de746b75-0fc0-4be2-ad9e-82c5094edfb1"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="2d0b0ddd-ef9c-490a-b380-54f6ce6d2bc9" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/webhook_endpoints/" method="GET" resourcePath="/webhook_endpoints/" id="03b184e5-f695-4b75-85a7-f0c2cffba1fa"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="996ff2be-4298-44f4-b5f5-2da09307876e" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/webhook_endpoints/" method="PUT" resourcePath="/webhook_endpoints/" id="66013e37-98d7-484f-851d-c3a66b4ac9bc"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="1f0acf9c-b015-4464-851f-44a1b48729a4" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/webhooks" method="GET" resourcePath="/webhooks" id="f3e31dc1-ad75-466c-af2b-d8691a07de1c"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="1405dea3-5a32-489c-9f17-afec0c5dcebb" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/webhooks/" method="GET" resourcePath="/webhooks/" id="7a6da256-7e54-4bd6-a8a1-115a5a68d3d0"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="988cc29f-7300-4b31-987a-3b8e974c81b4" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction></con:restMockService><con:endpointStrategy xsi:type="con:DefaultEndpointStrategy" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:endpoint mode="COMPLEMENT" username="martin" password="connexin123456">http://radius-dev-v3.uk.cxn-network.net/api</con:endpoint></con:endpointStrategy><con:properties><con:property><con:name>projectPath</con:name><con:value>C:\Users\m.spamer\soapui-projects\Connexin-RADIUS3</con:value></con:property><con:property><con:name>scriptPath</con:name><con:value>C:\Users\m.spamer\soapui-projects\Connexin-RADIUS3/groovy</con:value></con:property><con:property><con:name>logPath</con:name><con:value>C:\Users\m.spamer\soapui-projects\Connexin-RADIUS3/logs</con:value></con:property></con:properties><con:afterLoadScript>import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.Files

log.info Runtime.class.getPackage().getSpecificationVersion()
log.info Runtime.class.getPackage().getImplementationVersion()
log.info project.name
log.info project.description

def projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
projectPath = new com.eviware.soapui.support.GroovyUtils(context).projectPath
setPathProperty("projectPath", projectPath)
setPathProperty("dataPath", projectPath + '/data')
setPathProperty("scriptPath", projectPath + '/groovy')
setPathProperty("logPath", projectPath + '/logs')

// If the expected pathname exists, store it in the context.
def setPathProperty(String key, String pathname) {
	Path path = Paths.get(pathname)
	if (Files.isDirectory(path)) {
		project.setPropertyValue(key, pathname)
	}
}

</con:afterLoadScript><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>